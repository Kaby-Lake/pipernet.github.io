{"version":3,"sources":["components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","images/logo.png","state/PreferencesStore.ts","state/GraphStore.ts","state/ImportStore.ts","state/ProjectStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/index.ts","constants/index.ts","components/Navbar.jsx","components/utils/Collapsable.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/GraphDataTable.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","state/GraphDelegate.ts","components/visualize/visualizer.tsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/GlobalPanel.jsx","components/panels/NodesPanel.jsx","components/FloatingCards.jsx","App.js","reportWebVitals.js","index.js"],"names":["item","handleClick","isActive","className","Classes","ACTIVE","onClick","text","items","onSelect","value","fill","itemRenderer","CommonItemRenderer","filterable","onItemSelect","FILL","PreferencesStore","preferenceDialogOpen","darkMode","statisticsDialogOpen","helpDialogOpen","neighborDialogOpen","dataSheetDialogOpen","isRenderOptionsCardHidden","view","makeAutoObservable","this","GraphStore","globalConfig","nodes","colorBy","color","scale","from","to","sizeBy","size","min","max","labelBy","shape","labelSize","labelLength","edges","rawGraph","Graph","allowSelfLoops","multi","type","enableDegree","enableDensity","enableDiameter","enableCoefficient","enableComponent","selectedNodes","currentlyHovered","undefined","_lastSelectedSingleNode","metadata","snapshotName","String","numNodes","numEdges","nodeProperties","edgeProperties","_rawGraph","forEachNode","node","attributes","setNodeAttribute","show","visualize","id","name","val","key","originalOptions","getNodeAttribute","newOptions","tempGraph","links","push","export","order","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","cluster","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","err","Toaster","create","position","Position","TOP","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","graph","readNodeCSV","forEach","addNode","toString","readEdgeCSV","edge","hasNode","addEdge","Object","keys","clusterProperties","readGEXF","entries","getNodeAttributes","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","length","join","console","log","it","onerror","error","action","window","location","reload","nodeFileConfig","ProjectStore","currentSnapshotName","saveSnapshotDialogOpen","renameSnapshotDialogOpen","SearchStore","searchPaneOpen","searchStr","candidates","numCandidates","panelOpen","ClusterStore","clusterBy","observable","ref","attribute","keyValueMap","Map","hasOwnProperty","set","Array","Set","keyAttribute","values","colors","randomcolor","seed","count","getAttributeValues","get","THREE","_visualize","x","y","z","AppState","preferences","import","search","project","_instance","instance","privateConstructor","State","autorun","renderImportEdgePreview","renderImportNodePreview","SAMPLE_GRAPH_SNAPSHOTS","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","observer","classnames","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","NAVBAR_HEADING","icon","sample","sampleSnapshotTitle","sampleSnapshotUrl","fetch","mode","then","response","body","File","importGraphFromGEXF","res","BOTTOM","BUTTON","MINIMAL","SimpleSelect","ALERT_CONTENTS","ALIGN_RIGHT","NAVBAR_DIVIDER","dialogOpen","React","Component","isOpen","onToggle","children","elevation","Elevation","LARGE","rightIcon","PreviewTable","props","renderWrapper","numRows","selectedRegions","indexOf","rows","cols","cellRenderer","i","canImport","state","available","renderNodesSelection","Collapsable","nodesOpen","setState","CONTROL_GROUP","INPUT_GROUP","onInputChange","event","target","files","label","checked","onChange","renderEdgesSelection","edgesOpen","newDelimiter","style","minWidth","iconName","DARK","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","importGraphFromCSV","decorateRawGraph","fileIsSelect","renderImportButton","sortBy","sortOrder","rawTable","showRenderer","rowIndex","_options","hideNode","showNode","forceUpdate","renderColumns","columnIndex","cell","filter","element","interactive","ONE","selected","SUCCESS","showMoreBy","showMoreNum","GraphDataTable","Dialogs","display","GraphDelegate","_graphDelegateMethods","graphDelegateMethods","threeScene","lastObject3D","scene","remove","convexHullObjects","add","geom","meshMaterial","attributeColor","transparent","opacity","side","wireFrameMat","wireframe","SceneUtils","createMultiMaterialObject","newMap","attributePoints","convexHull","ConvexGeometry","createMesh","graphRef","createRef","graphDelegate","renderGraph","graphData","delegateGraph","nodeResolution","onNodeDragEnd","fx","fy","fz","onBackgroundClick","onBackgroundRightClick","onEngineTick","clusterDelegation","makeObservable","graphMethods","computed","current","timeOutRef","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","CARD","textAlign","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","RIGHT","backgroundImage","backgroundColor","hex","frame","hideAllLabels","showAllLabels","marginLeft","hideSelectedLabels","showSelectedLabels","stepSize","initialValue","labelStepSize","shapeOptionOpen","labelOptionOpen","SwitchCollapsable","marginTop","x1","y1","x2","y2","stopColor","stopOpacity","offset","pluralize","getRenderedNodes","RenderOptionsCard","animate","panel","Expander","optionsVisible","left","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","ELEVATION_2","paddingTop","paddingRight","paddingBottom","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9cd2400.chunk.js","sourcesContent":["import React from \"react\";\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\n\nexport default (item, { handleClick, isActive }) => (\n    <MenuItem\n        className={isActive ? Classes.ACTIVE : \"\"}\n        key={item}\n        onClick={handleClick}\n        text={item}\n    />\n);\n","import React from \"react\";\nimport { Button, Classes } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/labs\";\nimport CommonItemRenderer from \"./CommonItemRenderer\";\n\nexport default ({ items, onSelect, value, fill = false }) => (\n    <Select\n        items={items}\n        itemRenderer={CommonItemRenderer}\n        filterable={false}\n        onItemSelect={onSelect}\n    >\n        <Button className={fill ? Classes.FILL : null} text={value} />\n    </Select>\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import { makeAutoObservable } from \"mobx\";\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    preferenceDialogOpen = false;\n\n    darkMode = true;\n\n    statisticsDialogOpen = false;\n    helpDialogOpen = false;\n    neighborDialogOpen = false;\n    dataSheetDialogOpen = false;\n\n    isRenderOptionsCardHidden = true;\n\n    view = \"3D\";\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as graphology from \"graphology-types\";\nimport {\n    ForceGraphMethods,\n    NodeObject,\n    LinkObject,\n} from \"react-force-graph-3d\";\nimport { CustomNodeObject } from \"./GraphDelegate\";\n\nexport interface IHiddenOptions {\n    show: boolean;\n}\n\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    globalConfig = {\n        nodes: {\n            colorBy: \"pagerank\",\n            color: {\n                scale: \"Linear Scale\",\n                from: \"#448AFF\",\n                to: \"#E91E63\",\n            },\n            sizeBy: \"pagerank\",\n            size: {\n                min: 2,\n                max: 10,\n                scale: \"Linear Scale\",\n            },\n            labelBy: \"node_id\",\n            shape: \"circle\",\n            labelSize: 1,\n            labelLength: 10,\n        },\n        edges: {\n            color: \"#7f7f7f\",\n        },\n    };\n\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    decorateRawGraph(_rawGraph: Graph) {\n        _rawGraph.forEachNode((node, attributes) => {\n            // add _options and _visualize to attributes\n            let options: IHiddenOptions = {\n                show: true,\n            };\n            _rawGraph.setNodeAttribute(node, \"_options\", options);\n\n            let visualize: CustomNodeObject = {\n                id: node,\n                name: node,\n                val: 1,\n            };\n            _rawGraph.setNodeAttribute(node, \"_visualize\", visualize);\n        });\n        this.rawGraph = _rawGraph;\n    }\n\n    get delegateGraph() {\n        let tempGraph = {\n            nodes: [] as CustomNodeObject[],\n            links: [] as LinkObject[],\n        };\n        this.rawGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        tempGraph.links = this.rawGraph.export().edges;\n        return tempGraph;\n    }\n\n    get rawTable(): graphology.SerializedNode[] {\n        return this.rawGraph.export().nodes;\n    }\n\n    public hideNode(key: string) {\n        let originalOptions: IHiddenOptions = this.rawGraph.getNodeAttribute(\n            key,\n            \"_options\"\n        );\n        let newOptions: IHiddenOptions = {\n            ...originalOptions,\n            show: false,\n        };\n        this.rawGraph.setNodeAttribute(key, \"_options\", newOptions);\n    }\n\n    public showNode(key: string) {\n        let originalOptions: IHiddenOptions = this.rawGraph.getNodeAttribute(\n            key,\n            \"_options\"\n        );\n        let newOptions: IHiddenOptions = {\n            ...originalOptions,\n            show: true,\n        };\n        this.rawGraph.setNodeAttribute(key, \"_options\", newOptions);\n    }\n\n    nodes = this.globalConfig.nodes;\n    edges = this.globalConfig.edges;\n\n    enableDegree = true;\n    enableDensity = true;\n    enableDiameter = false;\n    enableCoefficient = true;\n    enableComponent = true;\n\n    // Updated by frame event\n    selectedNodes = [];\n\n    // Currently hovered node\n    currentlyHovered = undefined;\n\n    // Cache the single node that's been selected last time\n    // and will not update unless exactly one node is selected again\n    // useful for NeighborDialog\n    _lastSelectedSingleNode = null;\n\n    get hasGraph() {\n        return this.rawGraph.order && this.rawGraph.size != 0;\n    }\n\n    metadata = {\n        snapshotName: String,\n        numNodes: 0,\n        numEdges: 0,\n\n        // attributes of nodes in imported csv\n        nodeProperties: [],\n        edgeProperties: [],\n    };\n}\n","import { Toaster, Position, Intent } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as graphology from \"graphology-types\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\nimport { IHiddenOptions } from \"./GraphStore\";\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importCSVDialogOpen = false;\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n                cluster: \"Unknown\",\n            },\n            delimiter: \",\",\n        },\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        },\n    };\n\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, <string>reader.result));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: false,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            tempNodes = await this.readNodeCSV();\n            tempNodes.forEach((node) => {\n                graph.addNode(\n                    node[config.nodeFile.mapping.id].toString(),\n                    node\n                );\n            });\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, { id: fromId });\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, { id: toId });\n            }\n            graph.addEdge(fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: config.hasNodeFile\n                    ? null\n                    : config.nodeFile.mapping.cluster,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    //TODO:import 里的id和cluster， source target还没设置\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n\n        for (const [key, value] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: null,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    public renderImportGEXFPreview(): void {}\n\n    public renderImportEdgePreview(): void {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.readAsText(file);\n\n        reader.onload = () => {\n            // Read entire CSV into memory as string\n            let fileAsString = <string>reader.result;\n\n            // if the file is not regularly formatted, replace the EOL character\n            fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n            fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n            // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n            const lines = fileAsString.split(\"\\n\");\n            const topLinesAsString = lines\n                .map((l) => l.trim())\n                .slice(0, lines.length < 10 ? lines.length : 10)\n                .join(\"\\n\");\n            console.log(topLinesAsString);\n\n            // Parse the top lines\n            try {\n                const it = hasHeader\n                    ? parse(topLinesAsString, {\n                          comment: \"#\",\n                          trim: true,\n                          auto_parse: true,\n                          skip_empty_lines: true,\n                          columns: hasHeader,\n                          delimiter: delimiter,\n                      })\n                    : parse(topLinesAsString, {\n                          comment: \"#\",\n                          trim: true,\n                          auto_parse: true,\n                          skip_empty_lines: true,\n                          columns: undefined,\n                          delimiter: delimiter,\n                      });\n                edgeFileConfig.topN = it;\n                edgeFileConfig.columns = <any>(\n                    Object.keys(it[0]).map((key) => `${key}`)\n                );\n\n                // if there exists two or more columns in the parsed edge file\n                if (edgeFileConfig.columns.length >= 2) {\n                    edgeFileConfig.mapping.fromId = edgeFileConfig.columns[0];\n                    edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                    edgeFileConfig.isReady = true;\n                } else if (edgeFileConfig.columns.length == 1) {\n                    edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                        edgeFileConfig.columns[0];\n                    edgeFileConfig.isReady = true;\n                } else {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                }\n            } catch {\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    message: \"Error: Fails to parse file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                edgeFileConfig.parseError = true;\n            }\n        };\n\n        reader.onerror = () => {\n            console.error(reader.error);\n            Toaster.create({\n                position: Position.TOP,\n            }).show({\n                action: {\n                    onClick: () => window.location.reload(),\n                    text: \"Refresh Page\",\n                },\n                message: \"Error: Fails to open file\",\n                intent: Intent.DANGER,\n                timeout: -1,\n            });\n        };\n    }\n\n    public renderImportNodePreview(): void {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.readAsText(file);\n\n        reader.onload = () => {\n            // Read entire CSV into memory as string\n            let fileAsString = <string>reader.result;\n\n            // if the file is not regularly formatted, replace the EOL character\n            fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n            fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n            // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n            const lines = fileAsString.split(\"\\n\");\n            const topLinesAsString = lines\n                .map((l) => l.trim())\n                .slice(0, lines.length < 10 ? lines.length : 10)\n                .join(\"\\n\");\n            console.log(topLinesAsString);\n\n            // Parse the top lines\n            try {\n                const it = hasHeader\n                    ? parse(topLinesAsString, {\n                          comment: \"#\",\n                          trim: true,\n                          auto_parse: true,\n                          skip_empty_lines: true,\n                          columns: hasHeader,\n                          delimiter,\n                      })\n                    : parse(topLinesAsString, {\n                          comment: \"#\",\n                          trim: true,\n                          auto_parse: true,\n                          skip_empty_lines: true,\n                          columns: undefined,\n                          delimiter,\n                      });\n                nodeFileConfig.topN = it;\n                nodeFileConfig.columns = <any>(\n                    Object.keys(it[0]).map((key) => `${key}`)\n                );\n\n                // if there exists two or more columns in the parsed edge file\n                if (nodeFileConfig.columns.length >= 2) {\n                    nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                    nodeFileConfig.mapping.cluster = nodeFileConfig.columns[1];\n                    nodeFileConfig.isReady = true;\n                } else if (nodeFileConfig.columns.length == 1) {\n                    nodeFileConfig.mapping.id = nodeFileConfig.mapping.cluster =\n                        nodeFileConfig.columns[0];\n                    nodeFileConfig.isReady = true;\n                } else {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                }\n            } catch {\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    message: \"Error: Fails to parse file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                nodeFileConfig.parseError = true;\n            }\n        };\n\n        reader.onerror = () => {\n            console.error(reader.error);\n            Toaster.create({\n                position: Position.TOP,\n            }).show({\n                action: {\n                    onClick: () => window.location.reload(),\n                    text: \"Refresh Page\",\n                },\n                message: \"Error: Fails to open file\",\n                intent: Intent.DANGER,\n                timeout: -1,\n            });\n        };\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class ProjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    currentSnapshotName = \"Untitled\";\n\n    saveSnapshotDialogOpen = false;\n    renameSnapshotDialogOpen = false;\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    searchPaneOpen = false;\n\n    searchStr = \"\";\n    candidates = [];\n    numCandidates = 0;\n    panelOpen = true; //test for ui panels\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\n\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    clusterBy = \"publish_time\";\n\n    rawGraph!: Graph;\n\n    // the map between [the id of a Node and the value of the attribute specified by $clusterBy]\n    get keyAttribute(): Map<string, string | number> {\n        const attribute = this.clusterBy;\n        const keyValueMap = new Map<string, string | number>();\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    // the possible attribute values of the attribute defined by clusterBy\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.map((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.map((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n\n    // centerPoints = new Map<string, THREE.Vector3>();\n\n    // // explicitly called when all node's position have been added to the map\n    // computeCenterPoints() {\n    //     let newMap = new Map<string, THREE.Vector3>();\n    //     this.attributePoints.forEach((value, key) => {\n    //         let keyString = \"_CLUSTER_\";\n    //         if (key as string) {\n    //             keyString += <string>key;\n    //         } else {\n    //             keyString += (<number>key).toString();\n    //         }\n    //         if (value.length < 4) {\n    //             newMap.set(keyString, new THREE.Object3D());\n    //         } else {\n    //             let convexHull = new ConvexGeometry(Array.from(value));\n    //             newMap.set(keyString, this.createMesh(convexHull));\n    //         }\n    //     });\n    //     this.convexHullObjects = newMap;\n    // }\n}\n","import { autorun, runInAction, observable, makeObservable } from \"mobx\";\n\nimport PreferencesStore from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport ProjectStore from \"./ProjectStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\n\nclass AppState {\n    constructor() {}\n\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    import!: ImportStore;\n    search!: SearchStore;\n    project!: ProjectStore;\n    cluster!: ClusterStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.project = new ProjectStore();\n        this.cluster = new ClusterStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\nautorun(() => (State.cluster.rawGraph = State.graph.rawGraph));\n\nexport default State;\n","export const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\n        \"covid19-06022020\",\n        \"https://gitee.com/kaby_lake/PiperNet/raw/ClusterGeneration/src/samples/merged.gexf\",\n    ],\n    // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\n];\n\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only edges file\";\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    Classes,\n    InputGroup,\n    Intent,\n    Position,\n    Tooltip,\n    Popover,\n    Menu,\n    MenuItem,\n    MenuDivider,\n} from \"@blueprintjs/core\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\n\nimport { GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS, BACKEND_URL } from \"../constants\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                        ></img>\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem text=\"Load Sample\" icon=\"graph\">\n                                        {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        onClick={() => {\n                                                            try {\n                                                                fetch(\n                                                                    sampleSnapshotUrl,\n                                                                    {\n                                                                        mode:\n                                                                            \"no-cors\",\n                                                                    }\n                                                                )\n                                                                    .then(\n                                                                        (\n                                                                            response\n                                                                        ) => {\n                                                                            return response.body;\n                                                                        }\n                                                                    )\n                                                                    .then(\n                                                                        (\n                                                                            gexf\n                                                                        ) => {\n                                                                            State.import.selectedGEXFFileFromInput = new File(\n                                                                                [\n                                                                                    gexf,\n                                                                                ],\n                                                                                \"sample.gexf\",\n                                                                                {\n                                                                                    type:\n                                                                                        \"text/xml\",\n                                                                                }\n                                                                            );\n                                                                            State.import\n                                                                                .importGraphFromGEXF()\n                                                                                .then(\n                                                                                    (\n                                                                                        res\n                                                                                    ) => {\n                                                                                        State.graph.rawGraph =\n                                                                                            res.graph;\n                                                                                        State.graph.metadata =\n                                                                                            res.metadata;\n                                                                                    }\n                                                                                );\n                                                                        }\n                                                                    );\n                                                            } catch (error) {\n                                                                console.log(\n                                                                    error\n                                                                );\n                                                            }\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )}\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from CSV...\"\n                                        onClick={() => {\n                                            State.import.importCSVDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from GEXF...\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"document-open\"\n                                        text=\"Open Snapshot\"\n                                        onClick={() => {\n                                            State.preferences.preferenceDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Save Snapshot\"\n                                        onClick={() => {\n                                            State.project.saveSnapshotDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Data Sheet\"\n                                        icon=\"database\"\n                                        onClick={() => {\n                                            // State.graph.frame.pauseLayout();\n                                            State.preferences.dataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <SimpleSelect\n                        className={classnames([Classes.ALERT_CONTENTS])}\n                        items={[\"3D\", \"2D\"]}\n                        value={State.preferences.view}\n                        onSelect={(it) => (State.preferences.view = it)}\n                    />\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"graph\"\n                            onClick={() => {\n                                State.project.renameSnapshotDialogOpen = true;\n                            }}\n                        >\n                            {State.graph.metadata.snapshotName}\n                        </Button>\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            onClick={() => {\n                                State.preferences.dialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"help\"\n                            onClick={() => {\n                                State.preferences.helpDialogOpen = true;\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Collapse, Card, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\n\nexport default ({ name, isOpen, onToggle, children }) => (\n    <Card elevation={Elevation.THREE}>\n        <Button\n            className={classnames(\n                Classes.LARGE,\n                Classes.FILL,\n                \"text-align-left\"\n            )}\n            rightIcon={isOpen ? \"chevron-up\" : \"chevron-down\"}\n            onClick={onToggle}\n        >\n            {name}\n        </Button>\n        <Collapse isOpen={isOpen}>{children}</Collapse>\n    </Card>\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Spinner,\n    Switch,\n    Divider,\n    FileInput,\n    Alert,\n    Callout,\n    Tag,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\n\nimport Collapsable from \"./utils/Collapsable\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top 10 lines of the selected file are displayed\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                available: ONLY_EDGE_FILE,\n                nodesOpen: true,\n                edgesOpen: true,\n                delimiter: \",\",\n            };\n        }\n\n        // determine if this state is importable\n        canImport = () => {\n            if (this.state.available === NODE_AND_EDGE_FILE) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else if (this.state.available === ONLY_EDGE_FILE) {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n            return false;\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            // if file not imported, show blank\n            if (this.state.available === ONLY_EDGE_FILE) {\n                return null;\n            }\n\n            return (\n                <Collapsable\n                    name=\"Nodes\"\n                    isOpen={this.state.nodesOpen}\n                    onToggle={() =>\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.nodeFileName}\n                                onInputChange={(event) => {\n                                    if (event.target.files.length < 1) {\n                                        return;\n                                    }\n                                    State.import.nodeFileName =\n                                        event.target.files[0].name;\n                                    // after setting the selectedNodeFileFromInput, other attributes will update automatically\n                                    State.import.selectedNodeFileFromInput =\n                                        event.target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                value={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                            <br />\n                            Column for Attribute for Cluster:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                value={nodeFile.mapping.cluster}\n                                onSelect={(it) =>\n                                    (nodeFile.mapping.cluster = it)\n                                }\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <Collapsable\n                    name=\"Edges\"\n                    isOpen={this.state.edgesOpen}\n                    onToggle={() =>\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.edgeFileName}\n                                onInputChange={(event) => {\n                                    if (event.target.files.length < 1) {\n                                        return;\n                                    }\n                                    State.import.edgeFileName =\n                                        event.target.files[0].name;\n                                    State.import.selectedEdgeFileFromInput =\n                                        event.target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                value={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />{\" \"}\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                value={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div className=\"column-selection\">\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        value={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter == \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter == \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    style={{ minWidth: \"80vw\" }}\n                    iconName=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importCSVDialogOpen}\n                    onClose={() => {\n                        State.import.importCSVDialogOpen = false;\n                    }}\n                    title=\"Import CSV\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div>\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"import-dialog\"\n                                )}\n                            >\n                                I have:\n                                <SimpleSelect\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\n                                    value={this.state.available}\n                                    onSelect={(targetValue) => {\n                                        State.import.importConfig.hasNodeFile = !(\n                                            targetValue === ONLY_EDGE_FILE\n                                        );\n                                        this.setState({\n                                            available: targetValue,\n                                        });\n                                    }}\n                                />\n                                <Divider />\n                                {this.renderNodesSelection()}\n                                <br />\n                                {this.renderEdgesSelection()}\n                                <br />\n                                {this.renderDelimiterSelection()}\n                            </div>\n                            <div className={Classes.DIALOG_FOOTER}>\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                    <Button\n                                        className={classnames({\n                                            [Classes.DISABLED]: !this.canImport(),\n                                        })}\n                                        intent={Intent.PRIMARY}\n                                        onClick={() => {\n                                            // requestCreateNewProject({\n                                            //     name: State.project.newProjectName,\n                                            //     createdDate: new Date().toLocaleString(),\n                                            // });\n                                            State.import.isLoading = true;\n                                            State.import\n                                                .importGraphFromCSV()\n                                                .then((res) => {\n                                                    State.graph.decorateRawGraph(\n                                                        res.graph\n                                                    );\n                                                    State.graph.metadata =\n                                                        res.metadata;\n\n                                                    // runInAction(\n                                                    //     \"load imported graph\",\n                                                    //     () => {\n                                                    //         appState.graph.rawGraph =\n                                                    //             graph.rawGraph;\n                                                    //         appState.graph.metadata =\n                                                    //             graph.metadata;\n                                                    //         appState.graph.setUpFrame();\n                                                    //     }\n                                                    // );\n                                                    // // Reinitialize global configs\n                                                    // appState.graph.nodes =\n                                                    //     appState.graph.initialGlobalConfig.nodes;\n                                                    // appState.graph.overrides = new Map();\n\n                                                    State.import.isLoading = false;\n                                                    State.import.importCSVDialogOpen = false;\n\n                                                    // // Newly imported graph shouldn't have label showing\n                                                    // appState.graph.frame.turnOffLabelCSSRenderer();\n                                                });\n                                        }}\n                                        text=\"Import\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Spinner,\n    FileInput,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../state\";\n\nexport default observer(\n    class GEXFImportDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            className={classnames({\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\n                            })}\n                            intent={Intent.PRIMARY}\n                            onClick={() => {\n                                State.import.isLoading = true;\n                                State.import\n                                    .importGraphFromGEXF()\n                                    .then((res) => {\n                                        State.graph.decorateRawGraph(res.graph);\n                                        State.graph.metadata = res.metadata;\n\n                                        State.import.isLoading = false;\n                                        State.import.importGEXFDialogOpen = false;\n                                    });\n                            }}\n                            text=\"Import\"\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    iconName=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Import GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                if (\n                                                    event.target.files.length <\n                                                    1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    event.target.files[0].name;\n                                                State.import.selectedGEXFFileFromInput =\n                                                    event.target.files[0];\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Switch,\n    ButtonGroup,\n    Card,\n    Elevation,\n} from \"@blueprintjs/core\";\nimport { Column, Table, Cell } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\n\nexport default observer(\n    class GraphTable extends React.Component {\n        state = {\n            sortBy: \"None\",\n            sortOrder: \"Descending\", // or 'Ascending'\n        };\n\n        rawGraph = State.graph.rawGraph;\n        rawTable = State.graph.rawTable;\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        showRenderer = (rowIndex) => {\n            let node = this.rawTable[rowIndex];\n\n            return (\n                <Cell>\n                    <Switch\n                        checked={node.attributes._options.show}\n                        onChange={() => {\n                            node.attributes._options.show\n                                ? State.graph.hideNode(node.key)\n                                : State.graph.showNode(node.key);\n                            this.forceUpdate();\n                        }}\n                    />\n                </Cell>\n            );\n        };\n\n        renderColumns = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it != \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(rowIndex, columnIndex) => {\n                                let attribute = this.nodeProperties[\n                                    columnIndex - 2\n                                ];\n                                let cellAttributes = this.rawTable[rowIndex]\n                                    .attributes;\n                                let cell = cellAttributes[attribute];\n                                return <Cell>{cell}</Cell>;\n                            }}\n                        />\n                    );\n                }\n            });\n            return columns.filter((element) => {\n                return element != undefined;\n            });\n        };\n\n        render() {\n            return (\n                <div className=\"argo-table-container\">\n                    <Card interactive={false} elevation={Elevation.ONE}>\n                        Sort By\n                        <SimpleSelect\n                            items={this.nodeProperties}\n                            value={this.state.sortBy}\n                            onSelect={(selected) => {\n                                this.setState({ sortBy: selected });\n                            }}\n                        />\n                        <SimpleSelect\n                            items={[\"Descending\", \"Ascending\"]}\n                            value={this.state.sortOrder}\n                            onSelect={(selected) => {\n                                this.setState({ sortOrder: selected });\n                            }}\n                        />\n                    </Card>\n                    <Table\n                        className=\"pt-bordered pt-striped\"\n                        numRows={this.rawGraph.order}\n                    >\n                        {/* first column is the Show switch */}\n                        <Column\n                            name=\"Show\"\n                            intent={Intent.SUCCESS}\n                            cellRenderer={this.showRenderer}\n                        />\n                        <Column\n                            name=\"id(Designated)\"\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.rawTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    ButtonGroup,\n    NumericInput,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../state\";\nimport GraphDataTable from \"./GraphDataTable\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\n\nexport default observer(\n    class DataSheetDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                showMoreBy: \"pagerank\",\n                showMoreNum: 5,\n            };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    iconName=\"database\"\n                    isOpen={State.preferences.dataSheetDialogOpen}\n                    onClose={() => {\n                        State.preferences.dataSheetDialogOpen = false;\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        <GraphDataTable />\n                    </div>\n\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.preferences.dataSheetDialogOpen = false;\n                                }}\n                                text=\"Done\"\n                            />\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportDialog from \"./ImportDialog\";\nimport GEXFImportDialog from \"./GEXFImportDialog\";\n// import OpenDialog from \"./OpenDialog\";\n// import NewProjectDialog from \"./NewProjectDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import SaveSnapshotDialog from \"./SaveSnapshotDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import OpenSnapshotDialog from \"./OpenSnapshotDialog\";\n// import ShareDialog from './ShareDialog';\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport DataSheetDialog from \"./DataSheetDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportDialog />\n                <GEXFImportDialog />\n                {/*<OpenDialog />\n                <OpenSnapshotDialog />\n                <NewProjectDialog />\n                <ProjectDetailDialog />\n                <SaveSnapshotDialog />\n                <RenameSnapshotDialog />\n                <ShareDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog /> */}\n                <DataSheetDialog />\n            </div>\n        );\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    NodeObject,\n    LinkObject,\n} from \"react-force-graph-3d\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport { SceneUtils } from \"three/examples/jsm/utils/SceneUtils.js\";\nimport * as THREE from \"three\";\n\nexport interface CustomNodeObject extends NodeObject {\n    name?: string;\n    val?: number;\n}\n\nexport default class GraphDelegate {\n    constructor(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.threeScene = this.graphDelegateMethods.scene();\n        makeAutoObservable(this);\n    }\n\n    private graphDelegateMethods: ForceGraphMethods;\n\n    private threeScene: THREE.Scene;\n\n    get rawGraph(): Graph {\n        return State.graph.rawGraph;\n    }\n\n    lastObject3D!: THREE.Object3D;\n\n    clusterDelegation() {\n        this.threeScene.remove(this.lastObject3D);\n        this.lastObject3D = new THREE.Object3D();\n        this.convexHullObjects.forEach((value, key) => {\n            this.lastObject3D.add(value);\n        });\n        this.threeScene.add(this.lastObject3D);\n    }\n\n    // explicitly called when all node's position have been added to the map\n    get convexHullObjects(): Map<string | number, THREE.Object3D> {\n        let newMap = new Map<string | number, THREE.Object3D>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            if (value.length < 4) {\n                newMap.set(key, new THREE.Object3D());\n            } else {\n                let convexHull = new ConvexGeometry(Array.from(value));\n                newMap.set(key, this.createMesh(convexHull, key));\n            }\n        });\n        return newMap;\n    }\n\n    private createMesh(\n        geom: ConvexGeometry,\n        name: string | number\n    ): THREE.Object3D {\n        // 实例化一个绿色的半透明的材质\n        var meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.2,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        var wireFrameMat = new THREE.MeshBasicMaterial();\n        wireFrameMat.wireframe = true; //把材质渲染成线框\n\n        // 将两种材质都赋给几何体\n        var mesh = SceneUtils.createMultiMaterialObject(geom, [\n            meshMaterial,\n            wireFrameMat,\n        ]);\n\n        return mesh;\n    }\n\n    // get graph(): ForceGraphMethods$2 {\n    //     return this.graphRef.current;\n    // }\n    // nodeArray: THREE.Vector3[] = [];\n    // Graph = ForceGraph3D()(document.getElementById(\"graph\"))\n    //     .graphData(data)\n    //     .nodeId(\"key\")\n    //     .nodeRelSize(10)\n    //     .nodeVal(1)\n    //     .linkCurvature(0.2)\n    //     .linkWidth(linkWidth)\n    //     .linkColor(linkColor)\n    //     .nodeCanvasObject(node)\n    //     .d3VelocityDecay(0.2)\n    //     .d3AlphaDecay(0.01)\n    //     .cooldownTime(20000)\n    //     .onNodeHover(nodeHover)\n    //     .onNodeClick((node) => {\n    //         locked = true;\n    //         hover = node.key;\n    //     })\n    //     .onBackgroundClick(() => {\n    //         locked = false;\n    //     })\n    //     .enableNodeDrag(false);\n    // //.enablePointerInteraction(false);\n    // constructor() {\n    //     makeObservable(this, {\n    //         graphRef: observable,\n    //         graph: computed,\n    //     });\n    // }\n}\n","import React from \"react\";\nimport { observable, makeObservable, computed, autorun } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, { ForceGraphMethods } from \"react-force-graph-3d\";\nimport State from \"../../state\";\nimport GraphDelegate from \"../../state/GraphDelegate\";\n\nexport default observer(\n    class ThreeJSVis extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                graphRef: observable,\n                graphMethods: computed,\n                // centerPoints: observable,\n            });\n        }\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        graphDelegate!: GraphDelegate;\n\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <ForceGraph3D\n                        ref={this.graphRef}\n                        graphData={State.graph.delegateGraph}\n                        nodeResolution={20}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        onBackgroundClick={() => {\n                            // this.allAdded = true;\n                            // this.graphRef.current.pauseAnimation();\n                            // this.graphMethods.refresh();\n                            // this.graphDelegate.init();\n                        }}\n                        onBackgroundRightClick={() => {\n                            // this.allAdded = true;\n                            // this.graphRef.current.pauseAnimation();\n                            // this.graphMethods.refresh();\n                            // this.graphDelegate.init();\n                        }}\n                        onEngineTick={() =>\n                            this.graphDelegate.clusterDelegation()\n                        }\n                    />\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        componentDidMount() {\n            this.graphDelegate = new GraphDelegate(this.graphMethods);\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Button, Classes, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\n// import { Popover2, Select } from \"@blueprintjs/labs\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport * as THREE from 'three';\n// import SimpleSelect from \"../utils/SimpleSelect\";\n// import mouse from \"../../graph-frontend/src/select\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n\n        constructor(props) {\n            super(props);\n            this.state = {\n                timeOutRef: null,\n                sizeOptionOpen: false,\n                thicknessOptionOpen: false,\n                colorOptionOpen: false,\n            };\n        }\n\n        render() {\n            let graph = State.graph.graph;\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen\n                            })\n                        }\n                    >\n                        <div\n                            className={classnames(Classes.CARD, \"sub-option\")}\n                        >\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>Select Edge Color:\n                            <span style={{ float: \"right\" }}>\n                                        <Popover\n                                            interactionKind={PopoverInteractionKind.CLICK}\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={Position.RIGHT}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    backgroundColor: State.graph.edges.color\n                                                }}\n                                            />\n                                            <div>\n                                                <SketchPicker\n                                                    color={State.graph.edges.color}\n                                                    onChange={(it) => {\n                                                        // State.graph.process.graph.forEachNode(n => {\n\n                                                        //     let red = new THREE.Color(State.graph.edges.color).r;\n                                                        //     let blue = new THREE.Color(State.graph.edges.color).g;\n                                                        //     let green = new THREE.Color(State.graph.edges.color).b;\n                                                        //     n.renderData.linecolor.r = red;\n                                                        //     n.renderData.linecolor.g = blue;\n                                                        //     n.renderData.linecolor.b = green;\n                                                        // });\n                                                        (State.graph.edges.color = it.hex);\n                                                        (console.log(it.hex));\n                                                        /**update edge color in real time*/\n                                                        // State.graph.process.onHover();\n\n                                                    }}\n                                                />\n                                            </div>\n\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Thickness */}\n                    {/* <Collapsable\n                    name=\"Thickness\"\n                    isOpen={this.state.thicknessOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\n                        })\n                    }\n                    >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p>Select Edge Thickness: </p>\n                            <div style={{display: \"inline\", float: \"right\"}}>\n\n                            </div>\n                        </section>\n                    </div>\n                </Collapsable> */}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;","import React from \"react\";\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class LabelsPanel extends React.Component {\n    render() {\n      return (\n        <div>\n          <span style={{ display: \"inline-block\" }}>\n            <Button\n              style={{ width: \"100px\" }}\n              id=\"hideAll\"\n              iconName=\"eye-off\"\n              className={Classes.FILL}\n              onClick={() => State.graph.frame.hideAllLabels()}\n            >\n              Hide All\n        </Button>\n            <Button\n              style={{ width: \"100px\", display: \"none\" }}\n              id=\"showAll\"\n              iconName=\"eye-on\"\n              className={Classes.FILL}\n              onClick={() => State.graph.frame.showAllLabels()}\n            >\n              Show All\n        </Button>\n            <Button\n              style={{ width: \"140px\", marginLeft: \"10px\" }}\n              id=\"hideSelected\"\n              iconName=\"eye-off\"\n              className={Classes.FILL}\n              onClick={() => State.graph.frame.hideSelectedLabels()}\n            >\n              Hide Selected\n        </Button>\n            <Button\n              style={{ width: \"140px\", marginLeft: \"10px\", display: \"none\" }}\n              id=\"showSelected\"\n              iconName=\"eye-on\"\n              className={Classes.FILL}\n              onClick={() => State.graph.frame.showSelectedLabels()}\n            >\n              Show Selected\n        </Button>\n          </span>\n          <div style={{ height: '20px' }} />\n          <h6>Label Size</h6>\n          <Slider\n            min={0.5}\n            max={3}\n            stepSize={0.1}\n            // onChange={value => {\n            //   State.graph.nodes.labelSize = value;\n            // }}\n            // value={State.graph.nodes.labelSize}\n            initialValue={2}\n            value={2}\n          />\n          <div style={{ height: '20px' }} />\n          <h6>Label Length</h6>\n          <Slider\n            min={1}\n            max={32}\n            stepSize={0.1}\n            labelStepSize={5}\n            // onChange={value => {\n            //   State.graph.nodes.labelLength = value;\n            // }}\n            // value={State.graph.nodes.labelLength}\n            value={10}\n          />\n          <div style={{ height: '20px' }} />\n          <h6>Label By</h6>\n          {/* <Select\n            items={State.graph.allPropertiesKeyList}\n            itemRenderer={CommonItemRenderer}\n            filterable={false}\n            onItemSelect={it => (State.graph.nodes.labelBy = it)}\n          >\n            <Button text={State.graph.nodes.labelBy} />\n          </Select> */}\n        </div>\n      );\n    }\n  }\n);\n// export default LabelsPanel;","import React from \"react\";\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\n\nexport default ({ name, isOpen, onToggle, children }) => (\n    <div>\n        <Switch\n            label={name}\n            checked={isOpen}\n            onChange={onToggle}\n            className={Classes.ALIGN_RIGHT}\n        />\n        <Collapse isOpen={isOpen}>{children}</Collapse>\n    </div>\n);\n","import React from \"react\";\nimport { Button, Classes, Slider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class SelectionPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        shapeOptionOpen: false,\n        sizeOptionOpen: false,\n        colorOptionOpen: false,\n        labelOptionOpen: false\n      };\n    }\n\n    // twoLayerUpdate = (nodeId, key, value) => {\n    //   if (!State.graph.overrides.has(nodeId)) {\n    //     State.graph.overrides.set(nodeId, new Map());\n    //   }\n    //   const nodeAttrs = State.graph.overrides.get(nodeId);\n    //   if (value !== null) {\n    //     nodeAttrs.set(key, value);\n    //   } else {\n    //     nodeAttrs.delete(key);\n    //     if (nodeAttrs.size === 0) {\n    //       State.graph.overrides.delete(nodeId);\n    //     }\n    //   }\n    // };\n\n    // batchTwoLayerUpdate = (nodes, key, value) => {\n    //   runInAction(\"update entire selection\", () => {\n    //     nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\n    //   });\n    // };\n\n    render() {\n      return (\n        <div>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Size\"\n            isOpen={this.state.sizeOptionOpen}\n            onToggle={() => {\n              if (this.state.sizeOptionOpen) {\n                this.setState(\n                  {\n                    sizeOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"size\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    sizeOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"size\",\n                  //     State.graph.overrideConfig.size\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <Slider\n                min={1}\n                max={20}\n                stepSize={0.1}\n                labelStepSize={5}\n                // onChange={it => {\n                //   State.graph.overrideConfig.size = it;\n                //   this.batchTwoLayerUpdate(\n                //     State.graph.selectedNodes,\n                //     \"size\",\n                //     it\n                //   );\n                // }}\n                // value={State.graph.overrideConfig.size}\n                value={2}//set for test\n              />\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Color\"\n            isOpen={this.state.colorOptionOpen}\n            onToggle={() => {\n              if (this.state.colorOptionOpen) {\n                this.setState(\n                  {\n                    colorOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"color\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    colorOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"color\",\n                  //     State.graph.overrideConfig.color\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <section> <p style={{ textAlign: \"left\" }}>\n                Choose Color:\n            <span style={{ float: \"right\" }}>\n                  <Popover\n                    //previous!!\n                    // placement=\"bottom\"\n                    // modifiers={{\n                    //   preventOverflow: {\n                    //     enabled: false,\n                    //   },\n                    // }}\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    position={Position.RIGHT}\n\n                  >\n                    <Button\n                      text=\"  \"\n                      style={{\n                        backgroundImage: \"inherit\",\n                        // backgroundColor: State.graph.overrideConfig.color\n                      }}\n                    />\n                    <SketchPicker\n                    // color={State.graph.overrideConfig.color}\n                    // onChange={it => {\n                    //   State.graph.overrideConfig.color = it.hex;\n                    //   this.batchTwoLayerUpdate(\n                    //     State.graph.selectedNodes,\n                    //     \"color\",\n                    //     it.hex\n                    //   );\n                    // }}\n                    />\n                  </Popover>\n                </span>\n              </p>\n              </section>\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Label\"\n            isOpen={this.state.labelOptionOpen}\n            onToggle={() => {\n              if (this.state.labelOptionOpen) {\n                this.setState(\n                  {\n                    labelOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"label\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    labelOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"label\",\n                  //     State.graph.overrideConfig.label\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              Custom Label:\n            <input\n                value={\"test\"}//used for test\n              // value={State.graph.overrideConfig.label}\n              // onChange={it => {\n              //   State.graph.overrideConfig.label = it.target.value;\n              //   this.batchTwoLayerUpdate(\n              //     State.graph.selectedNodes,\n              //     \"label\",\n              //     it.target.value\n              //   );\n              // }}\n              />\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Shape\"\n            isOpen={this.state.shapeOptionOpen}\n            onToggle={() => {\n              if (this.state.shapeOptionOpen) {\n                this.setState(\n                  {\n                    shapeOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"shape\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    shapeOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"shape\",\n                  //     State.graph.overrideConfig.shape\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <section> <p style={{ textAlign: \"left\" }}>\n                Node Shape:\n            <span style={{ float: \"right\" }}>\n                  <Select\n                    items={[\n                      \"shape1\",\n                      \"shape2\",\n                      \"shape3\",\n                      \"shape4\",\n                      \"shape5\"\n                    ]}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={it => {\n                      console.log(it)//used for test\n                      // State.graph.overrideConfig.shape = it;\n                      // this.batchTwoLayerUpdate(\n                      //   State.graph.selectedNodes,\n                      //   \"shape\",\n                      //   it\n                      // );\n                    }\n                    }\n                  >\n                    {/* <Button text={State.graph.overrideConfig.shape} /> */}\n                    <Button text={\"change\"} />\n                    {/* upper is used for test */}\n                  </Select>\n                </span>\n              </p>\n              </section>\n            </div>\n          </SwitchCollapsable>\n        </div>\n      );\n    }\n  }\n);\n// export default SelectionPanel;","import React from \"react\";\nimport { Button, Classes, RangeSlider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\n// import { scales } from \"../../constants/index\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class GlobalPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        timeOutRef: null,\n        sizeOptionOpen: false,\n        colorOptionOpen: false,\n        shapeOptionOpen: false\n      };\n    }\n\n    render() {\n      return (\n        <div>\n          {/* Collapsable Option: Color */}\n          <Collapsable\n            name=\"Color\"\n            isOpen={this.state.colorOptionOpen}\n            onToggle={() =>\n              this.setState({\n                colorOptionOpen: !this.state.colorOptionOpen\n              })\n            }\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* color : color by */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Color By:\n                <span style={{ float: \"right\" }}>\n                    <SimpleSelect\n                      items={[\"item1\", \"item2\"]\n                        // State.graph.allPropertiesKeyList\n                      }\n                      onSelect={it => (\n                        console.log(\"color:color by\")\n                        // State.graph.nodes.colorBy = it\n                      )\n                      }\n                      value={\"1\"//for test\n                        // State.graph.nodes.colorBy\n                      }\n                    />\n                  </span>\n                </p>\n              </section>\n\n              {/* color:scale type  */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale Type:\n                <span style={{ float: \"right\" }}>\n                    <SimpleSelect\n                      items={[\"item1\", \"item2\"]\n                        // Object.keys(scales)\n                      }\n                      onSelect={it => (console.log(\"color:scale type\")\n                        // State.graph.nodes.color.scale = it\n                      )\n                      }\n                      value={\"2\"\n                        // State.graph.nodes.color.scale\n                      }\n                    />\n                  </span>\n                </p>\n              </section>\n\n              {/* the gradient section in color */}\n              <section >\n                <p style={{ textAlign: \"left\" }}>Gradient: &nbsp;\n                <span style={{ float: \"right\" }}>\n                    {/* left colorpicker */}\n                    <Popover\n                      // placement=\"bottom\"\n                      // modifiers={{\n                      //   preventOverflow: {\n                      //     enabled: false,\n                      //   },\n                      // }}\n                      interactionKind={PopoverInteractionKind.CLICK}\n                      popoverClassName=\"bp3-popover-content-sizing\"\n                      position={\"auto\"}\n                    >\n                      <Button\n                        text=\"  \"\n                      // style={{\n                      //   // backgroundImage: \"inherit\",\n                      //   // backgroundColor: State.graph.nodes.color.from\n                      // }}\n                      />\n                      <SketchPicker\n                        color={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.from\n                        }\n                        onChange={\n                          console.log(\"gradient section first colorpicker onchange\")\n                          // it => (State.graph.nodes.color.from = it.hex)\n                        }\n                      />\n                    </Popover>\n                    {/* arrow  */}\n                    &nbsp; &#8594; &nbsp;\n                    {/* right colorpicker */}\n                    <Popover\n                      //previous!!\n                      // placement=\"bottom\"\n                      // modifiers={{\n                      //   preventOverflow: {\n                      //     enabled: false,\n                      //   },\n                      // }}\n                      interactionKind={PopoverInteractionKind.CLICK}\n                      popoverClassName=\"bp3-popover-content-sizing\"\n                      position={\"auto\"}\n                    >\n                      <Button\n                        text=\"  \"\n                        style={{\n                          backgroundImage: \"inherit\",\n                          // backgroundColor: State.graph.nodes.color.to\n                        }}\n                      />\n                      <SketchPicker\n                        color={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.to\n                        }\n                        onChange={\n                          console.log(\"gradient section second colorpicker onchange\")\n                          // it => (State.graph.nodes.color.to = it.hex)\n                        }\n                      />\n                    </Popover>\n                  </span>\n                </p>\n              </section>\n              {/* color : gradient preview */}\n              <section style={{ marginTop: \"-1em\" }}>\n                <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\n                  <defs>\n                    <linearGradient\n                      x1=\"0%\"\n                      y1=\"50%\"\n                      x2=\"100%\"\n                      y2=\"50%\"\n                      id=\"theGradient\"\n                    >\n                      <stop\n                        stopColor={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.from\n                        }\n                        stopOpacity=\"1\"\n                        offset=\"0%\"\n                      />\n                      <stop\n                        stopColor={\n                          \"#ffffff\"//used for test\n                          // State.graph.nodes.color.to\n                        }\n                        stopOpacity=\"1\"\n                        offset=\"100%\"\n                      />\n                    </linearGradient>\n                  </defs>\n                  <rect\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"100%\"\n                    height=\"50\"\n                    fill=\"url(#theGradient)\"\n                  />\n                </svg>\n              </section>\n            </div>\n          </Collapsable>\n\n          {/* Collapsable Option: Size */}\n          <Collapsable\n            name=\"Size\"\n            isOpen={this.state.sizeOptionOpen}\n            onToggle={() =>\n              this.setState({\n                sizeOptionOpen: !this.state.sizeOptionOpen\n              })\n            }\n          >\n\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* size : scale by  */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale By:\n                <span style={{ float: \"right\" }}>\n                    <Select\n                      items={[\"item1\", \"item2\"]}\n                      itemRenderer={CommonItemRenderer}\n                      filterable={false}\n                      onItemSelect={\n                        console.log(\"size : scale by , component :select\")\n                        // it => (State.graph.nodes.sizeBy = it)\n                      }\n                    >\n                      <Button text={\"btn1\"\n                        // State.graph.nodes.sizeBy\n                      } />\n                    </Select>\n                  </span>\n                </p>\n              </section>\n              {/* size : scale type */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale Type:\n                <span style={{ float: \"right\" }}>\n                    <Select\n                      items={[\"item1\", \"item2\"]\n                        //Object.keys(scales)\n                      }\n                      itemRenderer={CommonItemRenderer}\n                      filterable={false}\n                      onItemSelect={\n                        console.log(\"size : scale type component: select\")\n                        // it => (State.graph.nodes.size.scale = it)\n                      }\n                    >\n                      <Button text={\"btn2\"\n                        // State.graph.nodes.size.scale\n                      } />\n                    </Select>\n                  </span>\n                </p>\n              </section>\n\n            Size Range:\n            <br />\n              <RangeSlider\n                min={1}\n                max={20}\n                stepSize={0.1}\n                labelStepSize={5}\n              // onChange={([a, b]) => {\n              //   runInAction(\"update scale\", () => {\n              //     State.graph.nodes.size.min = a;\n              //     State.graph.nodes.size.max = b;\n              //   });\n              // }}\n              // value={[\n              //   State.graph.nodes.size.min,\n              //   State.graph.nodes.size.max\n              // ]}\n              />\n            </div>\n          </Collapsable>\n\n          {/* Collapsable Option: Shape */}\n          <Collapsable\n            name=\"Shape\"\n            isOpen={this.state.shapeOptionOpen}\n            onToggle={() =>\n              this.setState({\n                shapeOptionOpen: !this.state.shapeOptionOpen\n              })\n            }\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* shape : node shape */}\n              <section> <p style={{ textAlign: \"left\" }}> Node Shape:\n              <span style={{ float: \"right\" }}>\n                  <Select\n                    items={[\n                      \"circle\",\n                      \"square\",\n                      \"triangle\",\n                      \"pentagon\",\n                      \"hexagon\",\n                      \"octagon\"\n                    ]}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={\n                      console.log(\" shape : node shape component: select\")\n                      // it => (State.graph.nodes.shape = it)\n                    }\n                  >\n                    <Button text={\"btn3\"\n                      // State.graph.nodes.shape\n                    } />\n                  </Select>\n                </span>\n              </p></section>\n            </div>\n          </Collapsable>\n          <br />\n          <small>\n\n            {/* {pluralize(\"node\", State.graph.overrides.size, true)}<span> </span> */}\n            {pluralize(\"node\", 0, true)}<span> </span>\n          have override styles.  &nbsp;\n          <Button className={\"pt-small\"} text=\"Clear\"\n            // onClick={() => (State.graph.overrides = new Map())} \n            />\n          </small>\n        </div>\n      );\n    }\n  }\n);\n// export default GlobalPanel;","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\nimport GlobalPanel from \"./GlobalPanel\";\nimport SelectionPanel from \"./SelectionPanel\";\n\nexport default observer(\n  class NodesPanel extends React.Component {\n    getRenderedNodes = () => {\n      if (State.graph.selectedNodes.length === 0) {\n        return (\n          <div>\n            <p>Modifying All Nodes</p>\n          </div>\n        );\n      }\n      return (\n        <p>{`Modifying ${pluralize(\n          \"Node\",\n          State.graph.selectedNodes.length,\n          true\n        )}`}</p>\n      );\n    };\n\n    render() {\n      return (\n        <div>\n          {this.getRenderedNodes()}\n          {State.graph.selectedNodes.length === 0 ? (\n            <GlobalPanel />\n          ) : (\n              <SelectionPanel />\n            )}\n        </div>\n      );\n    }\n  }\n);\n// export default NodesPanel;","import React from \"react\";\nimport { Classes, Tab, Tabs, Button } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\n// import { addNode } from \"../ipc/client\";\nimport NodesPanel from \"./panels/NodesPanel\";\nimport EdgesPanel from \"./panels/EdgesPanel\";\nimport LabelsPanel from \"./panels/LabelsPanel\";\n// import NodeDetail from \"./panels/NodeDetailPanel\";\n// import Legends from \"./Legends\";\n// // import StatusBar from './StatusBar';\n// import SelectionActionPanel from \"./panels/SelectionActionPanel\";\n\n// TODO: migrate to simple select\n\nlet RenderOptionsCard = observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <h2>Graph Options</h2>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n//\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.isRenderOptionsCardHidden = !State.preferences\n                .isRenderOptionsCardHidden;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"left-overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.isRenderOptionsCardHidden\n                                    ? this.optionsInvisible\n                                    : this.optionsVisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            ></Button>\n                            <br />\n                            <RenderOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.isRenderOptionsCardHidden\n                                        ? this.sideButtonVis\n                                        : this.sideButtonInv\n                                }\n                            ></Button>\n                        </div>\n                    </div>\n\n                    {/* {State.graph.selectedNodes.length === 1 && (\n            <NodeDetail node={State.graph.selectedNodes[0].data.ref} />\n          )}\n\n          {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n            <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n          )} */}\n\n                    {/* <Legends />\n          <StatusBar /> */}\n                    {/* {// This menu only shows when there are nodes selected\n            State.graph.selectedNodes.length > 0 && !State.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\n          } */}\n                </div>\n            );\n        }\n    }\n);\n\n// export default FloatingCards;\n","import React from \"react\";\nimport { Provider } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    Classes,\n    FocusStyleManager,\n    NonIdealState,\n} from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\nimport State from \"./state\";\nimport EdgesPanel from \"./components/panels/EdgesPanel\";\nimport LabelsPanel from \"./components/panels/LabelsPanel\";\nimport SelectionPanel from \"./components/panels/SelectionPanel\";\nimport GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}