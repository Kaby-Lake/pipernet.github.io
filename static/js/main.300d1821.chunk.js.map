{"version":3,"sources":["components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","images/logo.png","state/PreferencesStore.ts","state/GraphStore.ts","state/ImportStore.ts","state/ProjectStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","state/index.ts","constants/index.ts","components/Navbar.jsx","components/utils/Collapsable.jsx","components/dialogs/ImportCSVDialog.jsx","components/dialogs/ImportGEXFDialog.jsx","components/dialogs/ExportDialog.jsx","components/dialogs/GraphDataTable.jsx","components/dialogs/DataSheetDialog.jsx","components/Dialogs.jsx","components/ComponentRef.tsx","components/visualize/GraphDelegate.ts","components/visualize/visualizer.tsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/GlobalPanel.jsx","components/panels/NodesPanel.jsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/FloatingCards.jsx","App.js","reportWebVitals.js","index.js"],"names":["item","handleClick","isActive","className","Classes","ACTIVE","onClick","text","items","onSelect","value","fill","itemRenderer","CommonItemRenderer","filterable","onItemSelect","FILL","PreferencesStore","preferenceDialogOpen","darkMode","statisticsDialogOpen","helpDialogOpen","neighborDialogOpen","dataSheetDialogOpen","dataSheetLoading","isRenderOptionsCardHidden","view","makeAutoObservable","this","GraphStore","rawGraph","Graph","allowSelfLoops","multi","type","selectedNodes","currentlyHoveredId","metadata","snapshotName","String","nodeProperties","edgeProperties","_rawGraph","forEachNode","node","attributes","_options","show","visualize","id","name","val","isClusterNode","_visualize","forEachEdge","edge","source","target","isClusterLink","key","originalOptions","getNodeAttribute","newOptions","setNodeAttribute","order","size","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importSamplesDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","cluster","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","position","Position","TOP","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","graph","readNodeCSV","forEach","addNode","toString","readEdgeCSV","hasNode","addEdge","Object","keys","clusterProperties","readGEXF","entries","getNodeAttributes","nodes","push","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","length","join","console","log","it","onerror","error","action","window","location","reload","nodeFileConfig","ProjectStore","currentSnapshotName","exportDialogOpen","renameSnapshotDialogOpen","SearchStore","searchPaneOpen","searchStr","candidates","numCandidates","panelOpen","ClusterStore","clusterBy","observable","ref","attribute","keyValueMap","Map","hasOwnProperty","set","Array","from","Set","keyAttribute","values","attributeKeysMap","getAttributeValues","get","colors","randomcolor","seed","count","THREE","x","y","z","CssStore","colorBy","color","scale","to","sizeBy","min","max","labelBy","shape","labelSize","labelLength","edges","enableDegree","enableDensity","enableDiameter","enableCoefficient","enableComponent","AppState","preferences","import","search","project","css","_instance","instance","privateConstructor","State","autorun","renderImportEdgePreview","renderImportNodePreview","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","observer","classnames","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","NAVBAR_HEADING","icon","BOTTOM","BUTTON","MINIMAL","ALIGN_RIGHT","SimpleSelect","NAVBAR_DIVIDER","disabled","dialogOpen","open","React","Component","isOpen","onToggle","children","elevation","Elevation","LARGE","rightIcon","PreviewTable","props","renderWrapper","numRows","selectedRegions","indexOf","rows","cols","cellRenderer","i","canImport","state","available","renderNodesSelection","Collapsable","nodesOpen","setState","CONTROL_GROUP","INPUT_GROUP","onInputChange","event","files","label","checked","onChange","renderEdgesSelection","edgesOpen","loading","newDelimiter","style","minWidth","DARK","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","importGraphFromCSV","then","res","decorateRawGraph","fileIsSelect","importGraphFromGEXF","renderImportButton","ready","write","headers","exportData","export","data","_id","interactive","ONE","minimal","computeGEXFFile","filename","computeNodeFile","header","separator","computeEdgeFile","sortBy","sortOrder","showRenderer","rowIndex","rawTable","hideNode","showNode","forceUpdate","renderCell","columnIndex","cell","newVal","setValue","onConfirm","renderColumns","filter","element","SUCCESS","showMoreBy","showMoreNum","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","GraphDataTable","onOpened","setTimeout","renderTable","Dialogs","display","ComponentRef","nodeDetail","multiNodeDetail","GraphDelegate","graphDelegateMethods","threeScene","nodeVisibility","nodeObject","linkVisibility","lastObject3D","_graphDelegateMethods","scene","oldGraph","graphCopy","copy","names","index","clusterID","attributeKeys","remove","convexHullObjects","add","geom","meshMaterial","attributeColor","transparent","opacity","side","wireFrameMat","wireframe","SceneUtils","createMultiMaterialObject","newGraph","addInvisibleClusterNode","includes","tempGraph","links","newMap","attributePoints","convexHull","ConvexGeometry","createMesh","graphRef","createRef","graphDelegate","nodeHover","previousNode","getNodeId","nodeSelect","nodeId","ctrlKey","shiftKey","splice","graphMethods","refresh","renderGraph","graphData","visualizationGraph","nodeResolution","onNodeDragEnd","fx","fy","fz","onBackgroundClick","onBackgroundRightClick","onEngineTick","clusterDelegation","nodeColor","onNodeClick","onNodeHover","makeObservable","computed","mountDelegateMethods","current","timeOutRef","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","CARD","textAlign","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","RIGHT","backgroundImage","backgroundColor","hex","frame","hideAllLabels","showAllLabels","marginLeft","hideSelectedLabels","showSelectedLabels","stepSize","initialValue","labelStepSize","shapeOptionOpen","labelOptionOpen","SwitchCollapsable","marginTop","x1","y1","x2","y2","stopColor","stopOpacity","offset","pluralize","getRenderedNodes","cellRenderer_property","cellRenderer_value","formatLongFloat","nodeAttributeValue","num","Number","isNaN","parseFloat","toPrecision","componentDidMount","enableRowHeader","RenderOptionsCard","animate","panel","Expander","optionsVisible","left","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","ELEVATION_2","paddingTop","paddingRight","paddingBottom","MultiDetailPanel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.300d1821.chunk.js","sourcesContent":["import React from \"react\";\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\n\nexport default (item, { handleClick, isActive }) => (\n    <MenuItem\n        className={isActive ? Classes.ACTIVE : \"\"}\n        key={item}\n        onClick={handleClick}\n        text={item}\n    />\n);\n","import React from \"react\";\nimport { Button, Classes } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/labs\";\nimport CommonItemRenderer from \"./CommonItemRenderer\";\n\nexport default ({ items, onSelect, value, fill = false }) => (\n    <Select\n        items={items}\n        itemRenderer={CommonItemRenderer}\n        filterable={false}\n        onItemSelect={onSelect}\n    >\n        <Button className={fill ? Classes.FILL : null} text={value} />\n    </Select>\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import { makeAutoObservable } from \"mobx\";\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    preferenceDialogOpen = false;\n\n    darkMode = true;\n\n    statisticsDialogOpen = false;\n    helpDialogOpen = false;\n    neighborDialogOpen = false;\n    dataSheetDialogOpen = false;\n    dataSheetLoading = true;\n\n    isRenderOptionsCardHidden = true;\n\n    view = \"3D\";\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport {\n    CustomNodeObject,\n    CustomLinkObject,\n} from \"../components/visualize/GraphDelegate\";\n\n/**\n * the hidden options inside a node\n * will be mounted as a attribute named as [_options] inside every node\n *\n * @export\n * @interface IHiddenOptions\n */\nexport interface IHiddenOptions {\n    show: boolean;\n}\n\n/**\n * the class to store a raw graph as well as the related information\n \n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     *\n     * @see graphology\n     *\n     * @type {Graph}\n     * @memberof GraphStore\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * should be called on every graph import\n     * add the _options and _visualize to every nodes inside the specified graph\n     * as well as the _visualize to every links inside the specified graph\n     *\n     * the _options is for the visualizing configs: such as the show or hide of a node\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     * @memberof GraphStore\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) => {\n            // add _options and _visualize to attributes\n            let options: IHiddenOptions = {\n                show: true,\n            };\n            attributes._options = options;\n\n            let visualize: CustomNodeObject = {\n                id: node,\n                name: node,\n                val: 1, // to be changed, to represent the size of the node\n                isClusterNode: false, // if is clusterNode, then the front-end will ignore this node\n            };\n            attributes._visualize = visualize;\n        });\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) => {\n            let visualize: CustomLinkObject = {\n                source: source,\n                target: target,\n                isClusterLink: false, // if is clusterLink, then the front-end will ignore this link\n            };\n            attributes._visualize = visualize;\n        });\n        return _rawGraph;\n    }\n\n    /**\n     * hide the node specified by node id\n     *\n     * @param {string} key\n     * @memberof GraphStore\n     */\n    public hideNode(key: string) {\n        let originalOptions: IHiddenOptions = this.rawGraph.getNodeAttribute(\n            key,\n            \"_options\"\n        );\n        let newOptions: IHiddenOptions = {\n            ...originalOptions,\n            show: false,\n        };\n        this.rawGraph.setNodeAttribute(key, \"_options\", newOptions);\n    }\n\n    /**\n     * hide the node specified by node id\n     *\n     * @param {string} key\n     * @memberof GraphStore\n     */\n    public showNode(key: string) {\n        let originalOptions: IHiddenOptions = this.rawGraph.getNodeAttribute(\n            key,\n            \"_options\"\n        );\n        let newOptions: IHiddenOptions = {\n            ...originalOptions,\n            show: true,\n        };\n        this.rawGraph.setNodeAttribute(key, \"_options\", newOptions);\n    }\n\n    /**\n     * the currently selected node ids\n     * the singleNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string[]}\n     * @memberof GraphStore\n     */\n    selectedNodes: string[] = [];\n\n    /**\n     * the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     *\n     * @memberof GraphStore\n     */\n\n    currentlyHoveredId: string = \"undefined\";\n\n    /**\n     * if currently there is a graph in the dataset\n     *\n     * @readonly\n     * @memberof GraphStore\n     */\n    get hasGraph() {\n        return this.rawGraph.order && this.rawGraph.size != 0;\n    }\n\n    /**\n     * the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     *\n     * @memberof GraphStore\n     */\n    metadata = {\n        snapshotName: String,\n\n        // attributes of nodes in imported graph\n        nodeProperties: [],\n        edgeProperties: [],\n    };\n}\n","import { Toaster, Position, Intent } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importCSVDialogOpen = false;\n    importSamplesDialogOpen = false;\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n                cluster: \"Unknown\",\n            },\n            delimiter: \",\",\n        },\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        },\n    };\n\n    /**\n     * read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     *\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @return {*}  {Promise<Object[]>}\n     * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n     * @memberof ImportStore\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     *\n     * @private\n     * @return {*}  {Promise<Graph>}\n     * @memberof ImportStore\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, <string>reader.result));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     *\n     * @return {*}\n     * @memberof ImportStore\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: true,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            tempNodes = await this.readNodeCSV();\n            tempNodes.forEach((node) => {\n                graph.addNode(\n                    node[config.nodeFile.mapping.id].toString(),\n                    node\n                );\n            });\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, { id: fromId });\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, { id: toId });\n            }\n            graph.addEdge(fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: config.hasNodeFile\n                    ? null\n                    : config.nodeFile.mapping.cluster,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    //TODO:import 里的id和cluster， source target还没设置\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n\n        for (const [key, value] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: null,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    // TODO:\n    public renderImportGEXFPreview(): void {}\n\n    /**\n     * change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     * @memberof ImportStore\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = <string>reader.result;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = <any>(\n                        Object.keys(it[0]).map((key) => `${key}`)\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length == 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     * @memberof ImportStore\n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = <string>reader.result;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = <any>(\n                        Object.keys(it[0]).map((key) => `${key}`)\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 2) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.mapping.cluster =\n                            nodeFileConfig.columns[1];\n                        nodeFileConfig.isReady = true;\n                    } else if (nodeFileConfig.columns.length == 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.mapping.cluster =\n                            nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class ProjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    currentSnapshotName = \"Untitled\";\n\n    exportDialogOpen = false;\n    renameSnapshotDialogOpen = false;\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    searchPaneOpen = false;\n\n    searchStr = \"\";\n    candidates = [];\n    numCandidates = 0;\n    panelOpen = true; //test for ui panels\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\n\n/**\n * all the computed values get from the rawGraph\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    /**\n     * @observable\n     * Specify which attribute to be clustered\n     * if this is changed, all get values will be updated\n     *\n     * @memberof ClusterStore\n     */\n    clusterBy = \"None\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     *\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     * @memberof ClusterStore\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const attribute = this.clusterBy;\n        const keyValueMap = new Map<string, string | number>();\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * the possible attribute values of the attribute defined by $clusterBy\n     *\n     * @readonly\n     * @type {((string | number)[])}\n     * @memberof ClusterStore\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     *\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     * @memberof ClusterStore\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     *\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     * @memberof ClusterStore\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.map((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     * @memberof ClusterStore\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.map((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * the configurations to set to cascade the graph\n *\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    config = {\n        nodes: {\n            colorBy: \"pagerank\",\n            color: {\n                scale: \"Linear Scale\",\n                from: \"#448AFF\",\n                to: \"#E91E63\",\n            },\n            sizeBy: \"pagerank\",\n            size: {\n                min: 2,\n                max: 10,\n                scale: \"Linear Scale\",\n            },\n            labelBy: \"node_id\",\n            shape: \"circle\",\n            labelSize: 1,\n            labelLength: 10,\n        },\n        edges: {\n            color: \"#7f7f7f\",\n        },\n    };\n\n    enableDegree = true;\n    enableDensity = true;\n    enableDiameter = false;\n    enableCoefficient = true;\n    enableComponent = true;\n}\n","import { autorun, runInAction, observable, makeObservable } from \"mobx\";\n\nimport PreferencesStore from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport ProjectStore from \"./ProjectStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\n\nclass AppState {\n    constructor() {}\n\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    import!: ImportStore;\n    search!: SearchStore;\n    project!: ProjectStore;\n    cluster!: ClusterStore;\n    css!: CssStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.project = new ProjectStore();\n        this.cluster = new ClusterStore();\n        this.css = new CssStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\nautorun(() => (State.cluster.rawGraph = State.graph.rawGraph));\n\nexport default State;\n","import convert from \"xml-js\";\nimport State from \"../state\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only edges file\";\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    Classes,\n    ButtonGroup,\n    Intent,\n    Position,\n    Tooltip,\n    Popover,\n    Menu,\n    MenuItem,\n    MenuDivider,\n    Divider,\n} from \"@blueprintjs/core\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\n\nimport {\n    GITHUB_URL,\n    SAMPLE_GRAPH_SNAPSHOTS,\n    fetchSampleGraph,\n} from \"../constants\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                        ></img>\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Load Sample\"\n                                        icon=\"graph\"\n                                        onClick={\n                                            (State.import.importSamplesDialogOpen = true)\n                                        }\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from CSV...\"\n                                        onClick={() => {\n                                            State.import.importCSVDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from GEXF...\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.project.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Data Sheet\"\n                                        icon=\"database\"\n                                        onClick={() => {\n                                            // State.graph.frame.pauseLayout();\n                                            State.preferences.dataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <ButtonGroup>\n                        {/* <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider /> */}\n                    </ButtonGroup>\n\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        Clustered by{\"  \"}\n                        <SimpleSelect\n                            items={\n                                State.graph.metadata.nodeProperties.length == 0\n                                    ? [\"None\"]\n                                    : State.graph.metadata.nodeProperties\n                            }\n                            value={State.cluster.clusterBy}\n                            onSelect={(it) => (State.cluster.clusterBy = it)}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            disabled={true}\n                            onClick={() => {\n                                State.preferences.dialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Collapse, Card, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\n\nexport default ({ name, isOpen, onToggle, children }) => (\n    <Card elevation={Elevation.THREE}>\n        <Button\n            className={classnames(\n                Classes.LARGE,\n                Classes.FILL,\n                \"text-align-left\"\n            )}\n            rightIcon={isOpen ? \"chevron-up\" : \"chevron-down\"}\n            onClick={onToggle}\n        >\n            {name}\n        </Button>\n        <Collapse isOpen={isOpen}>{children}</Collapse>\n    </Card>\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Spinner,\n    Switch,\n    Divider,\n    FileInput,\n    Alert,\n    Callout,\n    Tag,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\n\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../../constants/index\";\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportCSVDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                loading: false,\n                available: ONLY_EDGE_FILE,\n                nodesOpen: true,\n                edgesOpen: true,\n                delimiter: \",\",\n            };\n        }\n\n        // determine if this state is importable\n        canImport = () => {\n            if (this.state.available === NODE_AND_EDGE_FILE) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else if (this.state.available === ONLY_EDGE_FILE) {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n            return false;\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            // show blank if node file not relevant\n            if (this.state.available === ONLY_EDGE_FILE) {\n                return null;\n            }\n\n            return (\n                <Collapsable\n                    name=\"Nodes\"\n                    isOpen={this.state.nodesOpen}\n                    onToggle={() =>\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.nodeFileName}\n                                onInputChange={(event) => {\n                                    if (event.target.files.length < 1) {\n                                        return;\n                                    }\n                                    State.import.nodeFileName =\n                                        event.target.files[0].name;\n                                    // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                    State.import.selectedNodeFileFromInput =\n                                        event.target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                value={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                            <br />\n                            Column for Attribute for Cluster:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                value={nodeFile.mapping.cluster}\n                                onSelect={(it) =>\n                                    (nodeFile.mapping.cluster = it)\n                                }\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <Collapsable\n                    name=\"Edges\"\n                    isOpen={this.state.edgesOpen}\n                    onToggle={() =>\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.edgeFileName}\n                                onInputChange={(event) => {\n                                    if (event.target.files.length < 1) {\n                                        return;\n                                    }\n                                    State.import.edgeFileName =\n                                        event.target.files[0].name;\n                                    State.import.selectedEdgeFileFromInput =\n                                        event.target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                value={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />{\" \"}\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                value={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        value={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter == \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter == \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    style={{ minWidth: \"80vw\" }}\n                    icon=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importCSVDialogOpen}\n                    onClose={() => {\n                        State.import.importCSVDialogOpen = false;\n                    }}\n                    title=\"Import CSV\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div>\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"import-dialog\"\n                                )}\n                            >\n                                I have:\n                                <SimpleSelect\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\n                                    value={this.state.available}\n                                    onSelect={(targetValue) => {\n                                        State.import.importConfig.hasNodeFile = !(\n                                            targetValue === ONLY_EDGE_FILE\n                                        );\n                                        this.setState({\n                                            available: targetValue,\n                                        });\n                                    }}\n                                />\n                                <Divider />\n                                {this.renderNodesSelection()}\n                                <br />\n                                {this.renderEdgesSelection()}\n                                <br />\n                                {this.renderDelimiterSelection()}\n                            </div>\n                            <div className={Classes.DIALOG_FOOTER}>\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                    <Button\n                                        className={classnames({\n                                            [Classes.DISABLED]: !this.canImport(),\n                                        })}\n                                        intent={Intent.PRIMARY}\n                                        onClick={() => {\n                                            // requestCreateNewProject({\n                                            //     name: State.project.newProjectName,\n                                            //     createdDate: new Date().toLocaleString(),\n                                            // });\n                                            State.import.isLoading = true;\n                                            State.import\n                                                .importGraphFromCSV()\n                                                .then((res) => {\n                                                    State.graph.rawGraph = State.graph.decorateRawGraph(\n                                                        res.graph\n                                                    );\n                                                    State.graph.metadata =\n                                                        res.metadata;\n\n                                                    // runInAction(\n                                                    //     \"load imported graph\",\n                                                    //     () => {\n                                                    //         appState.graph.rawGraph =\n                                                    //             graph.rawGraph;\n                                                    //         appState.graph.metadata =\n                                                    //             graph.metadata;\n                                                    //         appState.graph.setUpFrame();\n                                                    //     }\n                                                    // );\n                                                    // // Reinitialize global configs\n                                                    // appState.graph.nodes =\n                                                    //     appState.graph.initialGlobalConfig.nodes;\n                                                    // appState.graph.overrides = new Map();\n\n                                                    State.import.isLoading = false;\n                                                    State.import.importCSVDialogOpen = false;\n\n                                                    // // Newly imported graph shouldn't have label showing\n                                                    // appState.graph.frame.turnOffLabelCSSRenderer();\n                                                });\n                                        }}\n                                        text=\"Import\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Spinner,\n    FileInput,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            className={classnames({\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\n                            })}\n                            intent={Intent.PRIMARY}\n                            onClick={() => {\n                                State.import.isLoading = true;\n                                State.import\n                                    .importGraphFromGEXF()\n                                    .then((res) => {\n                                        State.graph.rawGraph = State.graph.decorateRawGraph(\n                                            res.graph\n                                        );\n                                        State.graph.metadata = res.metadata;\n\n                                        State.import.isLoading = false;\n                                        State.import.importGEXFDialogOpen = false;\n                                    });\n                            }}\n                            text=\"Import\"\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Import GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                if (\n                                                    event.target.files.length <\n                                                    1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    event.target.files[0].name;\n                                                State.import.selectedGEXFFileFromInput =\n                                                    event.target.files[0];\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Card,\n    Icon,\n    Dialog,\n    Intent,\n    Spinner,\n    Elevation,\n    Divider,\n    H3,\n    ButtonGroup,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { makeObservable, computed } from \"mobx\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    class ExportDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                ready: true,\n            };\n        }\n\n        computeGEXFFile() {\n            return gexf.write(State.graph.rawGraph);\n        }\n\n        computeNodeFile() {\n            let headers = [];\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n            });\n            headers.push({ label: \"_id\", key: \"_id\" });\n            let exportData = State.graph.rawGraph.export();\n            let data = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.project.exportDialogOpen}\n                    onClose={() => {\n                        State.project.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br></br>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        header={this.computeNodeFile().header}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        header={this.computeEdgeFile().header}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Intent, Switch, Callout } from \"@blueprintjs/core\";\nimport { Column, Table, Cell, EditableCell } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\n\nexport default observer(\n    class GraphTable extends React.Component {\n        state = {\n            sortBy: \"None\",\n            sortOrder: \"Descending\", // or 'Ascending'\n        };\n\n        rawGraph = State.graph.rawGraph;\n\n        get rawTable() {\n            return this.rawGraph.export().nodes;\n        }\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        showRenderer = (rowIndex) => {\n            let node = this.rawTable[rowIndex];\n\n            return (\n                <Cell>\n                    <Switch\n                        checked={node.attributes._options.show}\n                        onChange={() => {\n                            node.attributes._options.show\n                                ? State.graph.hideNode(node.key)\n                                : State.graph.showNode(node.key);\n                            this.forceUpdate();\n                        }}\n                    />\n                </Cell>\n            );\n        };\n\n        renderCell = (rowIndex, columnIndex) => {\n            let attribute = this.nodeProperties[columnIndex - 2];\n            let cellAttributes = this.rawTable[rowIndex].attributes;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                />\n            );\n        };\n\n        setValue = (value, rowIndex, attribute) => {\n            let id = this.rawTable[rowIndex].key;\n            this.rawGraph.setNodeAttribute(id, attribute, value);\n            this.forceUpdate();\n        };\n\n        renderColumns = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it != \"_options\") {\n                    return <Column name={it} cellRenderer={this.renderCell} />;\n                }\n            });\n            return columns.filter((element) => {\n                return element != undefined;\n            });\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n                    <Table className=\"argo-table\" numRows={this.rawGraph.order}>\n                        {/* first column is the Show switch */}\n                        <Column\n                            name=\"Show\"\n                            intent={Intent.SUCCESS}\n                            cellRenderer={this.showRenderer}\n                        />\n                        <Column\n                            name=\"id(Designated)\"\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.rawTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport GraphDataTable from \"./GraphDataTable\";\n\nexport default observer(\n    class DataSheetDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                showMoreBy: \"pagerank\",\n                showMoreNum: 5,\n            };\n        }\n\n        renderTable() {\n            if (State.preferences.dataSheetLoading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return <GraphDataTable />;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={State.preferences.dataSheetDialogOpen}\n                    onOpened={() => {\n                        setTimeout(() => {\n                            State.preferences.dataSheetLoading = false;\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        State.preferences.dataSheetDialogOpen = false;\n                        State.preferences.dataSheetLoading = true;\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.preferences.dataSheetDialogOpen = false;\n                                }}\n                                text=\"Done\"\n                            />\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportCSVDialog from \"./dialogs/ImportCSVDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\nimport ImportSamplesDialog from \"./dialogs/ImportGEXFDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport DataSheetDialog from \"./dialogs/DataSheetDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportCSVDialog />\n                <ImportGEXFDialog />\n                <ImportSamplesDialog />\n                {/*\n                <ProjectDetailDialog />\n                <RenameSnapshotDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog />\\\n                */}\n                <DataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: any;\n\n    multiNodeDetail!: any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nexport default ComponentRef.instance;\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { copy } from \"copy-anything\";\nimport State from \"../../state\";\nimport {\n    ForceGraphMethods,\n    NodeObject,\n    LinkObject,\n} from \"react-force-graph-3d\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport { SceneUtils } from \"three/examples/jsm/utils/SceneUtils.js\";\nimport * as THREE from \"three\";\n\nexport interface CustomNodeObject extends NodeObject {\n    name?: string;\n    val?: number;\n    isClusterNode?: boolean;\n}\n\nexport interface CustomLinkObject extends LinkObject {\n    isClusterLink?: boolean;\n}\n\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    private graphDelegateMethods!: ForceGraphMethods;\n\n    private threeScene!: THREE.Scene;\n\n    get visualizationGraph() {\n        let newGraph = State.graph.decorateRawGraph(\n            this.addInvisibleClusterNode(this.rawGraph)\n        );\n        newGraph.forEachNode((node, attributes) => {\n            if (node.includes(\"_CLUSTER_\")) {\n                attributes._visualize.isClusterNode = true;\n            }\n        });\n        newGraph.forEachEdge((edge, attributes, source, target) => {\n            if (source.includes(\"_CLUSTER_\") || target.includes(\"_CLUSTER_\")) {\n                attributes._visualize.isClusterLink = true;\n            }\n        });\n        let tempGraph = {\n            nodes: [] as CustomNodeObject[],\n            links: [] as LinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = copy(oldGraph);\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach((attribute) => {\n                if (attribute === \"undefined\") return;\n                let clusterID = names[index] + attribute;\n                graphCopy.addNode(clusterID);\n                State.cluster.attributeKeys.get(attribute)?.forEach((value) => {\n                    let visualize: CustomLinkObject = {\n                        isClusterLink: true,\n                    };\n                    graphCopy.addEdge(clusterID, value, {\n                        _visualize: visualize,\n                    });\n                });\n            });\n        }\n\n        return graphCopy;\n    }\n\n    nodeVisibility = (nodeObject: CustomNodeObject) => {\n        return nodeObject.isClusterNode ? false : true;\n    };\n\n    linkVisibility = (nodeObject: CustomLinkObject) => {\n        return nodeObject.isClusterLink ? false : true;\n    };\n\n    get rawGraph(): Graph {\n        return State.graph.rawGraph;\n    }\n\n    lastObject3D!: THREE.Object3D;\n\n    clusterDelegation() {\n        this.threeScene.remove(this.lastObject3D);\n        this.lastObject3D = new THREE.Object3D();\n        this.convexHullObjects.forEach((value, key) => {\n            this.lastObject3D.add(value);\n        });\n        this.threeScene.add(this.lastObject3D);\n    }\n\n    // explicitly called when all node's position have been added to the map\n    get convexHullObjects(): Map<string | number, THREE.Object3D> {\n        let newMap = new Map<string | number, THREE.Object3D>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            if (value.length < 4) {\n                newMap.set(key, new THREE.Object3D());\n            } else {\n                let convexHull = new ConvexGeometry(Array.from(value));\n                newMap.set(key, this.createMesh(convexHull, key));\n            }\n        });\n        return newMap;\n    }\n\n    private createMesh(\n        geom: ConvexGeometry,\n        name: string | number\n    ): THREE.Object3D {\n        // 实例化一个绿色的半透明的材质\n        var meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.2,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        var wireFrameMat = new THREE.MeshBasicMaterial();\n        wireFrameMat.wireframe = true; //把材质渲染成线框\n\n        // 将两种材质都赋给几何体\n        var mesh = SceneUtils.createMultiMaterialObject(geom, [\n            meshMaterial,\n            wireFrameMat,\n        ]);\n\n        return mesh;\n    }\n}\n","import React from \"react\";\nimport {\n    observable,\n    makeObservable,\n    computed,\n    autorun,\n    action,\n    makeAutoObservable,\n} from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport State from \"../../state\";\nimport ComponentRef from \"../ComponentRef\";\nimport GraphDelegate from \"./GraphDelegate\";\n\nexport default observer(\n    class ThreeJSVis extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                graphRef: observable,\n                graphMethods: computed,\n                graphDelegate: observable,\n                nodeHover: action,\n                selectedNodes: observable.ref,\n            });\n        }\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        getNodeId(node: NodeObject): string {\n            let nodeId: string;\n            if (node.id as string) {\n                nodeId = node.id as string;\n            } else {\n                nodeId = (node.id as number).toString();\n            }\n            return nodeId;\n        }\n\n        graphDelegate = new GraphDelegate();\n\n        nodeHover = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (node != null && node != previousNode) {\n                State.graph.currentlyHoveredId = this.getNodeId(\n                    node as NodeObject\n                );\n                console.log(State.graph.currentlyHoveredId);\n                ComponentRef.nodeDetail?.forceUpdate();\n            }\n        };\n\n        selectedNodes: string[] = State.graph.selectedNodes;\n\n        nodeSelect = (node: NodeObject, event: MouseEvent) => {\n            let nodeId = this.getNodeId(node as NodeObject);\n            if (event.ctrlKey || event.shiftKey) {\n                // multi-selection\n                if (this.selectedNodes.includes(nodeId)) {\n                    let index = this.selectedNodes.indexOf(nodeId);\n                    if (index > -1) {\n                        this.selectedNodes.splice(index, 1);\n                    }\n                } else {\n                    this.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single-selection\n                // TODO\n            }\n            console.log(State.graph.selectedNodes);\n            ComponentRef.multiNodeDetail?.forceUpdate();\n            this.graphMethods.refresh(); // update color of selected nodes\n        };\n\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <ForceGraph3D\n                        ref={this.graphRef}\n                        graphData={this.graphDelegate.visualizationGraph}\n                        nodeResolution={20}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        onBackgroundClick={() => {\n                            // this.allAdded = true;\n                            // this.graphRef.current.pauseAnimation();\n                            // this.graphMethods.refresh();\n                            // this.graphDelegate.init();\n                        }}\n                        onBackgroundRightClick={() => {\n                            // this.allAdded = true;\n                            // this.graphRef.current.pauseAnimation();\n                            // this.graphMethods.refresh();\n                            // this.graphDelegate.init();\n                        }}\n                        onEngineTick={() =>\n                            this.graphDelegate.clusterDelegation()\n                        }\n                        nodeColor={(node) =>\n                            this.selectedNodes.includes(this.getNodeId(node))\n                                ? \"yellow\"\n                                : \"grey\"\n                        }\n                        onNodeClick={this.nodeSelect}\n                        onNodeHover={this.nodeHover}\n                    />\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport {\n    Button,\n    Classes,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\n// import { Popover2, Select } from \"@blueprintjs/labs\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport * as THREE from \"three\";\n// import SimpleSelect from \"../utils/SimpleSelect\";\n// import mouse from \"../../graph-frontend/src/select\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                timeOutRef: null,\n                sizeOptionOpen: false,\n                thicknessOptionOpen: false,\n                colorOptionOpen: false,\n            };\n        }\n\n        render() {\n            let graph = State.graph.graph;\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Select Edge Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <Popover\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={Position.RIGHT}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    backgroundColor:\n                                                        State.css.config.edges\n                                                            .color,\n                                                }}\n                                            />\n                                            <div>\n                                                <SketchPicker\n                                                    color={\n                                                        State.css.config.edges\n                                                            .color\n                                                    }\n                                                    onChange={(it) => {\n                                                        // State.graph.process.graph.forEachNode(n => {\n\n                                                        //     let red = new THREE.Color(State.graph.edges.color).r;\n                                                        //     let blue = new THREE.Color(State.graph.edges.color).g;\n                                                        //     let green = new THREE.Color(State.graph.edges.color).b;\n                                                        //     n.renderData.linecolor.r = red;\n                                                        //     n.renderData.linecolor.g = blue;\n                                                        //     n.renderData.linecolor.b = green;\n                                                        // });\n\n                                                        State.css.config.edges.color =\n                                                            it.hex;\n                                                        console.log(it.hex);\n                                                        /**update edge color in real time*/\n                                                        // State.graph.process.onHover();\n                                                    }}\n                                                />\n                                            </div>\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Thickness */}\n                    {/* <Collapsable\n                    name=\"Thickness\"\n                    isOpen={this.state.thicknessOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\n                        })\n                    }\n                    >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p>Select Edge Thickness: </p>\n                            <div style={{display: \"inline\", float: \"right\"}}>\n\n                            </div>\n                        </section>\n                    </div>\n                </Collapsable> */}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <span style={{ display: \"inline-block\" }}>\n                        <Button\n                            style={{ width: \"100px\" }}\n                            id=\"hideAll\"\n                            icon=\"eye-off\"\n                            className={Classes.FILL}\n                            onClick={() => State.graph.frame.hideAllLabels()}\n                        >\n                            Hide All\n                        </Button>\n                        <Button\n                            style={{ width: \"100px\", display: \"none\" }}\n                            id=\"showAll\"\n                            icon=\"eye-on\"\n                            className={Classes.FILL}\n                            onClick={() => State.graph.frame.showAllLabels()}\n                        >\n                            Show All\n                        </Button>\n                        <Button\n                            style={{ width: \"140px\", marginLeft: \"10px\" }}\n                            id=\"hideSelected\"\n                            icon=\"eye-off\"\n                            className={Classes.FILL}\n                            onClick={() =>\n                                State.graph.frame.hideSelectedLabels()\n                            }\n                        >\n                            Hide Selected\n                        </Button>\n                        <Button\n                            style={{\n                                width: \"140px\",\n                                marginLeft: \"10px\",\n                                display: \"none\",\n                            }}\n                            id=\"showSelected\"\n                            icon=\"eye-on\"\n                            className={Classes.FILL}\n                            onClick={() =>\n                                State.graph.frame.showSelectedLabels()\n                            }\n                        >\n                            Show Selected\n                        </Button>\n                    </span>\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label Size</h6>\n                    <Slider\n                        min={0.5}\n                        max={3}\n                        stepSize={0.1}\n                        // onChange={value => {\n                        //   State.graph.nodes.labelSize = value;\n                        // }}\n                        // value={State.graph.nodes.labelSize}\n                        initialValue={2}\n                        value={2}\n                    />\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label Length</h6>\n                    <Slider\n                        min={1}\n                        max={32}\n                        stepSize={0.1}\n                        labelStepSize={5}\n                        // onChange={value => {\n                        //   State.graph.nodes.labelLength = value;\n                        // }}\n                        // value={State.graph.nodes.labelLength}\n                        value={10}\n                    />\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label By</h6>\n                    {/* <Select\n            items={State.graph.allPropertiesKeyList}\n            itemRenderer={CommonItemRenderer}\n            filterable={false}\n            onItemSelect={it => (State.graph.nodes.labelBy = it)}\n          >\n            <Button text={State.graph.nodes.labelBy} />\n          </Select> */}\n                </div>\n            );\n        }\n    }\n);\n// export default LabelsPanel;\n","import React from \"react\";\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\n\nexport default ({ name, isOpen, onToggle, children }) => (\n    <div>\n        <Switch\n            label={name}\n            checked={isOpen}\n            onChange={onToggle}\n            className={Classes.ALIGN_RIGHT}\n        />\n        <Collapse isOpen={isOpen}>{children}</Collapse>\n    </div>\n);\n","import React from \"react\";\nimport { Button, Classes, Slider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class SelectionPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        shapeOptionOpen: false,\n        sizeOptionOpen: false,\n        colorOptionOpen: false,\n        labelOptionOpen: false\n      };\n    }\n\n    // twoLayerUpdate = (nodeId, key, value) => {\n    //   if (!State.graph.overrides.has(nodeId)) {\n    //     State.graph.overrides.set(nodeId, new Map());\n    //   }\n    //   const nodeAttrs = State.graph.overrides.get(nodeId);\n    //   if (value !== null) {\n    //     nodeAttrs.set(key, value);\n    //   } else {\n    //     nodeAttrs.delete(key);\n    //     if (nodeAttrs.size === 0) {\n    //       State.graph.overrides.delete(nodeId);\n    //     }\n    //   }\n    // };\n\n    // batchTwoLayerUpdate = (nodes, key, value) => {\n    //   runInAction(\"update entire selection\", () => {\n    //     nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\n    //   });\n    // };\n\n    render() {\n      return (\n        <div>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Size\"\n            isOpen={this.state.sizeOptionOpen}\n            onToggle={() => {\n              if (this.state.sizeOptionOpen) {\n                this.setState(\n                  {\n                    sizeOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"size\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    sizeOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"size\",\n                  //     State.graph.overrideConfig.size\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <Slider\n                min={1}\n                max={20}\n                stepSize={0.1}\n                labelStepSize={5}\n                // onChange={it => {\n                //   State.graph.overrideConfig.size = it;\n                //   this.batchTwoLayerUpdate(\n                //     State.graph.selectedNodes,\n                //     \"size\",\n                //     it\n                //   );\n                // }}\n                // value={State.graph.overrideConfig.size}\n                value={2}//set for test\n              />\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Color\"\n            isOpen={this.state.colorOptionOpen}\n            onToggle={() => {\n              if (this.state.colorOptionOpen) {\n                this.setState(\n                  {\n                    colorOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"color\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    colorOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"color\",\n                  //     State.graph.overrideConfig.color\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <section> <p style={{ textAlign: \"left\" }}>\n                Choose Color:\n            <span style={{ float: \"right\" }}>\n                  <Popover\n                    //previous!!\n                    // placement=\"bottom\"\n                    // modifiers={{\n                    //   preventOverflow: {\n                    //     enabled: false,\n                    //   },\n                    // }}\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    position={Position.RIGHT}\n\n                  >\n                    <Button\n                      text=\"  \"\n                      style={{\n                        backgroundImage: \"inherit\",\n                        // backgroundColor: State.graph.overrideConfig.color\n                      }}\n                    />\n                    <SketchPicker\n                    // color={State.graph.overrideConfig.color}\n                    // onChange={it => {\n                    //   State.graph.overrideConfig.color = it.hex;\n                    //   this.batchTwoLayerUpdate(\n                    //     State.graph.selectedNodes,\n                    //     \"color\",\n                    //     it.hex\n                    //   );\n                    // }}\n                    />\n                  </Popover>\n                </span>\n              </p>\n              </section>\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Label\"\n            isOpen={this.state.labelOptionOpen}\n            onToggle={() => {\n              if (this.state.labelOptionOpen) {\n                this.setState(\n                  {\n                    labelOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"label\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    labelOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"label\",\n                  //     State.graph.overrideConfig.label\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              Custom Label:\n            <input\n                value={\"test\"}//used for test\n              // value={State.graph.overrideConfig.label}\n              // onChange={it => {\n              //   State.graph.overrideConfig.label = it.target.value;\n              //   this.batchTwoLayerUpdate(\n              //     State.graph.selectedNodes,\n              //     \"label\",\n              //     it.target.value\n              //   );\n              // }}\n              />\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Shape\"\n            isOpen={this.state.shapeOptionOpen}\n            onToggle={() => {\n              if (this.state.shapeOptionOpen) {\n                this.setState(\n                  {\n                    shapeOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"shape\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    shapeOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"shape\",\n                  //     State.graph.overrideConfig.shape\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <section> <p style={{ textAlign: \"left\" }}>\n                Node Shape:\n            <span style={{ float: \"right\" }}>\n                  <Select\n                    items={[\n                      \"shape1\",\n                      \"shape2\",\n                      \"shape3\",\n                      \"shape4\",\n                      \"shape5\"\n                    ]}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={it => {\n                      console.log(it)//used for test\n                      // State.graph.overrideConfig.shape = it;\n                      // this.batchTwoLayerUpdate(\n                      //   State.graph.selectedNodes,\n                      //   \"shape\",\n                      //   it\n                      // );\n                    }\n                    }\n                  >\n                    {/* <Button text={State.graph.overrideConfig.shape} /> */}\n                    <Button text={\"change\"} />\n                    {/* upper is used for test */}\n                  </Select>\n                </span>\n              </p>\n              </section>\n            </div>\n          </SwitchCollapsable>\n        </div>\n      );\n    }\n  }\n);\n// export default SelectionPanel;","import React from \"react\";\nimport { Button, Classes, RangeSlider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\n// import { scales } from \"../../constants/index\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class GlobalPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        timeOutRef: null,\n        sizeOptionOpen: false,\n        colorOptionOpen: false,\n        shapeOptionOpen: false\n      };\n    }\n\n    render() {\n      return (\n        <div>\n          {/* Collapsable Option: Color */}\n          <Collapsable\n            name=\"Color\"\n            isOpen={this.state.colorOptionOpen}\n            onToggle={() =>\n              this.setState({\n                colorOptionOpen: !this.state.colorOptionOpen\n              })\n            }\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* color : color by */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Color By:\n                <span style={{ float: \"right\" }}>\n                    <SimpleSelect\n                      items={[\"item1\", \"item2\"]\n                        // State.graph.allPropertiesKeyList\n                      }\n                      onSelect={it => (\n                        console.log(\"color:color by\")\n                        // State.graph.nodes.colorBy = it\n                      )\n                      }\n                      value={\"1\"//for test\n                        // State.graph.nodes.colorBy\n                      }\n                    />\n                  </span>\n                </p>\n              </section>\n\n              {/* color:scale type  */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale Type:\n                <span style={{ float: \"right\" }}>\n                    <SimpleSelect\n                      items={[\"item1\", \"item2\"]\n                        // Object.keys(scales)\n                      }\n                      onSelect={it => (console.log(\"color:scale type\")\n                        // State.graph.nodes.color.scale = it\n                      )\n                      }\n                      value={\"2\"\n                        // State.graph.nodes.color.scale\n                      }\n                    />\n                  </span>\n                </p>\n              </section>\n\n              {/* the gradient section in color */}\n              <section >\n                <p style={{ textAlign: \"left\" }}>Gradient: &nbsp;\n                <span style={{ float: \"right\" }}>\n                    {/* left colorpicker */}\n                    <Popover\n                      // placement=\"bottom\"\n                      // modifiers={{\n                      //   preventOverflow: {\n                      //     enabled: false,\n                      //   },\n                      // }}\n                      interactionKind={PopoverInteractionKind.CLICK}\n                      popoverClassName=\"bp3-popover-content-sizing\"\n                      position={\"auto\"}\n                    >\n                      <Button\n                        text=\"  \"\n                      // style={{\n                      //   // backgroundImage: \"inherit\",\n                      //   // backgroundColor: State.graph.nodes.color.from\n                      // }}\n                      />\n                      <SketchPicker\n                        color={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.from\n                        }\n                        onChange={\n                          console.log(\"gradient section first colorpicker onchange\")\n                          // it => (State.graph.nodes.color.from = it.hex)\n                        }\n                      />\n                    </Popover>\n                    {/* arrow  */}\n                    &nbsp; &#8594; &nbsp;\n                    {/* right colorpicker */}\n                    <Popover\n                      //previous!!\n                      // placement=\"bottom\"\n                      // modifiers={{\n                      //   preventOverflow: {\n                      //     enabled: false,\n                      //   },\n                      // }}\n                      interactionKind={PopoverInteractionKind.CLICK}\n                      popoverClassName=\"bp3-popover-content-sizing\"\n                      position={\"auto\"}\n                    >\n                      <Button\n                        text=\"  \"\n                        style={{\n                          backgroundImage: \"inherit\",\n                          // backgroundColor: State.graph.nodes.color.to\n                        }}\n                      />\n                      <SketchPicker\n                        color={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.to\n                        }\n                        onChange={\n                          console.log(\"gradient section second colorpicker onchange\")\n                          // it => (State.graph.nodes.color.to = it.hex)\n                        }\n                      />\n                    </Popover>\n                  </span>\n                </p>\n              </section>\n              {/* color : gradient preview */}\n              <section style={{ marginTop: \"-1em\" }}>\n                <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\n                  <defs>\n                    <linearGradient\n                      x1=\"0%\"\n                      y1=\"50%\"\n                      x2=\"100%\"\n                      y2=\"50%\"\n                      id=\"theGradient\"\n                    >\n                      <stop\n                        stopColor={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.from\n                        }\n                        stopOpacity=\"1\"\n                        offset=\"0%\"\n                      />\n                      <stop\n                        stopColor={\n                          \"#ffffff\"//used for test\n                          // State.graph.nodes.color.to\n                        }\n                        stopOpacity=\"1\"\n                        offset=\"100%\"\n                      />\n                    </linearGradient>\n                  </defs>\n                  <rect\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"100%\"\n                    height=\"50\"\n                    fill=\"url(#theGradient)\"\n                  />\n                </svg>\n              </section>\n            </div>\n          </Collapsable>\n\n          {/* Collapsable Option: Size */}\n          <Collapsable\n            name=\"Size\"\n            isOpen={this.state.sizeOptionOpen}\n            onToggle={() =>\n              this.setState({\n                sizeOptionOpen: !this.state.sizeOptionOpen\n              })\n            }\n          >\n\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* size : scale by  */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale By:\n                <span style={{ float: \"right\" }}>\n                    <Select\n                      items={[\"item1\", \"item2\"]}\n                      itemRenderer={CommonItemRenderer}\n                      filterable={false}\n                      onItemSelect={\n                        console.log(\"size : scale by , component :select\")\n                        // it => (State.graph.nodes.sizeBy = it)\n                      }\n                    >\n                      <Button text={\"btn1\"\n                        // State.graph.nodes.sizeBy\n                      } />\n                    </Select>\n                  </span>\n                </p>\n              </section>\n              {/* size : scale type */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale Type:\n                <span style={{ float: \"right\" }}>\n                    <Select\n                      items={[\"item1\", \"item2\"]\n                        //Object.keys(scales)\n                      }\n                      itemRenderer={CommonItemRenderer}\n                      filterable={false}\n                      onItemSelect={\n                        console.log(\"size : scale type component: select\")\n                        // it => (State.graph.nodes.size.scale = it)\n                      }\n                    >\n                      <Button text={\"btn2\"\n                        // State.graph.nodes.size.scale\n                      } />\n                    </Select>\n                  </span>\n                </p>\n              </section>\n\n            Size Range:\n            <br />\n              <RangeSlider\n                min={1}\n                max={20}\n                stepSize={0.1}\n                labelStepSize={5}\n              // onChange={([a, b]) => {\n              //   runInAction(\"update scale\", () => {\n              //     State.graph.nodes.size.min = a;\n              //     State.graph.nodes.size.max = b;\n              //   });\n              // }}\n              // value={[\n              //   State.graph.nodes.size.min,\n              //   State.graph.nodes.size.max\n              // ]}\n              />\n            </div>\n          </Collapsable>\n\n          {/* Collapsable Option: Shape */}\n          <Collapsable\n            name=\"Shape\"\n            isOpen={this.state.shapeOptionOpen}\n            onToggle={() =>\n              this.setState({\n                shapeOptionOpen: !this.state.shapeOptionOpen\n              })\n            }\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* shape : node shape */}\n              <section> <p style={{ textAlign: \"left\" }}> Node Shape:\n              <span style={{ float: \"right\" }}>\n                  <Select\n                    items={[\n                      \"circle\",\n                      \"square\",\n                      \"triangle\",\n                      \"pentagon\",\n                      \"hexagon\",\n                      \"octagon\"\n                    ]}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={\n                      console.log(\" shape : node shape component: select\")\n                      // it => (State.graph.nodes.shape = it)\n                    }\n                  >\n                    <Button text={\"btn3\"\n                      // State.graph.nodes.shape\n                    } />\n                  </Select>\n                </span>\n              </p></section>\n            </div>\n          </Collapsable>\n          <br />\n          <small>\n\n            {/* {pluralize(\"node\", State.graph.overrides.size, true)}<span> </span> */}\n            {pluralize(\"node\", 0, true)}<span> </span>\n          have override styles.  &nbsp;\n          <Button className={\"pt-small\"} text=\"Clear\"\n            // onClick={() => (State.graph.overrides = new Map())} \n            />\n          </small>\n        </div>\n      );\n    }\n  }\n);\n// export default GlobalPanel;","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\nimport GlobalPanel from \"./GlobalPanel\";\nimport SelectionPanel from \"./SelectionPanel\";\n\nexport default observer(\n  class NodesPanel extends React.Component {\n    getRenderedNodes = () => {\n      if (State.graph.selectedNodes.length === 0) {\n        return (\n          <div>\n            <p>Modifying All Nodes</p>\n          </div>\n        );\n      }\n      return (\n        <p>{`Modifying ${pluralize(\n          \"Node\",\n          State.graph.selectedNodes.length,\n          true\n        )}`}</p>\n      );\n    };\n\n    render() {\n      return (\n        <div>\n          {this.getRenderedNodes()}\n          {State.graph.selectedNodes.length === 0 ? (\n            <GlobalPanel />\n          ) : (\n              <SelectionPanel />\n            )}\n        </div>\n      );\n    }\n  }\n);\n// export default NodesPanel;","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\nexport default observer(\n    class NodeDetail extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                State.graph.currentlyHoveredId,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            return <Cell>{data}</Cell>;\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"node-details-table\"\n                        )}\n                    >\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            const formatLongFloat = (nodeAttributeValue: any) => {\n                const num = Number(nodeAttributeValue);\n                if (Number.isNaN(num) || num > 1 || num < 0) {\n                    // Do not format just return original\n                    return nodeAttributeValue;\n                }\n                // Format to no more than 3 significant digit.\n                return Number.parseFloat(num.toString()).toPrecision(3);\n            };\n\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"nodes-details-table\"\n                        )}\n                    >\n                        <Table numRows={State.graph.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.graph.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { Classes, Tab, Tabs, Button } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\n// import { addNode } from \"../ipc/client\";\nimport NodesPanel from \"./panels/NodesPanel\";\nimport EdgesPanel from \"./panels/EdgesPanel\";\nimport LabelsPanel from \"./panels/LabelsPanel\";\nimport NodeDetail from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\n// import Legends from \"./Legends\";\n// // import StatusBar from './StatusBar';\n// import SelectionActionPanel from \"./panels/SelectionActionPanel\";\n\n// TODO: migrate to simple select\n\nlet RenderOptionsCard = observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <h2>Graph Options</h2>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n//\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.isRenderOptionsCardHidden = !State.preferences\n                .isRenderOptionsCardHidden;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"left-overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.isRenderOptionsCardHidden\n                                    ? this.optionsInvisible\n                                    : this.optionsVisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            ></Button>\n                            <br />\n                            <RenderOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.isRenderOptionsCardHidden\n                                        ? this.sideButtonVis\n                                        : this.sideButtonInv\n                                }\n                            ></Button>\n                        </div>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.graph.currentlyHoveredId != \"undefined\" &&\n                        State.graph.selectedNodes.length == 0 && <NodeDetail />}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.graph.selectedNodes.length != 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    {/* <Legends />\n          <StatusBar /> */}\n                    {/* {// This menu only shows when there are nodes selected\n            State.graph.selectedNodes.length > 0 && !State.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\n          } */}\n                </div>\n            );\n        }\n    }\n);\n\n// export default FloatingCards;\n","import React from \"react\";\nimport { Provider } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    Classes,\n    FocusStyleManager,\n    NonIdealState,\n} from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\nimport State from \"./state\";\nimport EdgesPanel from \"./components/panels/EdgesPanel\";\nimport LabelsPanel from \"./components/panels/LabelsPanel\";\nimport SelectionPanel from \"./components/panels/SelectionPanel\";\nimport GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}