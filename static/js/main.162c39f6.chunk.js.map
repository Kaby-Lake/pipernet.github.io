{"version":3,"sources":["components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","images/logo.png","state/PreferencesStore.ts","state/GraphStore.ts","state/ImportStore.ts","state/ProjectStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","state/GraphDelegate.ts","state/index.ts","components/Navbar.tsx","components/utils/Collapsable.jsx","constants/index.ts","components/dialogs/ImportCSVDialog.jsx","components/dialogs/ImportGEXFDialog.jsx","components/dialogs/ExportDialog.tsx","components/utils/DataSheetDialogWrapper.tsx","components/utils/InputFormUtils.ts","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/utils/NodeAdder.tsx","components/dialogs/AddNodeDialog.tsx","components/Dialogs.jsx","components/visualize/visualizer.tsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/GlobalPanel.jsx","components/panels/NodesPanel.jsx","components/ComponentRef.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/SearchPanel.tsx","components/panels/RightClickNodePanel.tsx","components/panels/RightClickBackgroundPanel.tsx","components/panels/DeleteEdgeInteractionPanel.tsx","components/FloatingCards.tsx","App.js","reportWebVitals.js","index.js"],"names":["item","handleClick","isActive","className","Classes","ACTIVE","onClick","text","items","onSelect","value","fill","itemRenderer","CommonItemRenderer","filterable","onItemSelect","FILL","PreferencesStore","rightClickBackgroundPanelOpen","rightClickNodePanelOpen","rightClickPositionX","rightClickPositionY","deleteEdgePanelOpen","preferenceDialogOpen","darkMode","statisticsDialogOpen","helpDialogOpen","neighborDialogOpen","AddNodeDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","isRenderOptionsCardHidden","view","makeAutoObservable","this","GraphStore","rawGraph","Graph","allowSelfLoops","multi","type","selectedNodes","selectedNode","currentlyHoveredId","metadata","snapshotName","String","nodeProperties","node","attributes","visualize","id","val","isClusterNode","_visualize","source","target","isClusterLink","_rawGraph","forEachNode","decorateRawNode","forEachEdge","edge","decorateRawEdge","order","size","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importSamplesDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","position","Position","TOP","show","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","graph","readNodeCSV","forEach","nodeId","toString","addNode","readEdgeCSV","hasNode","addEdge","Object","keys","readGEXF","entries","getNodeAttributes","nodes","key","push","clusterProperties","edgeProperties","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","length","join","console","log","it","onerror","error","action","window","location","reload","nodeFileConfig","ProjectStore","currentSnapshotName","exportDialogOpen","renameSnapshotDialogOpen","SearchStore","isPreviewing","searchStr","observable","ref","list","searchStrIgnoreCase","toLocaleLowerCase","match","searchId","includes","searchQuery","searchAttr","searchValue","hasOwnProperty","ClusterStore","clusterBy","attribute","keyValueMap","Map","set","Array","from","Set","keyAttribute","values","attributeKeysMap","getAttributeValues","get","colors","randomcolor","seed","count","THREE","x","y","z","CssStore","colorBy","color","scale","to","sizeBy","min","max","labelBy","shape","labelSize","labelLength","edges","enableDegree","enableDensity","enableDiameter","enableCoefficient","enableComponent","GraphDelegate","graphDelegateMethods","threeScene","nodeVisibility","nodeObject","linkVisibility","lastObject3D","highlightLink","_graphDelegateMethods","scene","newGraph","State","cluster","decorateRawGraph","addInvisibleClusterNode","tempGraph","links","oldGraph","graphCopy","copy","names","index","clusterID","attributeKeys","remove","convexHullObjects","add","newMap","attributePoints","convexHull","ConvexGeometry","createMesh","geom","name","meshMaterial","attributeColor","transparent","opacity","side","wireFrameMat","wireframe","SceneUtils","createMultiMaterialObject","distance","getNodeAttribute","distRatio","Math","hypot","cameraPosition","link","_if","_else","_default","graphDelegate","sourceId","targetId","AppState","preferences","import","search","project","css","_instance","instance","privateConstructor","_state","autorun","renderImportEdgePreview","renderImportNodePreview","observer","classnames","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","NAVBAR_HEADING","icon","BOTTOM","BUTTON","MINIMAL","ALIGN_RIGHT","SimpleSelect","NAVBAR_DIVIDER","disabled","open","React","Component","isOpen","onToggle","children","elevation","Elevation","LARGE","rightIcon","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","PreviewTable","props","renderWrapper","numRows","selectedRegions","indexOf","rows","cols","cellRenderer","i","canImport","state","available","renderNodesSelection","Collapsable","nodesOpen","setState","CONTROL_GROUP","INPUT_GROUP","onInputChange","event","files","label","checked","onChange","renderEdgesSelection","edgesOpen","loading","newDelimiter","style","minWidth","DARK","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","importGraphFromCSV","then","res","fileIsSelect","importGraphFromGEXF","renderImportButton","ready","write","headers","exportData","export","data","_id","interactive","ONE","minimal","computeGEXFFile","filename","computeNodeFile","separator","computeEdgeFile","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","setTimeout","renderTable","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","renderColumns","rowIndex","columnIndex","renderCell","filter","element","cell","filteredTable","newVal","setValue","onConfirm","tooltip","setNodeAttribute","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","dropNode","textAlign","newTable","forceUpdate","asyncControl","leftIcon","placeholder","defaultRowHeight","SUCCESS","select","labelFor","labelInfo","itemPredicate","query","noResults","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","dropEdge","addEdgeDialog","onClosed","hasEdge","renderMode","RenderMode","NONE","newNodeId","canImportTag","renderAttributesForm","newValue","componentDidMount","prop","autoFocus","rightElement","onAdded","Dialogs","display","graphRef","createRef","nodeHover","previousNode","getNodeId","nodeSelect","ctrlKey","shiftKey","splice","graphMethods","refresh","nodeRightClick","backgroundRightClick","renderGraph","graphData","visualizationGraph","nodeResolution","onNodeDragEnd","fx","fy","fz","onBackgroundRightClick","linkWidth","ifHighlightLink","linkColor","linkDirectionalParticles","linkDirectionalParticleWidth","onEngineTick","clusterDelegation","nodeColor","onNodeClick","onNodeRightClick","onBackgroundClick","onNodeHover","current","mountDelegateMethods","timeOutRef","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","CARD","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","RIGHT","backgroundImage","backgroundColor","hex","frame","hideAllLabels","showAllLabels","marginLeft","hideSelectedLabels","showSelectedLabels","stepSize","initialValue","labelStepSize","shapeOptionOpen","labelOptionOpen","SwitchCollapsable","marginTop","x1","y1","x2","y2","stopColor","stopOpacity","offset","pluralize","getRenderedNodes","ComponentRef","nodeDetail","multiNodeDetail","reaction","cellRenderer_property","cellRenderer_value","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","enableRowHeader","renderSearchResults","candidates","onMouseOver","cameraFocusOn","large","onMouseLeave","makeObservable","stylePosition","computed","top","left","ELEVATION_1","targetNode","neighbors","edgeKey","onNode","neighborsRenderer","forEachNeighbor","neighbor","RenderOptionsCard","animate","panel","Expander","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","ELEVATION_2","paddingTop","paddingRight","paddingBottom","MultiDetailPanel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.162c39f6.chunk.js","sourcesContent":["import React from \"react\";\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\n\nexport default (item, { handleClick, isActive }) => (\n    <MenuItem\n        className={isActive ? Classes.ACTIVE : \"\"}\n        key={item}\n        onClick={handleClick}\n        text={item}\n    />\n);\n","import React from \"react\";\nimport { Button, Classes } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/labs\";\nimport CommonItemRenderer from \"./CommonItemRenderer\";\n\nexport default ({ items, onSelect, value, fill = false }) => (\n    <Select\n        items={items}\n        itemRenderer={CommonItemRenderer}\n        filterable={false}\n        onItemSelect={onSelect}\n    >\n        <Button className={fill ? Classes.FILL : null} text={value} />\n    </Select>\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import { makeAutoObservable } from \"mobx\";\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    rightClickBackgroundPanelOpen = false;\n    rightClickNodePanelOpen = false;\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    deleteEdgePanelOpen = false;\n\n    preferenceDialogOpen = false;\n\n    darkMode = true;\n\n    statisticsDialogOpen = false;\n    helpDialogOpen = false;\n    neighborDialogOpen = false;\n    AddNodeDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    isRenderOptionsCardHidden = true;\n\n    view = \"3D\";\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { CustomNodeObject, CustomLinkObject } from \"./GraphDelegate\";\nimport { Attributes } from \"graphology-types\";\n\n/**\n * the class to store a raw graph as well as the related information\n \n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     *\n     * @see graphology\n     *\n     * @type {Graph}\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * should be called when individual nodes are added to the graph.\n\n     * add the CustomNodeObject to node attributes stored in the data structure\n     * @see CustomNodeObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} node\n     * @param {Attributes} attributes\n     */\n    decorateRawNode(node: string, attributes: Attributes) {\n        let visualize: CustomNodeObject = {\n            id: node,\n            val: 1, // to be changed, to represent the size of the node\n            isClusterNode: false, // if is clusterNode, then the front-end will ignore this node\n        };\n        attributes._visualize = visualize;\n    }\n\n    /**\n     * should be called when individual edges are added to the graph.\n     *\n     * add the CustomLinkObject to node attributes stored in the data structure\n     * @see CustomLinkObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} source\n     * @param {string} target\n     * @param {Attributes} attributes\n     */\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        let visualize: CustomLinkObject = {\n            source: source,\n            target: target,\n            isClusterLink: false, // if is clusterLink, then the front-end will ignore this link\n        };\n        attributes._visualize = visualize;\n    }\n\n    /**\n     * should be called on every graph import\n     * add the the _visualize to every links inside the specified graph\n     *\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    /**\n     * the currently selected node ids\n     * the singleNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string[]}\n     */\n    selectedNodes: string[] = [];\n\n    /**\n     * the currently selected node id\n     *\n     * @type {string}\n     */\n    selectedNode: string = \"\";\n\n    /**\n     * the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string}\n     */\n    currentlyHoveredId: string = \"undefined\";\n\n    /**\n     * if currently there is a graph in the dataset\n     *\n     * @readonly\n     */\n    get hasGraph() {\n        return this.rawGraph.order && this.rawGraph.size != 0;\n    }\n\n    /**\n     * the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     *\n     */\n    metadata = {\n        snapshotName: String,\n\n        // attributes of nodes in imported graph\n        nodeProperties: [] as string[],\n    };\n}\n","import { Toaster, Position, Intent } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importCSVDialogOpen = false;\n    importSamplesDialogOpen = false;\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n            },\n            delimiter: \",\",\n        },\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        },\n    };\n\n    /**\n     * read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     *\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @return {*}  {Promise<Object[]>}\n     * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n     * @memberof ImportStore\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     *\n     * @private\n     * @return {*}  {Promise<Graph>}\n     * @memberof ImportStore\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, <string>reader.result));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     *\n     * @return {*}\n     * @memberof ImportStore\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: true,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            tempNodes = await this.readNodeCSV();\n            tempNodes.forEach((node) => {\n                let nodeId = node[config.nodeFile.mapping.id].toString();\n                delete node[config.nodeFile.mapping.id];\n                graph.addNode(nodeId, node);\n            });\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, { id: fromId });\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, { id: toId });\n            }\n            graph.addEdge(fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            },\n        };\n    }\n\n    //TODO:import 里的id和cluster， source target还没设置\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n\n        for (const [key, value] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: null,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    // TODO:\n    public renderImportGEXFPreview(): void {}\n\n    /**\n     * change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     * @memberof ImportStore\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = <string>reader.result;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = <any>(\n                        Object.keys(it[0]).map((key) => `${key}`)\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length == 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     * @memberof ImportStore\n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = <string>reader.result;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = <any>(\n                        Object.keys(it[0]).map((key) => `${key}`)\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class ProjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    currentSnapshotName = \"Untitled\";\n\n    exportDialogOpen = false;\n    renameSnapshotDialogOpen = false;\n}\n","import Graph from \"graphology\";\nimport { makeAutoObservable, observable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n\n    // if is previewing, ignore all mouse hovers detected by NodeDetailPanel because it is showing the detail of selected node\n    isPreviewing = false;\n\n    // can use defined regex\n    // id:123\n    // attr:color:red\n    searchStr = \"\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    // contains node ids\n    get candidates(): string[] {\n        let list: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (searchStrIgnoreCase.match(/^id:.+/g)) {\n            const searchId = searchStrIgnoreCase.split(/^id:/g)[1].trim();\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchId)) {\n                    list.push(node);\n                }\n            });\n        } else if (searchStrIgnoreCase.match(/^attr:.+:.+/g)) {\n            let searchQuery = searchStrIgnoreCase\n                .split(/^attr:/g)[1]\n                .trim()\n                .split(/:/g);\n            const searchAttr = searchQuery[0].trim();\n            const searchValue = searchQuery[1].trim();\n            this.rawGraph.forEachNode((node, attributes) => {\n                if (\n                    attributes.hasOwnProperty(searchAttr) &&\n                    (attributes[searchAttr] as string)\n                        .toLocaleLowerCase()\n                        .includes(searchValue)\n                ) {\n                    list.push(node);\n                }\n            });\n        } else if (this.searchStr == \"\") {\n        } else {\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(this.searchStr)) {\n                    list.push(node);\n                }\n            });\n        }\n\n        return list;\n    }\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\n\n/**\n * all the computed values get from the rawGraph\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    /**\n     * @observable\n     * Specify which attribute to be clustered\n     * if this is changed, all get values will be updated\n     *\n     * @memberof ClusterStore\n     */\n    clusterBy = \"None\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     *\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     * @memberof ClusterStore\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const attribute = this.clusterBy;\n        const keyValueMap = new Map<string, string | number>();\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * the possible attribute values of the attribute defined by $clusterBy\n     *\n     * @readonly\n     * @type {((string | number)[])}\n     * @memberof ClusterStore\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     *\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     * @memberof ClusterStore\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     *\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     * @memberof ClusterStore\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.map((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     * @memberof ClusterStore\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.map((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * the configurations to set to cascade the graph\n *\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    config = {\n        nodes: {\n            colorBy: \"pagerank\",\n            color: {\n                scale: \"Linear Scale\",\n                from: \"#448AFF\",\n                to: \"#E91E63\",\n            },\n            sizeBy: \"pagerank\",\n            size: {\n                min: 2,\n                max: 10,\n                scale: \"Linear Scale\",\n            },\n            labelBy: \"node_id\",\n            shape: \"circle\",\n            labelSize: 1,\n            labelLength: 10,\n        },\n        edges: {\n            color: \"#7f7f7f\",\n        },\n    };\n\n    enableDegree = true;\n    enableDensity = true;\n    enableDiameter = false;\n    enableCoefficient = true;\n    enableComponent = true;\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    NodeObject,\n    LinkObject,\n} from \"react-force-graph-3d\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport { SceneUtils } from \"three/examples/jsm/utils/SceneUtils.js\";\nimport * as THREE from \"three\";\nimport { copy } from \"copy-anything\";\n\nexport interface CustomNodeObject extends NodeObject {\n    val?: number;\n    isClusterNode?: boolean;\n}\n\nexport interface CustomLinkObject extends LinkObject {\n    isClusterLink?: boolean;\n}\n\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * assign the force-graph methods to this class\n     * should be called as long as the visualizer react component is mounted\n     *\n     * @param {ForceGraphMethods} _graphDelegateMethods\n     * @memberof GraphDelegate\n     */\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    /**\n     * the ForceGraphMethods exposed by the visualization force-graph\n     *\n     * @see ForceGraphMethods\n     *\n     * @type {ForceGraphMethods}\n     * @memberof GraphDelegate\n     */\n    graphDelegateMethods!: ForceGraphMethods;\n\n    /**\n     * the THREE.js WebGL Scene of the visualization\n     *\n     * @type {THREE.Scene}\n     * @memberof GraphDelegate\n     */\n    threeScene!: THREE.Scene;\n\n    /**\n     * compute the delegate graph that will be used by the ForceGraph3D\n     * will add invisible cluster nodes and edges to balance the clustered graph and adjust force\n     * the NodeObject and LinkObject inside attributes (named _visualize) will be used.\n     *\n     * nodes and edges with the show=false will be ignored in this case\n     *\n     * @readonly\n     * @memberof GraphDelegate\n     */\n    get visualizationGraph() {\n        let newGraph: Graph;\n        if (State.cluster.clusterBy === \"None\") {\n            newGraph = State.graph.rawGraph;\n        } else {\n            newGraph = State.graph.decorateRawGraph(\n                this.addInvisibleClusterNode(State.graph.rawGraph)\n            );\n        }\n        let tempGraph = {\n            nodes: [] as CustomNodeObject[],\n            links: [] as LinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    /**\n     * return a new graph that contains the invisible clusters, formed as nodes\n     * as well as the edges that connected to the cluster node to simulate the force within the same cluster\n     * the new graph is a deep copy of the old node, so no worries of the original graph DS\n     *\n     * @private\n     * @param {Graph} oldGraph\n     * @returns {*}  {Graph}\n     */\n    private addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = copy(oldGraph);\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach(\n                (attribute: string | number) => {\n                    // if a node does not belong to any cluster, a undefined will be formed with no cluster to generate\n                    if (attribute === \"undefined\") return;\n\n                    let clusterID = names[index] + attribute;\n                    let visualize: CustomNodeObject = {\n                        isClusterNode: true,\n                    };\n                    graphCopy.addNode(clusterID, { _visualize: visualize });\n\n                    // add edges to simulate the force of the same cluster\n                    State.cluster.attributeKeys\n                        .get(attribute)\n                        ?.forEach((target) => {\n                            let visualize: CustomLinkObject = {\n                                isClusterLink: true,\n                            };\n                            graphCopy.addEdge(clusterID, target, {\n                                _visualize: visualize,\n                            });\n                        });\n                }\n            );\n        }\n\n        return graphCopy;\n    }\n\n    /**\n     * determine whether this Node is the cluster delegate node\n     *\n     * @param {CustomNodeObject} nodeObject\n     */\n    nodeVisibility = (nodeObject: CustomNodeObject) => {\n        return nodeObject.isClusterNode ? false : true;\n    };\n\n    /**\n     * determine whether this edge is the cluster delegate edge\n     *\n     * @param {CustomLinkObject} nodeObject\n     */\n    linkVisibility = (nodeObject: CustomLinkObject) => {\n        return nodeObject.isClusterLink ? false : true;\n    };\n\n    /**\n     * all the clusters will form a 3D object to be imported into Scene\n     * and this indicates the formed 3d object in the last refresh\n     *\n     * @type {THREE.Object3D}\n     */\n    lastObject3D!: THREE.Object3D;\n\n    /**\n     * add the computed clusters 3d object to the Scene\n     * always keep the Scene with only 1 cluster object by first deleting the last one then add\n     *\n     */\n    clusterDelegation() {\n        if (State.cluster.clusterBy === \"None\") {\n            return;\n        }\n        this.threeScene.remove(this.lastObject3D);\n        this.lastObject3D = new THREE.Object3D();\n        this.convexHullObjects.forEach((value, key) => {\n            this.lastObject3D.add(value);\n        });\n        this.threeScene.add(this.lastObject3D);\n    }\n\n    /**\n     * the map between the value of the cluster and the 3d object that this cluster created\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Object3D>)}\n     */\n    get convexHullObjects(): Map<string | number, THREE.Object3D> {\n        let newMap = new Map<string | number, THREE.Object3D>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            if (value.length < 4) {\n                newMap.set(key, new THREE.Object3D());\n            } else {\n                let convexHull = new ConvexGeometry(Array.from(value));\n                newMap.set(key, this.createMesh(convexHull, key));\n            }\n        });\n        return newMap;\n    }\n\n    private createMesh(\n        geom: ConvexGeometry,\n        name: string | number\n    ): THREE.Object3D {\n        // 实例化一个绿色的半透明的材质\n        var meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.2,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        var wireFrameMat = new THREE.MeshBasicMaterial();\n        wireFrameMat.wireframe = true; //把材质渲染成线框\n\n        // 将两种材质都赋给几何体\n        var mesh = SceneUtils.createMultiMaterialObject(geom, [\n            meshMaterial,\n            wireFrameMat,\n        ]);\n\n        return mesh;\n    }\n\n    ////\n\n    /**\n     * this will re-position the camera to focus on the specified node\n     * if distance not specified, a default of 40 will be used\n     *\n     * @param {string} nodeId the node to be focused\n     * @param {number} [distance=40] the ending distance between the camera and the node\n     * @returns {*}\n     */\n    cameraFocusOn(nodeId: string, distance: number = 40) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n\n    /**\n     * which link to be highlighted\n     *\n     * @type {(LinkObject | null)}\n     */\n    highlightLink: LinkObject | null = null;\n\n    ifHighlightLink<T>(link: LinkObject, _if: T, _else: T, _default: T): T {\n        if (State.graphDelegate.highlightLink == null) {\n            return _default;\n        }\n        let sourceId = (link.source as NodeObject).id as string;\n        let targetId = (link.target as NodeObject).id as string;\n\n        if (\n            (sourceId ==\n                (State.graphDelegate.highlightLink?.source as string) &&\n                targetId ==\n                    (State.graphDelegate.highlightLink?.target as string)) ||\n            (sourceId ==\n                (State.graphDelegate.highlightLink?.target as string) &&\n                targetId ==\n                    (State.graphDelegate.highlightLink?.source as string))\n        ) {\n            return _if;\n        } else {\n            return _else;\n        }\n    }\n}\n","import {\n    autorun,\n    runInAction,\n    observable,\n    makeObservable,\n    reaction,\n} from \"mobx\";\n\nimport PreferencesStore from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport ProjectStore from \"./ProjectStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\n\nclass AppState {\n    constructor() {}\n\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    import!: ImportStore;\n    search!: SearchStore;\n    project!: ProjectStore;\n    cluster!: ClusterStore;\n    css!: CssStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.project = new ProjectStore();\n        this.cluster = new ClusterStore();\n        this.css = new CssStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// this is for easily debugging in runtime\n//@ts-ignore\nwindow._state = State;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\nautorun(\n    () =>\n        (State.cluster.rawGraph = State.search.rawGraph = State.graph.rawGraph)\n);\n\nexport default State;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    Classes,\n    ButtonGroup,\n    Position,\n    Popover,\n    Menu,\n    MenuItem,\n    MenuDivider,\n} from \"@blueprintjs/core\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                        ></img>\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Load Sample\"\n                                        icon=\"graph\"\n                                        onClick={() => {\n                                            State.import.importSamplesDialogOpen = true;\n                                        }}\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from CSV...\"\n                                        onClick={() => {\n                                            State.import.importCSVDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from GEXF...\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.project.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <ButtonGroup>\n                        {/* <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider /> */}\n                    </ButtonGroup>\n\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        Clustered by{\"  \"}\n                        <SimpleSelect\n                            items={\n                                State.graph.metadata.nodeProperties.length == 0\n                                    ? [\"None\"]\n                                    : State.graph.metadata.nodeProperties\n                            }\n                            value={State.cluster.clusterBy}\n                            onSelect={(it: string) =>\n                                (State.cluster.clusterBy = it)\n                            }\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            disabled={true}\n                            onClick={() => {\n                                State.preferences.preferenceDialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Collapse, Card, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\n\nexport default ({ name, isOpen, onToggle, children }) => (\n    <Card elevation={Elevation.THREE}>\n        <Button\n            className={classnames(\n                Classes.LARGE,\n                Classes.FILL,\n                \"text-align-left\"\n            )}\n            rightIcon={isOpen ? \"chevron-up\" : \"chevron-down\"}\n            onClick={onToggle}\n        >\n            {name}\n        </Button>\n        <Collapse isOpen={isOpen}>{children}</Collapse>\n    </Card>\n);\n","import convert from \"xml-js\";\nimport State from \"../state\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only edges file\";\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Spinner,\n    Switch,\n    Divider,\n    FileInput,\n    Alert,\n    Callout,\n    Tag,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\n\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../../constants/index\";\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportCSVDialog extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                loading: false,\n                available: ONLY_EDGE_FILE,\n                nodesOpen: true,\n                edgesOpen: true,\n                delimiter: \",\",\n            };\n        }\n\n        // determine if this state is importable\n        canImport = () => {\n            if (this.state.available === NODE_AND_EDGE_FILE) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else if (this.state.available === ONLY_EDGE_FILE) {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n            return false;\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            // show blank if node file not relevant\n            if (this.state.available === ONLY_EDGE_FILE) {\n                return null;\n            }\n\n            return (\n                <Collapsable\n                    name=\"Nodes\"\n                    isOpen={this.state.nodesOpen}\n                    onToggle={() =>\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.nodeFileName}\n                                onInputChange={(event) => {\n                                    if (event.target.files.length < 1) {\n                                        return;\n                                    }\n                                    State.import.nodeFileName =\n                                        event.target.files[0].name;\n                                    // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                    State.import.selectedNodeFileFromInput =\n                                        event.target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                value={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <Collapsable\n                    name=\"Edges\"\n                    isOpen={this.state.edgesOpen}\n                    onToggle={() =>\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.edgeFileName}\n                                onInputChange={(event) => {\n                                    if (event.target.files.length < 1) {\n                                        return;\n                                    }\n                                    State.import.edgeFileName =\n                                        event.target.files[0].name;\n                                    State.import.selectedEdgeFileFromInput =\n                                        event.target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                value={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />{\" \"}\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                value={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        value={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter == \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter == \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    style={{ minWidth: \"80vw\" }}\n                    icon=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importCSVDialogOpen}\n                    onClose={() => {\n                        State.import.importCSVDialogOpen = false;\n                    }}\n                    title=\"Import CSV\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div>\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"import-dialog\"\n                                )}\n                            >\n                                I have:\n                                <SimpleSelect\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\n                                    value={this.state.available}\n                                    onSelect={(targetValue) => {\n                                        State.import.importConfig.hasNodeFile = !(\n                                            targetValue === ONLY_EDGE_FILE\n                                        );\n                                        this.setState({\n                                            available: targetValue,\n                                        });\n                                    }}\n                                />\n                                <Divider />\n                                {this.renderNodesSelection()}\n                                <br />\n                                {this.renderEdgesSelection()}\n                                <br />\n                                {this.renderDelimiterSelection()}\n                            </div>\n                            <div className={Classes.DIALOG_FOOTER}>\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                    <Button\n                                        className={classnames({\n                                            [Classes.DISABLED]: !this.canImport(),\n                                        })}\n                                        intent={Intent.PRIMARY}\n                                        onClick={() => {\n                                            State.import.isLoading = true;\n                                            State.import\n                                                .importGraphFromCSV()\n                                                .then((res) => {\n                                                    State.graph.rawGraph = State.graph.decorateRawGraph(\n                                                        res.graph\n                                                    );\n                                                    State.graph.metadata =\n                                                        res.metadata;\n                                                    State.import.isLoading = false;\n                                                    State.import.importCSVDialogOpen = false;\n                                                });\n                                        }}\n                                        text=\"Import\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    Intent,\n    Spinner,\n    FileInput,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            className={classnames({\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\n                            })}\n                            intent={Intent.PRIMARY}\n                            onClick={() => {\n                                State.import.isLoading = true;\n                                State.import\n                                    .importGraphFromGEXF()\n                                    .then((res) => {\n                                        State.graph.rawGraph = State.graph.decorateRawGraph(\n                                            res.graph\n                                        );\n                                        State.graph.metadata = res.metadata;\n\n                                        State.import.isLoading = false;\n                                        State.import.importGEXFDialogOpen = false;\n                                    });\n                            }}\n                            text=\"Import\"\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Import GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                if (\n                                                    event.target.files.length <\n                                                    1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    event.target.files[0].name;\n                                                State.import.selectedGEXFFileFromInput =\n                                                    event.target.files[0];\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Card,\n    Icon,\n    Dialog,\n    Intent,\n    Spinner,\n    Elevation,\n    Divider,\n    H3,\n    ButtonGroup,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { makeObservable, computed } from \"mobx\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    class ExportDialog extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        state = {\n            ready: true,\n        };\n\n        computeGEXFFile() {\n            return gexf.write(State.graph.rawGraph);\n        }\n\n        computeNodeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [];\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n            });\n            headers.push({ label: \"_id\", key: \"_id\" });\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.project.exportDialogOpen}\n                    onClose={() => {\n                        State.project.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br></br>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        headers={this.computeNodeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        headers={this.computeEdgeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n        }\n\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for == \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for == \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.state.loading = true;\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import { Attributes } from \"graphology-types\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute != \"_visualize\" &&\n            attribute != \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n    Switch,\n    Tag,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode<Attributes> | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode<Attributes>[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery == \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it != \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(\n                                rowIndex: number,\n                                columnIndex: number\n                            ) => this.renderCell(rowIndex, it)}\n                        />\n                    );\n                }\n            });\n            return columns.filter((element) => {\n                return element != undefined;\n            });\n        };\n\n        renderCell = (rowIndex: number, attribute: string) => {\n            let cellAttributes = this.filteredTable[rowIndex].attributes;\n            //@ts-ignore\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    tooltip={cell}\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.rawGraph.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() => {\n                                State.preferences.AddNodeDialogOpen = true;\n                            }}\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class NodeDataSheetDialog extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class NodeChooser extends React.Component<Props, {}> {\n        constructor(props: Props | Readonly<Props>) {\n            super(props);\n        }\n\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip2\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip2>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as null | SerializedEdge<Attributes>,\n            filterQuery: null as null | string,\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    !this.state.filterQuery ||\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery == \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.rawGraph.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.rawGraph.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of a Node...\"\n                            value={this.state.filterQuery ?? \"\"}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class EdgeDataSheetDialog extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    class NodeAdder extends React.Component<Props, {}> {\n        constructor(props: Props | Readonly<Props>) {\n            super(props);\n        }\n\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId != \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip2\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip2>\n            ) : (\n                    <Tooltip2\n                        content={\n                            \"This Node Id is currently in use by other nodes, try with another one instead\"\n                        }\n                        intent=\"warning\"\n                    >\n                        <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                    </Tooltip2>\n                );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute != \"_options\" && attribute != \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.rawGraph.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.preferences.AddNodeDialogOpen = false;\n                            // State.preferences.rightClickBackgroundPanelOpen = false;\n                            // this.forceUpdate();\n                            // State.graphDelegate.cameraFocusOn(this.state.newNodeId);\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Classes, Dialog, Tag } from \"@blueprintjs/core\";\nimport NodeAdder from \"../utils/NodeAdder\";\nimport State from \"../../state\";\n\nexport default observer(\n    class AddNodeDialog extends React.Component {\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => {\n                        State.preferences.AddNodeDialogOpen = false;\n                    }}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New edges are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportCSVDialog from \"./dialogs/ImportCSVDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\nimport ImportSamplesDialog from \"./dialogs/ImportGEXFDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\nimport AddNodeDialog from \"./dialogs/AddNodeDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportCSVDialog />\n                <ImportGEXFDialog />\n                <ImportSamplesDialog />\n                {/*\n                <ProjectDetailDialog />\n                <RenameSnapshotDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog />\\\n                */}\n                <AddNodeDialog />\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ThreeJSVis extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        getNodeId(node: NodeObject): string {\n            let nodeId: string;\n            if (node.id as string) {\n                nodeId = node.id as string;\n            } else {\n                nodeId = (node.id as number).toString();\n            }\n            return nodeId;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        nodeHover = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            if (node != null && node != previousNode) {\n                State.graph.currentlyHoveredId = this.getNodeId(\n                    node as NodeObject\n                );\n            }\n        };\n\n        // ref of State.graph.selectedNodes\n        selectedNodes: string[] = State.graph.selectedNodes;\n\n        nodeSelect = (node: NodeObject, event: MouseEvent) => {\n            let nodeId = this.getNodeId(node as NodeObject);\n            if (event.ctrlKey || event.shiftKey) {\n                // multi-selection\n                if (this.selectedNodes.includes(nodeId)) {\n                    let index = this.selectedNodes.indexOf(nodeId);\n                    if (index > -1) {\n                        this.selectedNodes.splice(index, 1);\n                    }\n                } else {\n                    this.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single-selection\n                // TODO\n            }\n            this.graphMethods.refresh(); // update color of selected nodes\n        };\n\n        nodeRightClick = (node: NodeObject, event: MouseEvent) => {\n            State.graph.selectedNode = node.id as string;\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickBackgroundPanelOpen = false;\n            State.preferences.rightClickNodePanelOpen = true;\n        };\n\n        backgroundRightClick = (event: MouseEvent) => {\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickNodePanelOpen = false;\n            State.preferences.rightClickBackgroundPanelOpen = true;\n        };\n\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <ForceGraph3D\n                        ref={this.graphRef}\n                        graphData={this.graphDelegate.visualizationGraph}\n                        nodeResolution={20}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        onBackgroundRightClick={this.backgroundRightClick}\n                        linkWidth={(link) => {\n                            return State.graphDelegate.ifHighlightLink(\n                                link,\n                                2,\n                                0.1,\n                                1\n                            );\n                        }}\n                        linkColor={(link) => {\n                            return State.graphDelegate.ifHighlightLink(\n                                link,\n                                \"orangered\",\n                                \"white\",\n                                \"white\"\n                            );\n                        }}\n                        linkDirectionalParticles={(link) => {\n                            return State.graphDelegate.ifHighlightLink(\n                                link,\n                                4,\n                                0,\n                                0\n                            );\n                        }}\n                        linkDirectionalParticleWidth={4}\n                        onEngineTick={() =>\n                            this.graphDelegate.clusterDelegation()\n                        }\n                        nodeColor={(node) =>\n                            this.selectedNodes.includes(this.getNodeId(node))\n                                ? \"yellow\"\n                                : \"grey\"\n                        }\n                        onNodeClick={this.nodeSelect}\n                        onNodeRightClick={this.nodeRightClick}\n                        onBackgroundClick={() => {\n                            State.preferences.rightClickNodePanelOpen = false;\n                            State.preferences.rightClickBackgroundPanelOpen = false;\n                        }}\n                        onNodeHover={this.nodeHover}\n                    />\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport {\n    Button,\n    Classes,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\n// import { Popover2, Select } from \"@blueprintjs/labs\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport * as THREE from \"three\";\n// import SimpleSelect from \"../utils/SimpleSelect\";\n// import mouse from \"../../graph-frontend/src/select\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                timeOutRef: null,\n                sizeOptionOpen: false,\n                thicknessOptionOpen: false,\n                colorOptionOpen: false,\n            };\n        }\n\n        render() {\n            let graph = State.graph.graph;\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Select Edge Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <Popover\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={Position.RIGHT}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    backgroundColor:\n                                                        State.css.config.edges\n                                                            .color,\n                                                }}\n                                            />\n                                            <div>\n                                                <SketchPicker\n                                                    color={\n                                                        State.css.config.edges\n                                                            .color\n                                                    }\n                                                    onChange={(it) => {\n                                                        // State.graph.process.graph.forEachNode(n => {\n\n                                                        //     let red = new THREE.Color(State.graph.edges.color).r;\n                                                        //     let blue = new THREE.Color(State.graph.edges.color).g;\n                                                        //     let green = new THREE.Color(State.graph.edges.color).b;\n                                                        //     n.renderData.linecolor.r = red;\n                                                        //     n.renderData.linecolor.g = blue;\n                                                        //     n.renderData.linecolor.b = green;\n                                                        // });\n\n                                                        State.css.config.edges.color =\n                                                            it.hex;\n                                                        console.log(it.hex);\n                                                        /**update edge color in real time*/\n                                                        // State.graph.process.onHover();\n                                                    }}\n                                                />\n                                            </div>\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Thickness */}\n                    {/* <Collapsable\n                    name=\"Thickness\"\n                    isOpen={this.state.thicknessOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\n                        })\n                    }\n                    >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p>Select Edge Thickness: </p>\n                            <div style={{display: \"inline\", float: \"right\"}}>\n\n                            </div>\n                        </section>\n                    </div>\n                </Collapsable> */}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <span style={{ display: \"inline-block\" }}>\n                        <Button\n                            style={{ width: \"100px\" }}\n                            id=\"hideAll\"\n                            icon=\"eye-off\"\n                            className={Classes.FILL}\n                            onClick={() => State.graph.frame.hideAllLabels()}\n                        >\n                            Hide All\n                        </Button>\n                        <Button\n                            style={{ width: \"100px\", display: \"none\" }}\n                            id=\"showAll\"\n                            icon=\"eye-on\"\n                            className={Classes.FILL}\n                            onClick={() => State.graph.frame.showAllLabels()}\n                        >\n                            Show All\n                        </Button>\n                        <Button\n                            style={{ width: \"140px\", marginLeft: \"10px\" }}\n                            id=\"hideSelected\"\n                            icon=\"eye-off\"\n                            className={Classes.FILL}\n                            onClick={() =>\n                                State.graph.frame.hideSelectedLabels()\n                            }\n                        >\n                            Hide Selected\n                        </Button>\n                        <Button\n                            style={{\n                                width: \"140px\",\n                                marginLeft: \"10px\",\n                                display: \"none\",\n                            }}\n                            id=\"showSelected\"\n                            icon=\"eye-on\"\n                            className={Classes.FILL}\n                            onClick={() =>\n                                State.graph.frame.showSelectedLabels()\n                            }\n                        >\n                            Show Selected\n                        </Button>\n                    </span>\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label Size</h6>\n                    <Slider\n                        min={0.5}\n                        max={3}\n                        stepSize={0.1}\n                        // onChange={value => {\n                        //   State.graph.nodes.labelSize = value;\n                        // }}\n                        // value={State.graph.nodes.labelSize}\n                        initialValue={2}\n                        value={2}\n                    />\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label Length</h6>\n                    <Slider\n                        min={1}\n                        max={32}\n                        stepSize={0.1}\n                        labelStepSize={5}\n                        // onChange={value => {\n                        //   State.graph.nodes.labelLength = value;\n                        // }}\n                        // value={State.graph.nodes.labelLength}\n                        value={10}\n                    />\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label By</h6>\n                    {/* <Select\n            items={State.graph.allPropertiesKeyList}\n            itemRenderer={CommonItemRenderer}\n            filterable={false}\n            onItemSelect={it => (State.graph.nodes.labelBy = it)}\n          >\n            <Button text={State.graph.nodes.labelBy} />\n          </Select> */}\n                </div>\n            );\n        }\n    }\n);\n// export default LabelsPanel;\n","import React from \"react\";\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\n\nexport default ({ name, isOpen, onToggle, children }) => (\n    <div>\n        <Switch\n            label={name}\n            checked={isOpen}\n            onChange={onToggle}\n            className={Classes.ALIGN_RIGHT}\n        />\n        <Collapse isOpen={isOpen}>{children}</Collapse>\n    </div>\n);\n","import React from \"react\";\nimport { Button, Classes, Slider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class SelectionPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        shapeOptionOpen: false,\n        sizeOptionOpen: false,\n        colorOptionOpen: false,\n        labelOptionOpen: false\n      };\n    }\n\n    // twoLayerUpdate = (nodeId, key, value) => {\n    //   if (!State.graph.overrides.has(nodeId)) {\n    //     State.graph.overrides.set(nodeId, new Map());\n    //   }\n    //   const nodeAttrs = State.graph.overrides.get(nodeId);\n    //   if (value !== null) {\n    //     nodeAttrs.set(key, value);\n    //   } else {\n    //     nodeAttrs.delete(key);\n    //     if (nodeAttrs.size === 0) {\n    //       State.graph.overrides.delete(nodeId);\n    //     }\n    //   }\n    // };\n\n    // batchTwoLayerUpdate = (nodes, key, value) => {\n    //   runInAction(\"update entire selection\", () => {\n    //     nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\n    //   });\n    // };\n\n    render() {\n      return (\n        <div>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Size\"\n            isOpen={this.state.sizeOptionOpen}\n            onToggle={() => {\n              if (this.state.sizeOptionOpen) {\n                this.setState(\n                  {\n                    sizeOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"size\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    sizeOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"size\",\n                  //     State.graph.overrideConfig.size\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <Slider\n                min={1}\n                max={20}\n                stepSize={0.1}\n                labelStepSize={5}\n                // onChange={it => {\n                //   State.graph.overrideConfig.size = it;\n                //   this.batchTwoLayerUpdate(\n                //     State.graph.selectedNodes,\n                //     \"size\",\n                //     it\n                //   );\n                // }}\n                // value={State.graph.overrideConfig.size}\n                value={2}//set for test\n              />\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Color\"\n            isOpen={this.state.colorOptionOpen}\n            onToggle={() => {\n              if (this.state.colorOptionOpen) {\n                this.setState(\n                  {\n                    colorOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"color\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    colorOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"color\",\n                  //     State.graph.overrideConfig.color\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <section> <p style={{ textAlign: \"left\" }}>\n                Choose Color:\n            <span style={{ float: \"right\" }}>\n                  <Popover\n                    //previous!!\n                    // placement=\"bottom\"\n                    // modifiers={{\n                    //   preventOverflow: {\n                    //     enabled: false,\n                    //   },\n                    // }}\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    position={Position.RIGHT}\n\n                  >\n                    <Button\n                      text=\"  \"\n                      style={{\n                        backgroundImage: \"inherit\",\n                        // backgroundColor: State.graph.overrideConfig.color\n                      }}\n                    />\n                    <SketchPicker\n                    // color={State.graph.overrideConfig.color}\n                    // onChange={it => {\n                    //   State.graph.overrideConfig.color = it.hex;\n                    //   this.batchTwoLayerUpdate(\n                    //     State.graph.selectedNodes,\n                    //     \"color\",\n                    //     it.hex\n                    //   );\n                    // }}\n                    />\n                  </Popover>\n                </span>\n              </p>\n              </section>\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Label\"\n            isOpen={this.state.labelOptionOpen}\n            onToggle={() => {\n              if (this.state.labelOptionOpen) {\n                this.setState(\n                  {\n                    labelOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"label\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    labelOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"label\",\n                  //     State.graph.overrideConfig.label\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              Custom Label:\n            <input\n                value={\"test\"}//used for test\n              // value={State.graph.overrideConfig.label}\n              // onChange={it => {\n              //   State.graph.overrideConfig.label = it.target.value;\n              //   this.batchTwoLayerUpdate(\n              //     State.graph.selectedNodes,\n              //     \"label\",\n              //     it.target.value\n              //   );\n              // }}\n              />\n            </div>\n          </SwitchCollapsable>\n          <br />\n          <SwitchCollapsable\n            name=\"Override Shape\"\n            isOpen={this.state.shapeOptionOpen}\n            onToggle={() => {\n              if (this.state.shapeOptionOpen) {\n                this.setState(\n                  {\n                    shapeOptionOpen: false\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"shape\",\n                  //     null\n                  //   )\n                );\n              } else {\n                this.setState(\n                  {\n                    shapeOptionOpen: true\n                  }\n                  // ,\n                  // () =>\n                  //   this.batchTwoLayerUpdate(\n                  //     State.graph.selectedNodes,\n                  //     \"shape\",\n                  //     State.graph.overrideConfig.shape\n                  //   )\n                );\n              }\n            }}\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              <section> <p style={{ textAlign: \"left\" }}>\n                Node Shape:\n            <span style={{ float: \"right\" }}>\n                  <Select\n                    items={[\n                      \"shape1\",\n                      \"shape2\",\n                      \"shape3\",\n                      \"shape4\",\n                      \"shape5\"\n                    ]}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={it => {\n                      console.log(it)//used for test\n                      // State.graph.overrideConfig.shape = it;\n                      // this.batchTwoLayerUpdate(\n                      //   State.graph.selectedNodes,\n                      //   \"shape\",\n                      //   it\n                      // );\n                    }\n                    }\n                  >\n                    {/* <Button text={State.graph.overrideConfig.shape} /> */}\n                    <Button text={\"change\"} />\n                    {/* upper is used for test */}\n                  </Select>\n                </span>\n              </p>\n              </section>\n            </div>\n          </SwitchCollapsable>\n        </div>\n      );\n    }\n  }\n);\n// export default SelectionPanel;","import React from \"react\";\nimport { Button, Classes, RangeSlider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { runInAction } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\n// import { scales } from \"../../constants/index\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\n\nexport default observer(\n  class GlobalPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        timeOutRef: null,\n        sizeOptionOpen: false,\n        colorOptionOpen: false,\n        shapeOptionOpen: false\n      };\n    }\n\n    render() {\n      return (\n        <div>\n          {/* Collapsable Option: Color */}\n          <Collapsable\n            name=\"Color\"\n            isOpen={this.state.colorOptionOpen}\n            onToggle={() =>\n              this.setState({\n                colorOptionOpen: !this.state.colorOptionOpen\n              })\n            }\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* color : color by */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Color By:\n                <span style={{ float: \"right\" }}>\n                    <SimpleSelect\n                      items={[\"item1\", \"item2\"]\n                        // State.graph.allPropertiesKeyList\n                      }\n                      onSelect={it => (\n                        console.log(\"color:color by\")\n                        // State.graph.nodes.colorBy = it\n                      )\n                      }\n                      value={\"1\"//for test\n                        // State.graph.nodes.colorBy\n                      }\n                    />\n                  </span>\n                </p>\n              </section>\n\n              {/* color:scale type  */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale Type:\n                <span style={{ float: \"right\" }}>\n                    <SimpleSelect\n                      items={[\"item1\", \"item2\"]\n                        // Object.keys(scales)\n                      }\n                      onSelect={it => (console.log(\"color:scale type\")\n                        // State.graph.nodes.color.scale = it\n                      )\n                      }\n                      value={\"2\"\n                        // State.graph.nodes.color.scale\n                      }\n                    />\n                  </span>\n                </p>\n              </section>\n\n              {/* the gradient section in color */}\n              <section >\n                <p style={{ textAlign: \"left\" }}>Gradient: &nbsp;\n                <span style={{ float: \"right\" }}>\n                    {/* left colorpicker */}\n                    <Popover\n                      // placement=\"bottom\"\n                      // modifiers={{\n                      //   preventOverflow: {\n                      //     enabled: false,\n                      //   },\n                      // }}\n                      interactionKind={PopoverInteractionKind.CLICK}\n                      popoverClassName=\"bp3-popover-content-sizing\"\n                      position={\"auto\"}\n                    >\n                      <Button\n                        text=\"  \"\n                      // style={{\n                      //   // backgroundImage: \"inherit\",\n                      //   // backgroundColor: State.graph.nodes.color.from\n                      // }}\n                      />\n                      <SketchPicker\n                        color={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.from\n                        }\n                        onChange={\n                          console.log(\"gradient section first colorpicker onchange\")\n                          // it => (State.graph.nodes.color.from = it.hex)\n                        }\n                      />\n                    </Popover>\n                    {/* arrow  */}\n                    &nbsp; &#8594; &nbsp;\n                    {/* right colorpicker */}\n                    <Popover\n                      //previous!!\n                      // placement=\"bottom\"\n                      // modifiers={{\n                      //   preventOverflow: {\n                      //     enabled: false,\n                      //   },\n                      // }}\n                      interactionKind={PopoverInteractionKind.CLICK}\n                      popoverClassName=\"bp3-popover-content-sizing\"\n                      position={\"auto\"}\n                    >\n                      <Button\n                        text=\"  \"\n                        style={{\n                          backgroundImage: \"inherit\",\n                          // backgroundColor: State.graph.nodes.color.to\n                        }}\n                      />\n                      <SketchPicker\n                        color={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.to\n                        }\n                        onChange={\n                          console.log(\"gradient section second colorpicker onchange\")\n                          // it => (State.graph.nodes.color.to = it.hex)\n                        }\n                      />\n                    </Popover>\n                  </span>\n                </p>\n              </section>\n              {/* color : gradient preview */}\n              <section style={{ marginTop: \"-1em\" }}>\n                <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\n                  <defs>\n                    <linearGradient\n                      x1=\"0%\"\n                      y1=\"50%\"\n                      x2=\"100%\"\n                      y2=\"50%\"\n                      id=\"theGradient\"\n                    >\n                      <stop\n                        stopColor={\"#ffffff\"//used for test\n                          // State.graph.nodes.color.from\n                        }\n                        stopOpacity=\"1\"\n                        offset=\"0%\"\n                      />\n                      <stop\n                        stopColor={\n                          \"#ffffff\"//used for test\n                          // State.graph.nodes.color.to\n                        }\n                        stopOpacity=\"1\"\n                        offset=\"100%\"\n                      />\n                    </linearGradient>\n                  </defs>\n                  <rect\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"100%\"\n                    height=\"50\"\n                    fill=\"url(#theGradient)\"\n                  />\n                </svg>\n              </section>\n            </div>\n          </Collapsable>\n\n          {/* Collapsable Option: Size */}\n          <Collapsable\n            name=\"Size\"\n            isOpen={this.state.sizeOptionOpen}\n            onToggle={() =>\n              this.setState({\n                sizeOptionOpen: !this.state.sizeOptionOpen\n              })\n            }\n          >\n\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* size : scale by  */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale By:\n                <span style={{ float: \"right\" }}>\n                    <Select\n                      items={[\"item1\", \"item2\"]}\n                      itemRenderer={CommonItemRenderer}\n                      filterable={false}\n                      onItemSelect={\n                        console.log(\"size : scale by , component :select\")\n                        // it => (State.graph.nodes.sizeBy = it)\n                      }\n                    >\n                      <Button text={\"btn1\"\n                        // State.graph.nodes.sizeBy\n                      } />\n                    </Select>\n                  </span>\n                </p>\n              </section>\n              {/* size : scale type */}\n              <section>\n                <p style={{ textAlign: \"left\" }}>Scale Type:\n                <span style={{ float: \"right\" }}>\n                    <Select\n                      items={[\"item1\", \"item2\"]\n                        //Object.keys(scales)\n                      }\n                      itemRenderer={CommonItemRenderer}\n                      filterable={false}\n                      onItemSelect={\n                        console.log(\"size : scale type component: select\")\n                        // it => (State.graph.nodes.size.scale = it)\n                      }\n                    >\n                      <Button text={\"btn2\"\n                        // State.graph.nodes.size.scale\n                      } />\n                    </Select>\n                  </span>\n                </p>\n              </section>\n\n            Size Range:\n            <br />\n              <RangeSlider\n                min={1}\n                max={20}\n                stepSize={0.1}\n                labelStepSize={5}\n              // onChange={([a, b]) => {\n              //   runInAction(\"update scale\", () => {\n              //     State.graph.nodes.size.min = a;\n              //     State.graph.nodes.size.max = b;\n              //   });\n              // }}\n              // value={[\n              //   State.graph.nodes.size.min,\n              //   State.graph.nodes.size.max\n              // ]}\n              />\n            </div>\n          </Collapsable>\n\n          {/* Collapsable Option: Shape */}\n          <Collapsable\n            name=\"Shape\"\n            isOpen={this.state.shapeOptionOpen}\n            onToggle={() =>\n              this.setState({\n                shapeOptionOpen: !this.state.shapeOptionOpen\n              })\n            }\n          >\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\n              {/* shape : node shape */}\n              <section> <p style={{ textAlign: \"left\" }}> Node Shape:\n              <span style={{ float: \"right\" }}>\n                  <Select\n                    items={[\n                      \"circle\",\n                      \"square\",\n                      \"triangle\",\n                      \"pentagon\",\n                      \"hexagon\",\n                      \"octagon\"\n                    ]}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={\n                      console.log(\" shape : node shape component: select\")\n                      // it => (State.graph.nodes.shape = it)\n                    }\n                  >\n                    <Button text={\"btn3\"\n                      // State.graph.nodes.shape\n                    } />\n                  </Select>\n                </span>\n              </p></section>\n            </div>\n          </Collapsable>\n          <br />\n          <small>\n\n            {/* {pluralize(\"node\", State.graph.overrides.size, true)}<span> </span> */}\n            {pluralize(\"node\", 0, true)}<span> </span>\n          have override styles.  &nbsp;\n          <Button className={\"pt-small\"} text=\"Clear\"\n            // onClick={() => (State.graph.overrides = new Map())} \n            />\n          </small>\n        </div>\n      );\n    }\n  }\n);\n// export default GlobalPanel;","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\nimport GlobalPanel from \"./GlobalPanel\";\nimport SelectionPanel from \"./SelectionPanel\";\n\nexport default observer(\n  class NodesPanel extends React.Component {\n    getRenderedNodes = () => {\n      if (State.graph.selectedNodes.length === 0) {\n        return (\n          <div>\n            <p>Modifying All Nodes</p>\n          </div>\n        );\n      }\n      return (\n        <p>{`Modifying ${pluralize(\n          \"Node\",\n          State.graph.selectedNodes.length,\n          true\n        )}`}</p>\n      );\n    };\n\n    render() {\n      return (\n        <div>\n          {this.getRenderedNodes()}\n          {State.graph.selectedNodes.length === 0 ? (\n            <GlobalPanel />\n          ) : (\n              <SelectionPanel />\n            )}\n        </div>\n      );\n    }\n  }\n);\n// export default NodesPanel;","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: any;\n\n    multiNodeDetail!: any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.graph.currentlyHoveredId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\nexport default observer(\n    class NodeDetail extends React.Component {\n        constructor(props: any) {\n            super(props);\n        }\n\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                State.graph.currentlyHoveredId,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Editable Cell where user can edit the value of certain property;\n            return (\n                <EditableCell\n                    value={data}\n                    onChange={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            State.graph.currentlyHoveredId,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    onConfirm={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            State.graph.currentlyHoveredId,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    tooltip={data}\n                />\n            );\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"node-details-table\"\n                        )}\n                    >\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            const formatLongFloat = (nodeAttributeValue: any) => {\n                const num = Number(nodeAttributeValue);\n                if (Number.isNaN(num) || num > 1 || num < 0) {\n                    // Do not format just return original\n                    return nodeAttributeValue;\n                }\n                // Format to no more than 3 significant digit.\n                return Number.parseFloat(num.toString()).toPrecision(3);\n            };\n\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"nodes-details-table\"\n                        )}\n                    >\n                        <Table numRows={State.graph.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.graph.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport {\n    Button,\n    Classes,\n    InputGroup,\n    Menu,\n    MenuItem,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport GraphDelegate from \"../../state/GraphDelegate\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\n\nexport default observer(\n    class SearchPanel extends React.Component {\n        renderSearchResults = () => {\n            return State.search.candidates.map((it) => {\n                return (\n                    <MenuItem\n                        text={it}\n                        onMouseOver={() => {\n                            State.search.isPreviewing = true;\n                            State.graph.currentlyHoveredId = it;\n                            State.graphDelegate.cameraFocusOn(it);\n                        }}\n                    ></MenuItem>\n                );\n            });\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div className={classnames(\"search\")}>\n                        {State.search.candidates.length != 0 && (\n                            <Menu\n                                large={true}\n                                className={classnames(\"search-menu\")}\n                                onMouseLeave={() => {\n                                    State.search.isPreviewing = false;\n                                }}\n                            >\n                                {this.renderSearchResults()}\n                            </Menu>\n                        )}\n                        <InputGroup\n                            asyncControl={true}\n                            large={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange(\n                                (value) => (State.search.searchStr = value)\n                            )}\n                            placeholder=\"Search any Node...\"\n                            value={State.search.searchStr}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Menu, MenuItem, MenuDivider, Classes } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\nexport default observer(\n    class RightClickNodePanel extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem icon=\"graph-remove\" text=\"Delete Node\" />\n                    <MenuDivider />\n                    <MenuItem icon=\"new-link\" text=\"Add Edge\" />\n                    <MenuItem\n                        icon=\"cross\"\n                        text=\"Delete Edge\"\n                        onClick={() => {\n                            State.preferences.deleteEdgePanelOpen = true;\n                            State.preferences.rightClickNodePanelOpen = false;\n                        }}\n                    />\n                </Menu>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Menu, MenuItem, MenuDivider, Classes } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\nexport default observer(\n    class RightClickBackgroundPanel extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"new-object\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickBackgroundPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n    }\n);\n","import React, { Attributes } from \"react\";\nimport {\n    Menu,\n    MenuItem,\n    MenuDivider,\n    Classes,\n    Button,\n    Alert,\n    Code,\n    Intent,\n    Card,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport {\n    Table,\n    RenderMode,\n    Column,\n    Cell,\n    ICellRenderer,\n} from \"@blueprintjs/table\";\n\ninterface Props {\n    /**\n     * the node id of the select node to delete Edge\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class DeleteEdgeInteractionPanel extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n        }\n\n        state = {\n            edgeToDelete: \"\",\n            deleteAlertOpen: false,\n        };\n\n        get neighbors(): string[] {\n            if (this.props.onNode == \"\") {\n                return [];\n            }\n            let neighbors: string[] = [];\n            State.graph.rawGraph.forEachNeighbor(\n                this.props.onNode,\n                (neighbor) => {\n                    neighbors.push(neighbor);\n                }\n            );\n            return neighbors;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            let targetNode = this.neighbors[rowIndex];\n            let edgeKey = State.graph.rawGraph.edge(\n                this.props.onNode,\n                targetNode\n            );\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: edgeKey as string,\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            if (this.state.edgeToDelete == \"\") {\n                return null;\n            }\n            let source = State.graph.rawGraph.source(this.state.edgeToDelete);\n            let target = State.graph.rawGraph.target(this.state.edgeToDelete);\n\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.rawGraph.dropEdge(this.state.edgeToDelete);\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete}</Code> between Node ID{\" \"}\n                        <Code>{source}</Code> and Node ID <Code>{target}</Code>.\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        neighborsRenderer: ICellRenderer = (rowIndex: number) => {\n            return (\n                <Cell interactive={true}>\n                    <div\n                        onClick={() => {\n                            State.graphDelegate.cameraFocusOn(\n                                this.props.onNode,\n                                400\n                            );\n                            State.graphDelegate.highlightLink = {\n                                source: this.props.onNode,\n                                target: this.neighbors[rowIndex],\n                            };\n                            State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                        }}\n                    >\n                        {this.neighbors[rowIndex]}\n                    </div>\n                </Cell>\n            );\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={classnames(\"node-details-table\")}>\n                        <Button\n                            icon=\"cross\"\n                            onClick={() => {\n                                State.preferences.deleteEdgePanelOpen = false;\n                                State.graphDelegate.highlightLink = null;\n                                State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                            }}\n                        >\n                            Close\n                        </Button>\n                        <Table\n                            numRows={this.neighbors.length}\n                            defaultRowHeight={30}\n                            renderMode={RenderMode.NONE}\n                        >\n                            <Column\n                                name=\"\"\n                                cellRenderer={this.deleteEdgeRenderer}\n                                //@ts-ignore\n                                style={this.style}\n                            />\n                            <Column\n                                name=\"Node ID\"\n                                //@ts-ignore\n                                intent={Intent.PRIMARY}\n                                cellRenderer={this.neighborsRenderer}\n                            />\n                        </Table>\n                        {this.deleteEdgeAlert()}\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Tab, Tabs, Button } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport NodesPanel from \"./panels/NodesPanel\";\nimport EdgesPanel from \"./panels/EdgesPanel\";\nimport LabelsPanel from \"./panels/LabelsPanel\";\nimport NodeDetail from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport SearchPanel from \"./panels/SearchPanel\";\nimport RightClickNodePanel from \"./panels/RightClickNodePanel\";\nimport RightClickBackgroundPanel from \"./panels/RightClickBackgroundPanel\";\nimport DeleteEdgeInteractionPanel from \"./panels/DeleteEdgeInteractionPanel\";\n\nlet RenderOptionsCard = observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <h2>Graph Options</h2>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n//\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.isRenderOptionsCardHidden = !State.preferences\n                .isRenderOptionsCardHidden;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"left-overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.isRenderOptionsCardHidden\n                                    ? this.optionsInvisible\n                                    : this.optionsVisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            ></Button>\n                            <br />\n                            <RenderOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.isRenderOptionsCardHidden\n                                        ? this.sideButtonVis\n                                        : this.sideButtonInv\n                                }\n                            ></Button>\n                        </div>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.graph.currentlyHoveredId != \"undefined\" &&\n                        State.graph.selectedNodes.length == 0 && <NodeDetail />}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.graph.selectedNodes.length != 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    <SearchPanel />\n                    {State.preferences.rightClickNodePanelOpen && (\n                        <RightClickNodePanel />\n                    )}\n\n                    {State.preferences.rightClickBackgroundPanelOpen && (\n                        <RightClickBackgroundPanel />\n                    )}\n                    {State.preferences.deleteEdgePanelOpen && (\n                        <DeleteEdgeInteractionPanel\n                            onNode={State.graph.selectedNode}\n                        />\n                    )}\n                </div>\n            );\n        }\n    }\n);\n\n// export default FloatingCards;\n","import React from \"react\";\nimport { Provider } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    Classes,\n    FocusStyleManager,\n    NonIdealState,\n} from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\nimport State from \"./state\";\nimport EdgesPanel from \"./components/panels/EdgesPanel\";\nimport LabelsPanel from \"./components/panels/LabelsPanel\";\nimport SelectionPanel from \"./components/panels/SelectionPanel\";\nimport GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}