{"version":3,"sources":["components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","images/logo.png","state/PreferencesStore.ts","state/GraphStore.ts","state/ImportStore.ts","state/ProjectStore.js","state/SearchStore.js","state/index.ts","constants/index.ts","components/Navbar.jsx","components/utils/Collapsable.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/GraphDataTable.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/visualize/visualizer.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/GlobalPanel.jsx","components/panels/NodesPanel.jsx","components/FloatingCards.jsx","App.js","reportWebVitals.js","index.js"],"names":["item","handleClick","isActive","className","Classes","ACTIVE","onClick","text","items","onSelect","value","fill","itemRenderer","CommonItemRenderer","filterable","onItemSelect","FILL","PreferencesStore","preferenceDialogOpen","darkMode","statisticsDialogOpen","helpDialogOpen","neighborDialogOpen","dataSheetDialogOpen","isRenderOptionsCardHidden","view","makeObservable","this","observable","GraphStore","initialGlobalConfig","nodes","colorBy","color","scale","from","to","sizeBy","size","min","max","labelBy","shape","labelSize","labelLength","edges","rawGraph","Graph","allowSelfLoops","multi","type","enableDegree","enableDensity","enableDiameter","enableCoefficient","enableComponent","selectedNodes","currentlyHovered","undefined","_lastSelectedSingleNode","metadata","snapshotName","String","numNodes","numEdges","nodeProperties","edgeProperties","adapterGraph","computed","rawTable","hasGraph","key","originalOptions","getNodeAttribute","newOptions","show","setNodeAttribute","tempGraph","links","exportedGraph","export","forEach","node","attributes","_options","thisNode","id","name","val","push","order","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","cluster","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","err","Toaster","create","position","Position","TOP","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","graph","readNodeCSV","options","toString","addNode","readEdgeCSV","edge","hasNode","data","addEdge","Object","keys","clusterProperties","readGEXF","forEachNode","attribute","hasOwnProperty","entries","getNodeAttributes","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","length","join","console","log","it","onerror","error","action","window","location","reload","nodeFileConfig","ProjectStore","currentSnapshotName","saveSnapshotDialogOpen","renameSnapshotDialogOpen","SearchStore","searchPaneOpen","searchStr","candidates","numCandidates","panelOpen","State","preferences","import","search","project","autorun","renderImportEdgePreview","renderImportNodePreview","SAMPLE_GRAPH_SNAPSHOTS","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","observer","classnames","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","NAVBAR_HEADING","icon","sample","sampleSnapshotTitle","sampleSnapshotString","Blob","importGraphFromCSV","BOTTOM","BUTTON","MINIMAL","SimpleSelect","ALERT_CONTENTS","ALIGN_RIGHT","NAVBAR_DIVIDER","dialogOpen","React","Component","isOpen","onToggle","children","elevation","Elevation","THREE","LARGE","rightIcon","PreviewTable","props","renderWrapper","numRows","selectedRegions","values","indexOf","rows","cols","cellRenderer","i","canImport","state","available","renderNodesSelection","Collapsable","nodesOpen","setState","CONTROL_GROUP","INPUT_GROUP","onInputChange","event","target","files","label","checked","onChange","renderEdgesSelection","edgesOpen","newDelimiter","style","minWidth","iconName","DARK","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","then","res","fileIsSelect","importGraphFromGEXF","renderImportButton","sortBy","sortOrder","showRenderer","rowIndex","hideNode","showNode","forceUpdate","renderColumns","columnIndex","cell","filter","element","interactive","ONE","selected","SUCCESS","showMoreBy","showMoreNum","GraphDataTable","Dialogs","display","renderGraph","graphData","nodeResolution","dagMode","nodeRelSize","d3VelocityDecay","timeOutRef","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","CARD","textAlign","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","RIGHT","backgroundImage","backgroundColor","hex","frame","hideAllLabels","showAllLabels","marginLeft","hideSelectedLabels","showSelectedLabels","stepSize","initialValue","labelStepSize","shapeOptionOpen","labelOptionOpen","SwitchCollapsable","marginTop","x1","y1","x2","y2","stopColor","stopOpacity","offset","x","y","pluralize","getRenderedNodes","RenderOptionsCard","animate","panel","Expander","optionsVisible","left","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","ELEVATION_2","paddingTop","paddingRight","paddingBottom","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.985496f1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default (item, { handleClick, isActive }) => (\r\n    <MenuItem\r\n        className={isActive ? Classes.ACTIVE : \"\"}\r\n        key={item}\r\n        onClick={handleClick}\r\n        text={item}\r\n    />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n    <Select\r\n        items={items}\r\n        itemRenderer={CommonItemRenderer}\r\n        filterable={false}\r\n        onItemSelect={onSelect}\r\n    >\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n    </Select>\r\n);\r\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import { observable, action, makeObservable } from \"mobx\";\r\n\r\nexport default class PreferencesStore {\r\n    preferenceDialogOpen = false;\r\n\r\n    darkMode = true;\r\n\r\n    statisticsDialogOpen = false;\r\n    helpDialogOpen = false;\r\n    neighborDialogOpen = false;\r\n    dataSheetDialogOpen = false;\r\n\r\n    isRenderOptionsCardHidden = true;\r\n\r\n    view = \"3D\";\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            preferenceDialogOpen: observable,\r\n            darkMode: observable,\r\n            statisticsDialogOpen: observable,\r\n            helpDialogOpen: observable,\r\n            neighborDialogOpen: observable,\r\n            dataSheetDialogOpen: observable,\r\n            isRenderOptionsCardHidden: observable,\r\n            view: observable,\r\n        });\r\n    }\r\n}\r\n","import { observable, computed, makeObservable } from \"mobx\";\r\nimport Graph from \"graphology\";\r\nimport * as graphology from \"graphology-types\";\r\n\r\n// interface Edge<Data = any> {\r\n//     id: LinkId,\r\n//     fromId: NodeId,\r\n//     toId: NodeId,\r\n//     data: Data\r\n// }\r\n\r\n// interface Node<Data = any> {\r\n//     id: NodeId,\r\n//     links: Link[],\r\n//     data: Data\r\n// }\r\n\r\nexport interface IHiddenOptions {\r\n    show: boolean;\r\n    cluster: string | null;\r\n}\r\n\r\nexport default class GraphStore {\r\n    initialGlobalConfig = {\r\n        nodes: {\r\n            colorBy: \"pagerank\",\r\n            color: {\r\n                scale: \"Linear Scale\",\r\n                from: \"#448AFF\",\r\n                to: \"#E91E63\",\r\n            },\r\n            sizeBy: \"pagerank\",\r\n            size: {\r\n                min: 2,\r\n                max: 10,\r\n                scale: \"Linear Scale\",\r\n            },\r\n            labelBy: \"node_id\",\r\n            shape: \"circle\",\r\n            labelSize: 1,\r\n            labelLength: 10,\r\n        },\r\n        edges: {\r\n            color: \"#7f7f7f\",\r\n        },\r\n    };\r\n\r\n    rawGraph: Graph = new Graph({\r\n        allowSelfLoops: true,\r\n        multi: false,\r\n        type: \"undirected\",\r\n    });\r\n\r\n    get adapterGraph() {\r\n        //interface from react-force-graph\r\n        interface Node {\r\n            id: string | number;\r\n            name: string | number;\r\n            val: number;\r\n        }\r\n\r\n        interface Edge {\r\n            source?: string | number;\r\n            target?: string | number;\r\n        }\r\n\r\n        let nodes: Node[] = [];\r\n        let links: Edge[] = [];\r\n\r\n        let tempGraph = {\r\n            nodes: nodes,\r\n            links: links,\r\n        };\r\n\r\n        let exportedGraph = this.rawGraph.export();\r\n        exportedGraph.nodes.forEach((node: graphology.SerializedNode) => {\r\n            if (!node.attributes?._options.show) return;\r\n            let thisNode: Node = {\r\n                id: node.key,\r\n                name: node.key,\r\n\r\n                // need be changed next\r\n                val: 1,\r\n            };\r\n            tempGraph.nodes.push(thisNode);\r\n        });\r\n\r\n        tempGraph.links = exportedGraph.edges;\r\n        return tempGraph;\r\n    }\r\n\r\n    get rawTable(): graphology.SerializedNode[] {\r\n        return this.rawGraph.export().nodes;\r\n    }\r\n\r\n    public hideNode(key: string) {\r\n        let originalOptions: IHiddenOptions = this.rawGraph.getNodeAttribute(\r\n            key,\r\n            \"_options\"\r\n        );\r\n        let newOptions: IHiddenOptions = {\r\n            ...originalOptions,\r\n            show: false,\r\n        };\r\n        this.rawGraph.setNodeAttribute(key, \"_options\", newOptions);\r\n    }\r\n\r\n    public showNode(key: string) {\r\n        let originalOptions: IHiddenOptions = this.rawGraph.getNodeAttribute(\r\n            key,\r\n            \"_options\"\r\n        );\r\n        let newOptions: IHiddenOptions = {\r\n            ...originalOptions,\r\n            show: true,\r\n        };\r\n        this.rawGraph.setNodeAttribute(key, \"_options\", newOptions);\r\n    }\r\n\r\n    nodes = this.initialGlobalConfig.nodes;\r\n    edges = this.initialGlobalConfig.edges;\r\n\r\n    enableDegree = true;\r\n    enableDensity = true;\r\n    enableDiameter = false;\r\n    enableCoefficient = true;\r\n    enableComponent = true;\r\n\r\n    // Updated by frame event\r\n    selectedNodes = [];\r\n\r\n    // Currently hovered node\r\n    currentlyHovered = undefined;\r\n\r\n    // Cache the single node that's been selected last time\r\n    // and will not update unless exactly one node is selected again\r\n    // useful for NeighborDialog\r\n    _lastSelectedSingleNode = null;\r\n\r\n    get hasGraph() {\r\n        return this.rawGraph.order && this.rawGraph.size != 0;\r\n    }\r\n\r\n    metadata = {\r\n        snapshotName: String,\r\n        numNodes: 0,\r\n        numEdges: 0,\r\n\r\n        // attributes of nodes in imported csv\r\n        nodeProperties: [],\r\n        edgeProperties: [],\r\n    };\r\n\r\n    // // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n    // get computedGraph() {\r\n    //     const graph = createGraph();\r\n    //     this.rawGraph.nodes.forEach((n) => {\r\n    //         // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n    //         if (n.isHidden) {\r\n    //             return;\r\n    //         }\r\n    //         const override = this.overrides.get(n.id.toString());\r\n    //         graph.addNode(n.id.toString(), {\r\n    //             label:\r\n    //                 (override && override.get(\"label\")) ||\r\n    //                 n[this.nodes.labelBy],\r\n    //             size:\r\n    //                 (override && override.get(\"size\")) ||\r\n    //                 this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n    //             color:\r\n    //                 (override && override.get(\"color\")) ||\r\n    //                 this.nodeColorScale(n[this.nodes.colorBy]),\r\n    //             shape:\r\n    //                 (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n    //             ref: n,\r\n    //         });\r\n    //     });\r\n\r\n    //     this.rawGraph.edges.forEach((e) => {\r\n    //         // If isHidden flag is defined and true on an associated node,\r\n    //         // leave out its related edges.\r\n    //         if (\r\n    //             graph.hasNode(e.source_id.toString()) &&\r\n    //             graph.hasNode(e.target_id.toString())\r\n    //         ) {\r\n    //             graph.addLink(e.source_id.toString(), e.target_id.toString());\r\n    //         }\r\n    //     });\r\n\r\n    //     return graph;\r\n    // }\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            rawGraph: observable,\r\n            adapterGraph: computed,\r\n            rawTable: computed,\r\n            initialGlobalConfig: observable,\r\n            hasGraph: computed,\r\n            nodes: observable,\r\n            edges: observable,\r\n            // computedGraph: computed,\r\n            enableDegree: observable,\r\n            enableDensity: observable,\r\n            enableDiameter: observable,\r\n            enableCoefficient: observable,\r\n            enableComponent: observable,\r\n            selectedNodes: observable,\r\n            currentlyHovered: observable,\r\n            _lastSelectedSingleNode: observable,\r\n            metadata: observable,\r\n            // _lastSelectedSingleNode: observable,\r\n        });\r\n    }\r\n}\r\n","import { Toaster, Position, Intent } from \"@blueprintjs/core\";\r\nimport { observable, makeObservable } from \"mobx\";\r\nimport Graph from \"graphology\";\r\nimport * as graphology from \"graphology-types\";\r\nimport gexf from \"graphology-gexf\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport { IHiddenOptions } from \"./GraphStore\";\r\n\r\nexport default class ImportStore {\r\n    // whether the graph is in importing\r\n    isLoading = false;\r\n    //name of the edge file\r\n    edgeFileName = \"Choose Edge File ...\";\r\n\r\n    //name of the node file\r\n    nodeFileName = \"Choose Node File ...\";\r\n\r\n    //name of the GEXF file\r\n    gexfFileName = \"Choose GEXF File ...\";\r\n\r\n    importCSVDialogOpen = false;\r\n    importGEXFDialogOpen = false;\r\n\r\n    // specific: File object selected via the file input.\r\n    selectedEdgeFileFromInput!: File;\r\n    selectedNodeFileFromInput!: File;\r\n\r\n    selectedGEXFFileFromInput!: File;\r\n\r\n    importConfig = {\r\n        hasNodeFile: false,\r\n        nodeFile: {\r\n            // the file is successfully parsed and ready for display\r\n            isReady: false,\r\n            parseError: false,\r\n            path: \"\",\r\n\r\n            // has header at the top\r\n            hasHeader: true,\r\n\r\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n            topN: [],\r\n            //names for the columns of this csv\r\n            columns: [],\r\n            mapping: {\r\n                id: \"Unknown\",\r\n                cluster: \"Unknown\",\r\n            },\r\n            delimiter: \",\",\r\n        },\r\n        edgeFile: {\r\n            isReady: false,\r\n            parseError: false,\r\n\r\n            // should save the csv to temp for further change the cluster attribute\r\n            path: \"\",\r\n            hasHeader: true,\r\n\r\n            // array of objects storing the\r\n            topN: [],\r\n            columns: [],\r\n            mapping: {\r\n                fromId: \"Unknown\",\r\n                toId: \"Unknown\",\r\n            },\r\n            delimiter: \",\",\r\n        },\r\n    };\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            isLoading: observable,\r\n            edgeFileName: observable,\r\n            nodeFileName: observable,\r\n            gexfFileName: observable,\r\n            importCSVDialogOpen: observable,\r\n            importGEXFDialogOpen: observable,\r\n            selectedEdgeFileFromInput: observable,\r\n            selectedNodeFileFromInput: observable,\r\n            selectedGEXFFileFromInput: observable,\r\n            importConfig: observable,\r\n        });\r\n    }\r\n\r\n    private async readCSV(\r\n        fileObject: File,\r\n        hasHeader: boolean,\r\n        delimiter: string\r\n    ): Promise<any[]> {\r\n        const file = fileObject;\r\n        const reader = new FileReader();\r\n        reader.readAsText(file);\r\n        return new Promise((resolve, reject) => {\r\n            reader.onload = () => {\r\n                let content: any = reader.result;\r\n                content = content.replace(/\\r\\n/g, \"\\n\");\r\n                content = content.replace(/\\r/g, \"\\n\");\r\n                try {\r\n                    if (hasHeader) {\r\n                        resolve(\r\n                            parse(content, {\r\n                                comment: \"#\",\r\n                                trim: true,\r\n                                auto_parse: true,\r\n                                skip_empty_lines: true,\r\n                                columns: hasHeader,\r\n                                delimiter,\r\n                            })\r\n                        );\r\n                    }\r\n                    resolve(\r\n                        parse(content, {\r\n                            comment: \"#\",\r\n                            trim: true,\r\n                            auto_parse: true,\r\n                            skip_empty_lines: true,\r\n                            columns: undefined,\r\n                            delimiter,\r\n                        })\r\n                    );\r\n                } catch (err) {\r\n                    Toaster.create({\r\n                        position: Position.TOP,\r\n                    }).show({\r\n                        message: \"Error: \" + err.message,\r\n                        intent: Intent.DANGER,\r\n                        timeout: -1,\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    private async readGEXF(): Promise<Graph> {\r\n        const file = this.selectedGEXFFileFromInput;\r\n        const reader = new FileReader();\r\n        reader.readAsText(file);\r\n        return new Promise((resolve, reject) => {\r\n            reader.onload = () => {\r\n                try {\r\n                    resolve(gexf.parse(Graph, <string>reader.result));\r\n                } catch (err) {\r\n                    Toaster.create({\r\n                        position: Position.TOP,\r\n                    }).show({\r\n                        message: \"Error: \" + err.message,\r\n                        intent: Intent.DANGER,\r\n                        timeout: -1,\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public readEdgeCSV(): Promise<any[]> {\r\n        return this.readCSV(\r\n            this.selectedEdgeFileFromInput,\r\n            this.importConfig.edgeFile.hasHeader,\r\n            this.importConfig.edgeFile.delimiter\r\n        );\r\n    }\r\n\r\n    public readNodeCSV(): Promise<any[]> {\r\n        return this.readCSV(\r\n            this.selectedNodeFileFromInput,\r\n            this.importConfig.nodeFile.hasHeader,\r\n            this.importConfig.nodeFile.delimiter\r\n        );\r\n    }\r\n\r\n    public async importGraphFromCSV() {\r\n        const config = this.importConfig;\r\n\r\n        // the CSV lib we use uses int index when there's not header/column names specified\r\n        const fromColumn = config.edgeFile.hasHeader\r\n            ? config.edgeFile.mapping.fromId\r\n            : parseInt(config.edgeFile.mapping.fromId);\r\n        const toColumn = config.edgeFile.hasHeader\r\n            ? config.edgeFile.mapping.toId\r\n            : parseInt(config.edgeFile.mapping.toId);\r\n\r\n        let tempNodes: any[] = [];\r\n        let tempEdges: any[] = [];\r\n\r\n        const graph = new Graph({\r\n            allowSelfLoops: true,\r\n            multi: false,\r\n            type: \"undirected\",\r\n        });\r\n\r\n        // parse Node file and store into the Graph DS\r\n        if (config.hasNodeFile) {\r\n            tempNodes = await this.readNodeCSV();\r\n            tempNodes.forEach((node) => {\r\n                let options: IHiddenOptions = {\r\n                    show: true,\r\n                    cluster: node[config.nodeFile.mapping.cluster].toString(),\r\n                };\r\n                node._options = options;\r\n                graph.addNode(\r\n                    node[config.nodeFile.mapping.id].toString(),\r\n                    node\r\n                );\r\n            });\r\n        }\r\n\r\n        // parse Edge file and store into the Graph DS\r\n        tempEdges = await this.readEdgeCSV();\r\n        tempEdges.forEach((edge) => {\r\n            let fromId = edge[fromColumn].toString();\r\n            let toId = edge[toColumn].toString();\r\n\r\n            if (!graph.hasNode(fromId)) {\r\n                let options: IHiddenOptions = {\r\n                    show: true,\r\n                    cluster: null,\r\n                };\r\n                let data = { id: fromId, _options: options };\r\n                graph.addNode(fromId, data);\r\n            }\r\n            if (!graph.hasNode(toId)) {\r\n                let options: IHiddenOptions = {\r\n                    show: true,\r\n                    cluster: null,\r\n                };\r\n                let data = { id: toId, _options: options };\r\n                graph.addNode(toId, data);\r\n            }\r\n            graph.addEdge(fromId, toId);\r\n        });\r\n\r\n        config.edgeFile.isReady = true;\r\n\r\n        let nodeProperties = config.hasNodeFile\r\n            ? Object.keys(tempNodes[0])\r\n            : [\"id\"];\r\n\r\n        return {\r\n            graph: graph,\r\n            metadata: {\r\n                snapshotName: \"Untitled\",\r\n                nodeProperties: nodeProperties,\r\n                clusterProperties: config.hasNodeFile\r\n                    ? null\r\n                    : config.nodeFile.mapping.cluster,\r\n                edgeProperties: [\"source_id\", \"target_id\"],\r\n            },\r\n        };\r\n    }\r\n\r\n    //TODO:import 里的id和cluster， source target还没设置\r\n    public async importGraphFromGEXF() {\r\n        let graph = await this.readGEXF();\r\n        // add _options to Graph, if missing\r\n        graph.forEachNode((key: string, attribute: object) => {\r\n            if (attribute.hasOwnProperty(\"_options\")) {\r\n                return;\r\n            }\r\n            let options: IHiddenOptions = {\r\n                show: true,\r\n                cluster: null,\r\n            };\r\n            graph.setNodeAttribute(key, \"_options\", options);\r\n        });\r\n\r\n        let nodeProperties: string[] = [];\r\n\r\n        for (const [key, value] of Object.entries(\r\n            graph.getNodeAttributes(graph.nodes()[0])\r\n        )) {\r\n            nodeProperties.push(key);\r\n        }\r\n\r\n        return {\r\n            graph: graph,\r\n            metadata: {\r\n                snapshotName: \"Untitled\",\r\n                nodeProperties: nodeProperties,\r\n                clusterProperties: null,\r\n                edgeProperties: [\"source_id\", \"target_id\"],\r\n            },\r\n        };\r\n    }\r\n\r\n    public renderImportGEXFPreview(): void {}\r\n\r\n    public renderImportEdgePreview(): void {\r\n        let file = this.selectedEdgeFileFromInput;\r\n        let edgeFileConfig = this.importConfig.edgeFile;\r\n        let hasHeader = edgeFileConfig.hasHeader;\r\n        let delimiter = edgeFileConfig.delimiter;\r\n\r\n        edgeFileConfig.parseError = false;\r\n\r\n        if (!file) {\r\n            return;\r\n        }\r\n        const reader = new FileReader();\r\n        reader.readAsText(file);\r\n\r\n        reader.onload = () => {\r\n            // Read entire CSV into memory as string\r\n            let fileAsString = <string>reader.result;\r\n\r\n            // if the file is not regularly formatted, replace the EOL character\r\n            fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\r\n            fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\r\n\r\n            // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\r\n            const lines = fileAsString.split(\"\\n\");\r\n            const topLinesAsString = lines\r\n                .map((l) => l.trim())\r\n                .slice(0, lines.length < 10 ? lines.length : 10)\r\n                .join(\"\\n\");\r\n            console.log(topLinesAsString);\r\n\r\n            // Parse the top lines\r\n            try {\r\n                const it = hasHeader\r\n                    ? parse(topLinesAsString, {\r\n                          comment: \"#\",\r\n                          trim: true,\r\n                          auto_parse: true,\r\n                          skip_empty_lines: true,\r\n                          columns: hasHeader,\r\n                          delimiter: delimiter,\r\n                      })\r\n                    : parse(topLinesAsString, {\r\n                          comment: \"#\",\r\n                          trim: true,\r\n                          auto_parse: true,\r\n                          skip_empty_lines: true,\r\n                          columns: undefined,\r\n                          delimiter: delimiter,\r\n                      });\r\n                edgeFileConfig.topN = it;\r\n                edgeFileConfig.columns = <any>(\r\n                    Object.keys(it[0]).map((key) => `${key}`)\r\n                );\r\n\r\n                // if there exists two or more columns in the parsed edge file\r\n                if (edgeFileConfig.columns.length >= 2) {\r\n                    edgeFileConfig.mapping.fromId = edgeFileConfig.columns[0];\r\n                    edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\r\n                    edgeFileConfig.isReady = true;\r\n                } else if (edgeFileConfig.columns.length == 1) {\r\n                    edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\r\n                        edgeFileConfig.columns[0];\r\n                    edgeFileConfig.isReady = true;\r\n                } else {\r\n                    Toaster.create({\r\n                        position: Position.TOP,\r\n                    }).show({\r\n                        message: \"Error: Fails to parse file\",\r\n                        intent: Intent.DANGER,\r\n                        timeout: -1,\r\n                    });\r\n                    edgeFileConfig.parseError = true;\r\n                }\r\n            } catch {\r\n                Toaster.create({\r\n                    position: Position.TOP,\r\n                }).show({\r\n                    message: \"Error: Fails to parse file\",\r\n                    intent: Intent.DANGER,\r\n                    timeout: -1,\r\n                });\r\n                edgeFileConfig.parseError = true;\r\n            }\r\n        };\r\n\r\n        reader.onerror = () => {\r\n            console.error(reader.error);\r\n            Toaster.create({\r\n                position: Position.TOP,\r\n            }).show({\r\n                action: {\r\n                    onClick: () => window.location.reload(),\r\n                    text: \"Refresh Page\",\r\n                },\r\n                message: \"Error: Fails to open file\",\r\n                intent: Intent.DANGER,\r\n                timeout: -1,\r\n            });\r\n        };\r\n    }\r\n\r\n    public renderImportNodePreview(): void {\r\n        let file = this.selectedNodeFileFromInput;\r\n        let nodeFileConfig = this.importConfig.nodeFile;\r\n        let hasHeader = nodeFileConfig.hasHeader;\r\n        let delimiter = nodeFileConfig.delimiter;\r\n\r\n        nodeFileConfig.parseError = false;\r\n\r\n        if (!file) {\r\n            return;\r\n        }\r\n        const reader = new FileReader();\r\n        reader.readAsText(file);\r\n\r\n        reader.onload = () => {\r\n            // Read entire CSV into memory as string\r\n            let fileAsString = <string>reader.result;\r\n\r\n            // if the file is not regularly formatted, replace the EOL character\r\n            fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\r\n            fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\r\n\r\n            // Get top 10 lines. Or if there's less than 10 line, get all the lines.\r\n            const lines = fileAsString.split(\"\\n\");\r\n            const topLinesAsString = lines\r\n                .map((l) => l.trim())\r\n                .slice(0, lines.length < 10 ? lines.length : 10)\r\n                .join(\"\\n\");\r\n            console.log(topLinesAsString);\r\n\r\n            // Parse the top lines\r\n            try {\r\n                const it = hasHeader\r\n                    ? parse(topLinesAsString, {\r\n                          comment: \"#\",\r\n                          trim: true,\r\n                          auto_parse: true,\r\n                          skip_empty_lines: true,\r\n                          columns: hasHeader,\r\n                          delimiter,\r\n                      })\r\n                    : parse(topLinesAsString, {\r\n                          comment: \"#\",\r\n                          trim: true,\r\n                          auto_parse: true,\r\n                          skip_empty_lines: true,\r\n                          columns: undefined,\r\n                          delimiter,\r\n                      });\r\n                nodeFileConfig.topN = it;\r\n                nodeFileConfig.columns = <any>(\r\n                    Object.keys(it[0]).map((key) => `${key}`)\r\n                );\r\n\r\n                // if there exists two or more columns in the parsed edge file\r\n                if (nodeFileConfig.columns.length >= 2) {\r\n                    nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\r\n                    nodeFileConfig.mapping.cluster = nodeFileConfig.columns[1];\r\n                    nodeFileConfig.isReady = true;\r\n                } else if (nodeFileConfig.columns.length == 1) {\r\n                    nodeFileConfig.mapping.id = nodeFileConfig.mapping.cluster =\r\n                        nodeFileConfig.columns[0];\r\n                    nodeFileConfig.isReady = true;\r\n                } else {\r\n                    Toaster.create({\r\n                        position: Position.TOP,\r\n                    }).show({\r\n                        message: \"Error: Fails to parse file\",\r\n                        intent: Intent.DANGER,\r\n                        timeout: -1,\r\n                    });\r\n                    nodeFileConfig.parseError = true;\r\n                }\r\n            } catch {\r\n                Toaster.create({\r\n                    position: Position.TOP,\r\n                }).show({\r\n                    message: \"Error: Fails to parse file\",\r\n                    intent: Intent.DANGER,\r\n                    timeout: -1,\r\n                });\r\n                nodeFileConfig.parseError = true;\r\n            }\r\n        };\r\n\r\n        reader.onerror = () => {\r\n            console.error(reader.error);\r\n            Toaster.create({\r\n                position: Position.TOP,\r\n            }).show({\r\n                action: {\r\n                    onClick: () => window.location.reload(),\r\n                    text: \"Refresh Page\",\r\n                },\r\n                message: \"Error: Fails to open file\",\r\n                intent: Intent.DANGER,\r\n                timeout: -1,\r\n            });\r\n        };\r\n    }\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n    currentSnapshotName = \"Untitled\";\r\n\r\n    saveSnapshotDialogOpen = false;\r\n    renameSnapshotDialogOpen = false;\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n    searchPaneOpen = false;\r\n\r\n    searchStr = \"\";\r\n    candidates = [];\r\n    numCandidates = 0;\r\n    panelOpen=true;//test for ui panels\r\n}\r\n","import { autorun, runInAction, observable, makeObservable } from \"mobx\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\nimport SearchStore from \"./SearchStore\";\r\n\r\nclass AppState {\r\n    constructor() {\r\n        this.preferences = new PreferencesStore();\r\n        this.graph = new GraphStore();\r\n        this.import = new ImportStore();\r\n        this.search = new SearchStore();\r\n        this.project = new ProjectStore();\r\n    }\r\n\r\n    preferences: PreferencesStore;\r\n    graph: GraphStore;\r\n    import: ImportStore;\r\n    search: SearchStore;\r\n    project: ProjectStore;\r\n}\r\n\r\nconst State = new AppState();\r\n\r\n// extract CSV from selected edge File object and update related fields.\r\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\r\nautorun(() => State.import.renderImportEdgePreview());\r\n\r\n// extract CSV from selected node File object and update related fields.\r\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\r\nautorun(() => State.import.renderImportNodePreview());\r\n\r\nexport default State;\r\n","export const GITHUB_URL = \"\";\r\n\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n    [\r\n        \"Les Miserables\",\r\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\r\n    ],\r\n    [\"covid19-06022020\"],\r\n    // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n];\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n","import React from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    InputGroup,\r\n    Intent,\r\n    Position,\r\n    Tooltip,\r\n    Popover,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDivider,\r\n} from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport logo from \"../images/logo.png\";\r\nimport State from \"../state\";\r\n\r\nimport { GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from \"../constants\";\r\n\r\nexport default observer(\r\n    class Navbar extends React.Component {\r\n        render() {\r\n            return (\r\n                <nav className={classnames([Classes.NAVBAR])}>\r\n                    <div\r\n                        className={classnames([\r\n                            Classes.NAVBAR_GROUP,\r\n                            Classes.ALIGN_LEFT,\r\n                        ])}\r\n                    >\r\n                        <img\r\n                            title=\"PiperNet\"\r\n                            id=\"PiperNet Logo\"\r\n                            src={logo}\r\n                            width=\"35\"\r\n                            height=\"35\"\r\n                        ></img>\r\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\r\n                            {\" \"}\r\n                            PiperNet{\" \"}\r\n                        </div>\r\n\r\n                        <Popover\r\n                            content={\r\n                                <Menu>\r\n                                    <MenuItem text=\"Load Sample\" icon=\"graph\">\r\n                                        {SAMPLE_GRAPH_SNAPSHOTS.map(\r\n                                            (sample) => {\r\n                                                const sampleSnapshotTitle =\r\n                                                    sample[0];\r\n                                                const sampleSnapshotString =\r\n                                                    sample[1];\r\n\r\n                                                return (\r\n                                                    <MenuItem\r\n                                                        icon=\"graph\"\r\n                                                        text={\r\n                                                            sampleSnapshotTitle\r\n                                                        }\r\n                                                        onClick={() => {\r\n                                                            State.import.importConfig.edgeFile.mapping.fromId =\r\n                                                                \"source\";\r\n                                                            State.import.importConfig.edgeFile.mapping.toId =\r\n                                                                \"target\";\r\n                                                            State.import.selectedEdgeFileFromInput = new Blob(\r\n                                                                [\r\n                                                                    sampleSnapshotString,\r\n                                                                ],\r\n                                                                {\r\n                                                                    type:\r\n                                                                        \"text/csv\",\r\n                                                                }\r\n                                                            );\r\n                                                            let graph = State.import.importGraphFromCSV();\r\n                                                            State.graph.rawGraph =\r\n                                                                graph.graph;\r\n                                                            State.graph.metadata =\r\n                                                                graph.metadata;\r\n                                                        }}\r\n                                                    />\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </MenuItem>\r\n                                    <MenuDivider />\r\n                                    <MenuItem\r\n                                        icon=\"import\"\r\n                                        text=\"Import from CSV...\"\r\n                                        onClick={() => {\r\n                                            State.import.importCSVDialogOpen = true;\r\n                                        }}\r\n                                    />\r\n                                    <MenuItem\r\n                                        icon=\"import\"\r\n                                        text=\"Import from GEXF...\"\r\n                                        onClick={() => {\r\n                                            State.import.importGEXFDialogOpen = true;\r\n                                        }}\r\n                                    />\r\n                                    <MenuItem\r\n                                        icon=\"document-open\"\r\n                                        text=\"Open Snapshot\"\r\n                                        onClick={() => {\r\n                                            State.preferences.preferenceDialogOpen = true;\r\n                                        }}\r\n                                    />\r\n                                    <MenuDivider />\r\n                                    <MenuItem\r\n                                        icon=\"download\"\r\n                                        text=\"Save Snapshot\"\r\n                                        onClick={() => {\r\n                                            State.project.saveSnapshotDialogOpen = true;\r\n                                        }}\r\n                                    />\r\n                                </Menu>\r\n                            }\r\n                            position={Position.BOTTOM}\r\n                        >\r\n                            <Button\r\n                                className={classnames([\r\n                                    Classes.BUTTON,\r\n                                    Classes.MINIMAL,\r\n                                ])}\r\n                                icon=\"document\"\r\n                            >\r\n                                Graph\r\n                            </Button>\r\n                        </Popover>\r\n                        <Popover\r\n                            content={\r\n                                <Menu>\r\n                                    <MenuItem\r\n                                        text=\"Data Sheet\"\r\n                                        icon=\"database\"\r\n                                        onClick={() => {\r\n                                            // State.graph.frame.pauseLayout();\r\n                                            State.preferences.dataSheetDialogOpen = true;\r\n                                        }}\r\n                                    />\r\n                                    <MenuItem\r\n                                        text=\"Statistics\"\r\n                                        icon=\"timeline-bar-chart\"\r\n                                        onClick={() => {\r\n                                            State.preferences.statisticsDialogOpen = true;\r\n                                        }}\r\n                                    />\r\n                                </Menu>\r\n                            }\r\n                            position={Position.BOTTOM}\r\n                        >\r\n                            <Button\r\n                                className={classnames([\r\n                                    Classes.BUTTON,\r\n                                    Classes.MINIMAL,\r\n                                ])}\r\n                                icon=\"wrench\"\r\n                            >\r\n                                Tools\r\n                            </Button>\r\n                        </Popover>\r\n                    </div>\r\n                    {/* <div\r\n                    className={classnames([\r\n                        Classes.NAVBAR_GROUP,\r\n                        Classes.ALIGN_LEFT,\r\n                    ])}\r\n                >\r\n                    <span className={Classes.NAVBAR_DIVIDER} />\r\n                    {appState.graph.hasGraph && appState.graph.frame && (\r\n                        <div style={{ display: \"inline\" }}>\r\n                            <Tooltip\r\n                                content={\r\n                                    appState.graph.frame.paused\r\n                                        ? \"Resume Layout Algorithm\"\r\n                                        : \"Pause Layout Algorithm\"\r\n                                }\r\n                                position={Position.BOTTOM}\r\n                            >\r\n                                <Button\r\n                                    className={classnames([\r\n                                        Classes.BUTTON,\r\n                                        Classes.MINIMAL,\r\n                                    ])}\r\n                                    icon={\r\n                                        appState.graph.frame.paused\r\n                                            ? \"play\"\r\n                                            : \"pause\"\r\n                                    }\r\n                                    text={\r\n                                        appState.graph.frame.paused\r\n                                            ? \"Resume Layout\"\r\n                                            : \"Pause Layout\"\r\n                                    }\r\n                                    onClick={() => {\r\n                                        if (appState.graph.frame.paused) {\r\n                                            appState.graph.frame.resumeLayout();\r\n                                            this.forceUpdate();\r\n                                        } else {\r\n                                            appState.graph.frame.pauseLayout();\r\n                                            this.forceUpdate();\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </Tooltip>\r\n                        </div>\r\n                    )}\r\n                </div> */}\r\n                    <SimpleSelect\r\n                        className={classnames([Classes.ALERT_CONTENTS])}\r\n                        items={[\"3D\", \"2D\"]}\r\n                        value={State.preferences.view}\r\n                        onSelect={(it) => (State.preferences.view = it)}\r\n                    />\r\n                    <div\r\n                        className={classnames([\r\n                            Classes.NAVBAR_GROUP,\r\n                            Classes.ALIGN_RIGHT,\r\n                        ])}\r\n                    >\r\n                        <Button\r\n                            className={classnames([\r\n                                Classes.BUTTON,\r\n                                Classes.MINIMAL,\r\n                            ])}\r\n                            icon=\"graph\"\r\n                            onClick={() => {\r\n                                State.project.renameSnapshotDialogOpen = true;\r\n                            }}\r\n                        >\r\n                            {State.graph.metadata.snapshotName}\r\n                        </Button>\r\n                        <span className={Classes.NAVBAR_DIVIDER} />\r\n                        <Button\r\n                            className={classnames([\r\n                                Classes.BUTTON,\r\n                                Classes.MINIMAL,\r\n                            ])}\r\n                            icon=\"cog\"\r\n                            onClick={() => {\r\n                                State.preferences.dialogOpen = true;\r\n                            }}\r\n                        />\r\n                        <Button\r\n                            className={classnames([\r\n                                Classes.BUTTON,\r\n                                Classes.MINIMAL,\r\n                            ])}\r\n                            icon=\"help\"\r\n                            onClick={() => {\r\n                                State.preferences.helpDialogOpen = true;\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </nav>\r\n            );\r\n        }\r\n    }\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Collapse, Card, Elevation } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n    <Card elevation={Elevation.THREE}>\r\n        <Button\r\n            className={classnames(\r\n                Classes.LARGE,\r\n                Classes.FILL,\r\n                \"text-align-left\"\r\n            )}\r\n            rightIcon={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n            onClick={onToggle}\r\n        >\r\n            {name}\r\n        </Button>\r\n        <Collapse isOpen={isOpen}>{children}</Collapse>\r\n    </Card>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Dialog,\r\n    Intent,\r\n    Spinner,\r\n    Switch,\r\n    Divider,\r\n    FileInput,\r\n    Alert,\r\n    Callout,\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport State from \"../state\";\r\n\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\n\r\nlet PreviewTable = observer(\r\n    class PreviewTable extends React.Component {\r\n        file = this.props.file;\r\n\r\n        renderWrapper = () => {\r\n            return this.file.parseError ? (\r\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\r\n                    Try with other options of <code>Delimiter</code> or review\r\n                    the file for import to find possible problems.\r\n                </Callout>\r\n            ) : (\r\n                <Table\r\n                    className=\"import-preview-table\"\r\n                    numRows={this.file.topN.length}\r\n                    selectedRegions={Object.values(this.file.mapping)\r\n                        .map((it) => this.file.columns.indexOf(it))\r\n                        .map((it) => ({ rows: null, cols: [it, it] }))}\r\n                >\r\n                    {this.file.columns.map((it) => (\r\n                        <Column\r\n                            key={it}\r\n                            name={it}\r\n                            cellRenderer={(i) => (\r\n                                <Cell>{this.file.topN[i][it]}</Cell>\r\n                            )}\r\n                        />\r\n                    ))}\r\n                </Table>\r\n            );\r\n        };\r\n\r\n        render() {\r\n            return this.renderWrapper();\r\n        }\r\n    }\r\n);\r\n\r\nexport default observer(\r\n    class ImportDialog extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                available: ONLY_EDGE_FILE,\r\n                nodesOpen: true,\r\n                edgesOpen: true,\r\n                delimiter: \",\",\r\n            };\r\n        }\r\n\r\n        // determine if this state is importable\r\n        canImport = () => {\r\n            if (this.state.available === NODE_AND_EDGE_FILE) {\r\n                return (\r\n                    State.import.importConfig.edgeFile.isReady &&\r\n                    State.import.importConfig.nodeFile.isReady\r\n                );\r\n            } else if (this.state.available === ONLY_EDGE_FILE) {\r\n                return State.import.importConfig.edgeFile.isReady;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        renderNodesSelection = () => {\r\n            const nodeFile = State.import.importConfig.nodeFile;\r\n\r\n            // if file not imported, show blank\r\n            if (this.state.available === ONLY_EDGE_FILE) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <Collapsable\r\n                    name=\"Nodes\"\r\n                    isOpen={this.state.nodesOpen}\r\n                    onToggle={() =>\r\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\r\n                    }\r\n                >\r\n                    <br />\r\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                        <div\r\n                            className={classnames(\r\n                                Classes.INPUT_GROUP,\r\n                                Classes.FILL\r\n                            )}\r\n                        >\r\n                            <FileInput\r\n                                text={State.import.nodeFileName}\r\n                                onInputChange={(event) => {\r\n                                    if (event.target.files.length < 1) {\r\n                                        return;\r\n                                    }\r\n                                    State.import.nodeFileName =\r\n                                        event.target.files[0].name;\r\n                                    // after setting the selectedNodeFileFromInput, other attributes will update automatically\r\n                                    State.import.selectedNodeFileFromInput =\r\n                                        event.target.files[0];\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <Switch\r\n                        label=\"Has Headers\"\r\n                        checked={nodeFile.hasHeader}\r\n                        onChange={() =>\r\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\r\n                        }\r\n                    />\r\n                    {nodeFile.isReady && (\r\n                        <div className=\"column-selection\">\r\n                            <PreviewTable file={nodeFile} />\r\n                            <br />\r\n                            Column for Node ID:\r\n                            <SimpleSelect\r\n                                items={nodeFile.columns}\r\n                                value={nodeFile.mapping.id}\r\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\r\n                            />\r\n                            <br />\r\n                            Column for Attribute for Cluster:\r\n                            <SimpleSelect\r\n                                items={nodeFile.columns}\r\n                                value={nodeFile.mapping.cluster}\r\n                                onSelect={(it) =>\r\n                                    (nodeFile.mapping.cluster = it)\r\n                                }\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </Collapsable>\r\n            );\r\n        };\r\n\r\n        renderEdgesSelection = () => {\r\n            const edgeFile = State.import.importConfig.edgeFile;\r\n            return (\r\n                <Collapsable\r\n                    name=\"Edges\"\r\n                    isOpen={this.state.edgesOpen}\r\n                    onToggle={() =>\r\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\r\n                    }\r\n                >\r\n                    <br />\r\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                        <div\r\n                            className={classnames(\r\n                                Classes.INPUT_GROUP,\r\n                                Classes.FILL\r\n                            )}\r\n                        >\r\n                            <FileInput\r\n                                text={State.import.edgeFileName}\r\n                                onInputChange={(event) => {\r\n                                    if (event.target.files.length < 1) {\r\n                                        return;\r\n                                    }\r\n                                    State.import.edgeFileName =\r\n                                        event.target.files[0].name;\r\n                                    State.import.selectedEdgeFileFromInput =\r\n                                        event.target.files[0];\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <Switch\r\n                        label=\"Has Headers\"\r\n                        checked={edgeFile.hasHeader}\r\n                        onChange={() =>\r\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\r\n                        }\r\n                    />\r\n                    {edgeFile.isReady && (\r\n                        <div className=\"column-selection\">\r\n                            <PreviewTable file={edgeFile} />\r\n                            <br />\r\n                            Column for Source ID:\r\n                            <SimpleSelect\r\n                                items={edgeFile.columns}\r\n                                value={edgeFile.mapping.fromId}\r\n                                onSelect={(it) =>\r\n                                    (edgeFile.mapping.fromId = it)\r\n                                }\r\n                            />{\" \"}\r\n                            <br />\r\n                            Column for Target ID:\r\n                            <SimpleSelect\r\n                                items={edgeFile.columns}\r\n                                value={edgeFile.mapping.toId}\r\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </Collapsable>\r\n            );\r\n        };\r\n\r\n        renderDelimiterSelection() {\r\n            return (\r\n                <div className=\"column-selection\">\r\n                    Selected Delimiter\r\n                    <SimpleSelect\r\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\r\n                        value={this.state.delimiter}\r\n                        onSelect={(newDelimiter) => {\r\n                            this.setState({ delimiter: newDelimiter });\r\n\r\n                            if (newDelimiter == \"\\\\t\") {\r\n                                newDelimiter = \"\\t\";\r\n                            } else if (newDelimiter == \"[SPACE]\") {\r\n                                newDelimiter = \" \";\r\n                            }\r\n\r\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\r\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\r\n                        }}\r\n                    />{\" \"}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Dialog\r\n                    style={{ minWidth: \"80vw\" }}\r\n                    iconName=\"import\"\r\n                    className={classnames({\r\n                        [Classes.DARK]: State.preferences.darkMode,\r\n                    })}\r\n                    isOpen={State.import.importCSVDialogOpen}\r\n                    onClose={() => {\r\n                        State.import.importCSVDialogOpen = false;\r\n                    }}\r\n                    title=\"Import CSV\"\r\n                >\r\n                    {/* if is loading, then show Spinner */}\r\n                    {State.import.isLoading ? (\r\n                        <Spinner />\r\n                    ) : (\r\n                        <div>\r\n                            <div\r\n                                className={classnames(\r\n                                    Classes.DIALOG_BODY,\r\n                                    \"import-dialog\"\r\n                                )}\r\n                            >\r\n                                I have:\r\n                                <SimpleSelect\r\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\r\n                                    value={this.state.available}\r\n                                    onSelect={(targetValue) => {\r\n                                        State.import.importConfig.hasNodeFile = !(\r\n                                            targetValue === ONLY_EDGE_FILE\r\n                                        );\r\n                                        this.setState({\r\n                                            available: targetValue,\r\n                                        });\r\n                                    }}\r\n                                />\r\n                                <Divider />\r\n                                {this.renderNodesSelection()}\r\n                                <br />\r\n                                {this.renderEdgesSelection()}\r\n                                <br />\r\n                                {this.renderDelimiterSelection()}\r\n                            </div>\r\n                            <div className={Classes.DIALOG_FOOTER}>\r\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                                    <Button\r\n                                        className={classnames({\r\n                                            [Classes.DISABLED]: !this.canImport(),\r\n                                        })}\r\n                                        intent={Intent.PRIMARY}\r\n                                        onClick={() => {\r\n                                            // requestCreateNewProject({\r\n                                            //     name: State.project.newProjectName,\r\n                                            //     createdDate: new Date().toLocaleString(),\r\n                                            // });\r\n                                            State.import.isLoading = true;\r\n                                            State.import\r\n                                                .importGraphFromCSV()\r\n                                                .then((res) => {\r\n                                                    State.graph.rawGraph =\r\n                                                        res.graph;\r\n                                                    State.graph.metadata =\r\n                                                        res.metadata;\r\n\r\n                                                    // runInAction(\r\n                                                    //     \"load imported graph\",\r\n                                                    //     () => {\r\n                                                    //         appState.graph.rawGraph =\r\n                                                    //             graph.rawGraph;\r\n                                                    //         appState.graph.metadata =\r\n                                                    //             graph.metadata;\r\n                                                    //         appState.graph.setUpFrame();\r\n                                                    //     }\r\n                                                    // );\r\n                                                    // // Reinitialize global configs\r\n                                                    // appState.graph.nodes =\r\n                                                    //     appState.graph.initialGlobalConfig.nodes;\r\n                                                    // appState.graph.overrides = new Map();\r\n\r\n                                                    State.import.isLoading = false;\r\n                                                    State.import.importCSVDialogOpen = false;\r\n\r\n                                                    // // Newly imported graph shouldn't have label showing\r\n                                                    // appState.graph.frame.turnOffLabelCSSRenderer();\r\n                                                });\r\n                                        }}\r\n                                        text=\"Import\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Dialog>\r\n            );\r\n        }\r\n    }\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Dialog,\r\n    Intent,\r\n    Spinner,\r\n    FileInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport State from \"../state\";\r\n\r\nexport default observer(\r\n    class GEXFImportDialog extends React.Component {\r\n        state = {\r\n            fileIsSelect: false,\r\n        };\r\n\r\n        renderImportButton() {\r\n            return (\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        <Button\r\n                            className={classnames({\r\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\r\n                            })}\r\n                            intent={Intent.PRIMARY}\r\n                            onClick={() => {\r\n                                State.import.isLoading = true;\r\n                                State.import\r\n                                    .importGraphFromGEXF()\r\n                                    .then((res) => {\r\n                                        State.graph.rawGraph = res.graph;\r\n                                        State.graph.metadata = res.metadata;\r\n\r\n                                        State.import.isLoading = false;\r\n                                        State.import.importGEXFDialogOpen = false;\r\n                                    });\r\n                            }}\r\n                            text=\"Import\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Dialog\r\n                    iconName=\"import\"\r\n                    className={classnames({\r\n                        [Classes.DARK]: State.preferences.darkMode,\r\n                    })}\r\n                    isOpen={State.import.importGEXFDialogOpen}\r\n                    onClose={() => {\r\n                        State.import.importGEXFDialogOpen = false;\r\n                    }}\r\n                    title=\"Import GEXF\"\r\n                >\r\n                    {/* if is loading, then show Spinner */}\r\n                    {State.import.isLoading ? (\r\n                        <Spinner />\r\n                    ) : (\r\n                        <div\r\n                            className={classnames(\r\n                                Classes.DIALOG_BODY,\r\n                                \"import-dialog\"\r\n                            )}\r\n                        >\r\n                            <div>\r\n                                <div\r\n                                    className={classnames(\r\n                                        Classes.CONTROL_GROUP\r\n                                    )}\r\n                                >\r\n                                    <div\r\n                                        className={classnames(\r\n                                            Classes.INPUT_GROUP,\r\n                                            Classes.FILL\r\n                                        )}\r\n                                    >\r\n                                        <FileInput\r\n                                            text={State.import.gexfFileName}\r\n                                            onInputChange={(event) => {\r\n                                                if (\r\n                                                    event.target.files.length <\r\n                                                    1\r\n                                                ) {\r\n                                                    return;\r\n                                                }\r\n                                                State.import.gexfFileName =\r\n                                                    event.target.files[0].name;\r\n                                                State.import.selectedGEXFFileFromInput =\r\n                                                    event.target.files[0];\r\n                                                this.setState({\r\n                                                    fileIsSelect: true,\r\n                                                });\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {this.renderImportButton()}\r\n                        </div>\r\n                    )}\r\n                </Dialog>\r\n            );\r\n        }\r\n    }\r\n);\r\n","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Dialog,\r\n    Intent,\r\n    Switch,\r\n    ButtonGroup,\r\n    Card,\r\n    Elevation,\r\n} from \"@blueprintjs/core\";\r\nimport { Column, Table, Cell } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport State from \"../state\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\nexport default observer(\r\n    class GraphTable extends React.Component {\r\n        state = {\r\n            sortBy: \"None\",\r\n            sortOrder: \"Descending\", // or 'Ascending'\r\n        };\r\n\r\n        rawGraph = State.graph.rawGraph;\r\n        rawTable = State.graph.rawTable;\r\n        nodeProperties = State.graph.metadata.nodeProperties;\r\n\r\n        showRenderer = (rowIndex) => {\r\n            let node = this.rawTable[rowIndex];\r\n\r\n            return (\r\n                <Cell>\r\n                    <Switch\r\n                        checked={node.attributes._options.show}\r\n                        onChange={() => {\r\n                            node.attributes._options.show\r\n                                ? State.graph.hideNode(node.key)\r\n                                : State.graph.showNode(node.key);\r\n                            this.forceUpdate();\r\n                        }}\r\n                    />\r\n                </Cell>\r\n            );\r\n        };\r\n\r\n        renderColumns = () => {\r\n            const columns = this.nodeProperties.map((it, i) => {\r\n                if (it != \"_options\") {\r\n                    return (\r\n                        <Column\r\n                            name={it}\r\n                            cellRenderer={(rowIndex, columnIndex) => {\r\n                                let attribute = this.nodeProperties[\r\n                                    columnIndex - 2\r\n                                ];\r\n                                let cellAttributes = this.rawTable[rowIndex]\r\n                                    .attributes;\r\n                                let cell = cellAttributes[attribute];\r\n                                return <Cell>{cell}</Cell>;\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            });\r\n            return columns.filter((element) => {\r\n                return element != undefined;\r\n            });\r\n        };\r\n\r\n        render() {\r\n            return (\r\n                <div className=\"argo-table-container\">\r\n                    <Card interactive={false} elevation={Elevation.ONE}>\r\n                        Sort By\r\n                        <SimpleSelect\r\n                            items={this.nodeProperties}\r\n                            value={this.state.sortBy}\r\n                            onSelect={(selected) => {\r\n                                this.setState({ sortBy: selected });\r\n                            }}\r\n                        />\r\n                        <SimpleSelect\r\n                            items={[\"Descending\", \"Ascending\"]}\r\n                            value={this.state.sortOrder}\r\n                            onSelect={(selected) => {\r\n                                this.setState({ sortOrder: selected });\r\n                            }}\r\n                        />\r\n                    </Card>\r\n                    <Table\r\n                        className=\"pt-bordered pt-striped\"\r\n                        numRows={this.rawGraph.order}\r\n                    >\r\n                        {/* first column is the Show switch */}\r\n                        <Column\r\n                            name=\"Show\"\r\n                            intent={Intent.SUCCESS}\r\n                            cellRenderer={this.showRenderer}\r\n                        />\r\n                        <Column\r\n                            name=\"id(Designated)\"\r\n                            intent={Intent.SUCCESS}\r\n                            cellRenderer={(rowIndex) => {\r\n                                let id = this.rawTable[rowIndex].key;\r\n                                return <Cell>{id}</Cell>;\r\n                            }}\r\n                        />\r\n                        {this.renderColumns()}\r\n                    </Table>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n);\r\n","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Dialog,\r\n    Intent,\r\n    ButtonGroup,\r\n    NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport State from \"../state\";\r\nimport GraphDataTable from \"./GraphDataTable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\nexport default observer(\r\n    class DataSheetDialog extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                showMoreBy: \"pagerank\",\r\n                showMoreNum: 5,\r\n            };\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Dialog\r\n                    iconName=\"database\"\r\n                    isOpen={State.preferences.dataSheetDialogOpen}\r\n                    onClose={() => {\r\n                        State.preferences.dataSheetDialogOpen = false;\r\n                    }}\r\n                    title=\"Data Sheet\"\r\n                    style={{ minWidth: \"80vw\" }}\r\n                >\r\n                    <div className={classnames(Classes.DIALOG_BODY)}>\r\n                        <GraphDataTable />\r\n                    </div>\r\n\r\n                    <div className={Classes.DIALOG_FOOTER}>\r\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                            <Button\r\n                                intent={Intent.PRIMARY}\r\n                                onClick={() => {\r\n                                    State.preferences.dataSheetDialogOpen = false;\r\n                                }}\r\n                                text=\"Done\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Dialog>\r\n            );\r\n        }\r\n    }\r\n);\r\n","import React from \"react\";\r\n// import PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\";\r\n// import OpenDialog from \"./OpenDialog\";\r\n// import NewProjectDialog from \"./NewProjectDialog\";\r\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\r\n// import SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\n// import OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\n// import ShareDialog from './ShareDialog';\r\n// import StatisticsDialog from './StatisticsDialog';\r\n// import HelpDialog from './HelpDialog';\r\n// import NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from \"./DataSheetDialog\";\r\n\r\nexport default class Dialogs extends React.Component {\r\n    render() {\r\n        return (\r\n            <div style={{ display: \"none\" }}>\r\n                {/* <PreferencesDialog /> */}\r\n                <ImportDialog />\r\n                <GEXFImportDialog />\r\n                {/*<OpenDialog />\r\n                <OpenSnapshotDialog />\r\n                <NewProjectDialog />\r\n                <ProjectDetailDialog />\r\n                <SaveSnapshotDialog />\r\n                <RenameSnapshotDialog />\r\n                <ShareDialog />\r\n                <StatisticsDialog />\r\n                <HelpDialog />\r\n                <NeighborDialog /> */}\r\n                <DataSheetDialog />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport {\r\n    ForceGraph2D,\r\n    ForceGraph3D,\r\n    ForceGraphVR,\r\n    ForceGraphAR,\r\n} from \"react-force-graph\";\r\nimport State from \"../../state\";\r\n\r\nexport default observer(\r\n    class ThreeJSVis extends React.Component {\r\n        renderGraph = () => {\r\n            if (State.preferences.view === \"3D\") {\r\n                return (\r\n                    <ForceGraph3D\r\n                        graphData={State.graph.adapterGraph}\r\n                        nodeResolution={20}\r\n                    />\r\n                );\r\n            } else {\r\n                return (\r\n                    <ForceGraph2D\r\n                        graphData={State.graph.adapterGraph}\r\n                        dagMode={\"td\"}\r\n                        // dagLevelDistance={300}\r\n                        // backgroundColor=\"#101020\"\r\n                        nodeRelSize={1}\r\n                        // nodeId=\"path\"\r\n                        // nodeVal={(node) => 100 / (node.level + 1)}\r\n                        // nodeLabel=\"path\"\r\n                        // nodeAutoColorBy=\"module\"\r\n                        // linkDirectionalParticles={2}\r\n                        // linkDirectionalParticleWidth={2}\r\n                        d3VelocityDecay={0.3}\r\n                    />\r\n                );\r\n            }\r\n        };\r\n\r\n        render() {\r\n            return <div>{this.renderGraph()}</div>;\r\n        }\r\n    }\r\n);\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport State from \"../../state\";\r\nimport { Button, Classes, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\n// import { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport * as THREE from 'three';\r\n// import SimpleSelect from \"../utils/SimpleSelect\";\r\n// import mouse from \"../../graph-frontend/src/select\";\r\n\r\nexport default observer(\r\n    class EdgesPanel extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                timeOutRef: null,\r\n                sizeOptionOpen: false,\r\n                thicknessOptionOpen: false,\r\n                colorOptionOpen: false,\r\n            };\r\n        }\r\n\r\n        render() {\r\n            let graph = State.graph.graph;\r\n            return (\r\n                <div>\r\n                    <p>{`Modifying All Edges`}</p>\r\n\r\n\r\n                    {/* Collapsable Option: Color */}\r\n                    <Collapsable\r\n                        name=\"Color\"\r\n                        isOpen={this.state.colorOptionOpen}\r\n                        onToggle={() =>\r\n                            this.setState({\r\n                                colorOptionOpen: !this.state.colorOptionOpen\r\n                            })\r\n                        }\r\n                    >\r\n                        <div\r\n                            className={classnames(Classes.CARD, \"sub-option\")}\r\n                        >\r\n                            <section>\r\n                                <p style={{ textAlign: \"left\" }}>Select Edge Color:\r\n                            <span style={{ float: \"right\" }}>\r\n                                        <Popover\r\n                                            interactionKind={PopoverInteractionKind.CLICK}\r\n                                            popoverClassName=\"bp3-popover-content-sizing\"\r\n                                            position={Position.RIGHT}\r\n                                        >\r\n                                            <Button\r\n                                                text=\"  \"\r\n                                                style={{\r\n                                                    backgroundImage: \"inherit\",\r\n                                                    backgroundColor: State.graph.edges.color\r\n                                                }}\r\n                                            />\r\n                                            <div>\r\n                                                <SketchPicker\r\n                                                    color={State.graph.edges.color}\r\n                                                    onChange={(it) => {\r\n                                                        // State.graph.process.graph.forEachNode(n => {\r\n\r\n                                                        //     let red = new THREE.Color(State.graph.edges.color).r;\r\n                                                        //     let blue = new THREE.Color(State.graph.edges.color).g;\r\n                                                        //     let green = new THREE.Color(State.graph.edges.color).b;\r\n                                                        //     n.renderData.linecolor.r = red;\r\n                                                        //     n.renderData.linecolor.g = blue;\r\n                                                        //     n.renderData.linecolor.b = green;\r\n                                                        // });\r\n                                                        (State.graph.edges.color = it.hex);\r\n                                                        (console.log(it.hex));\r\n                                                        /**update edge color in real time*/\r\n                                                        // State.graph.process.onHover();\r\n\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        </Popover>\r\n                                    </span>\r\n                                </p>\r\n                            </section>\r\n                        </div>\r\n                    </Collapsable>\r\n\r\n                    {/* Collapsable Option: Thickness */}\r\n                    {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Select Edge Thickness: </p>\r\n                            <div style={{display: \"inline\", float: \"right\"}}>\r\n\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n);\r\n// export default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/select\";\r\nimport { observer } from \"mobx-react\";\r\nimport State from \"../../state\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\nexport default observer(\r\n  class LabelsPanel extends React.Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n          <span style={{ display: \"inline-block\" }}>\r\n            <Button\r\n              style={{ width: \"100px\" }}\r\n              id=\"hideAll\"\r\n              iconName=\"eye-off\"\r\n              className={Classes.FILL}\r\n              onClick={() => State.graph.frame.hideAllLabels()}\r\n            >\r\n              Hide All\r\n        </Button>\r\n            <Button\r\n              style={{ width: \"100px\", display: \"none\" }}\r\n              id=\"showAll\"\r\n              iconName=\"eye-on\"\r\n              className={Classes.FILL}\r\n              onClick={() => State.graph.frame.showAllLabels()}\r\n            >\r\n              Show All\r\n        </Button>\r\n            <Button\r\n              style={{ width: \"140px\", marginLeft: \"10px\" }}\r\n              id=\"hideSelected\"\r\n              iconName=\"eye-off\"\r\n              className={Classes.FILL}\r\n              onClick={() => State.graph.frame.hideSelectedLabels()}\r\n            >\r\n              Hide Selected\r\n        </Button>\r\n            <Button\r\n              style={{ width: \"140px\", marginLeft: \"10px\", display: \"none\" }}\r\n              id=\"showSelected\"\r\n              iconName=\"eye-on\"\r\n              className={Classes.FILL}\r\n              onClick={() => State.graph.frame.showSelectedLabels()}\r\n            >\r\n              Show Selected\r\n        </Button>\r\n          </span>\r\n          <div style={{ height: '20px' }} />\r\n          <h6>Label Size</h6>\r\n          <Slider\r\n            min={0.5}\r\n            max={3}\r\n            stepSize={0.1}\r\n            // onChange={value => {\r\n            //   State.graph.nodes.labelSize = value;\r\n            // }}\r\n            // value={State.graph.nodes.labelSize}\r\n            initialValue={2}\r\n            value={2}\r\n          />\r\n          <div style={{ height: '20px' }} />\r\n          <h6>Label Length</h6>\r\n          <Slider\r\n            min={1}\r\n            max={32}\r\n            stepSize={0.1}\r\n            labelStepSize={5}\r\n            // onChange={value => {\r\n            //   State.graph.nodes.labelLength = value;\r\n            // }}\r\n            // value={State.graph.nodes.labelLength}\r\n            value={10}\r\n          />\r\n          <div style={{ height: '20px' }} />\r\n          <h6>Label By</h6>\r\n          {/* <Select\r\n            items={State.graph.allPropertiesKeyList}\r\n            itemRenderer={CommonItemRenderer}\r\n            filterable={false}\r\n            onItemSelect={it => (State.graph.nodes.labelBy = it)}\r\n          >\r\n            <Button text={State.graph.nodes.labelBy} />\r\n          </Select> */}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n);\r\n// export default LabelsPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n    <div>\r\n        <Switch\r\n            label={name}\r\n            checked={isOpen}\r\n            onChange={onToggle}\r\n            className={Classes.ALIGN_RIGHT}\r\n        />\r\n        <Collapse isOpen={isOpen}>{children}</Collapse>\r\n    </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Select } from \"@blueprintjs/select\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport State from \"../../state\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\nexport default observer(\r\n  class SelectionPanel extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        shapeOptionOpen: false,\r\n        sizeOptionOpen: false,\r\n        colorOptionOpen: false,\r\n        labelOptionOpen: false\r\n      };\r\n    }\r\n\r\n    // twoLayerUpdate = (nodeId, key, value) => {\r\n    //   if (!State.graph.overrides.has(nodeId)) {\r\n    //     State.graph.overrides.set(nodeId, new Map());\r\n    //   }\r\n    //   const nodeAttrs = State.graph.overrides.get(nodeId);\r\n    //   if (value !== null) {\r\n    //     nodeAttrs.set(key, value);\r\n    //   } else {\r\n    //     nodeAttrs.delete(key);\r\n    //     if (nodeAttrs.size === 0) {\r\n    //       State.graph.overrides.delete(nodeId);\r\n    //     }\r\n    //   }\r\n    // };\r\n\r\n    // batchTwoLayerUpdate = (nodes, key, value) => {\r\n    //   runInAction(\"update entire selection\", () => {\r\n    //     nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    //   });\r\n    // };\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <br />\r\n          <SwitchCollapsable\r\n            name=\"Override Size\"\r\n            isOpen={this.state.sizeOptionOpen}\r\n            onToggle={() => {\r\n              if (this.state.sizeOptionOpen) {\r\n                this.setState(\r\n                  {\r\n                    sizeOptionOpen: false\r\n                  }\r\n                  // ,\r\n                  // () =>\r\n                  //   this.batchTwoLayerUpdate(\r\n                  //     State.graph.selectedNodes,\r\n                  //     \"size\",\r\n                  //     null\r\n                  //   )\r\n                );\r\n              } else {\r\n                this.setState(\r\n                  {\r\n                    sizeOptionOpen: true\r\n                  }\r\n                  // ,\r\n                  // () =>\r\n                  //   this.batchTwoLayerUpdate(\r\n                  //     State.graph.selectedNodes,\r\n                  //     \"size\",\r\n                  //     State.graph.overrideConfig.size\r\n                  //   )\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              <Slider\r\n                min={1}\r\n                max={20}\r\n                stepSize={0.1}\r\n                labelStepSize={5}\r\n                // onChange={it => {\r\n                //   State.graph.overrideConfig.size = it;\r\n                //   this.batchTwoLayerUpdate(\r\n                //     State.graph.selectedNodes,\r\n                //     \"size\",\r\n                //     it\r\n                //   );\r\n                // }}\r\n                // value={State.graph.overrideConfig.size}\r\n                value={2}//set for test\r\n              />\r\n            </div>\r\n          </SwitchCollapsable>\r\n          <br />\r\n          <SwitchCollapsable\r\n            name=\"Override Color\"\r\n            isOpen={this.state.colorOptionOpen}\r\n            onToggle={() => {\r\n              if (this.state.colorOptionOpen) {\r\n                this.setState(\r\n                  {\r\n                    colorOptionOpen: false\r\n                  }\r\n                  // ,\r\n                  // () =>\r\n                  //   this.batchTwoLayerUpdate(\r\n                  //     State.graph.selectedNodes,\r\n                  //     \"color\",\r\n                  //     null\r\n                  //   )\r\n                );\r\n              } else {\r\n                this.setState(\r\n                  {\r\n                    colorOptionOpen: true\r\n                  }\r\n                  // ,\r\n                  // () =>\r\n                  //   this.batchTwoLayerUpdate(\r\n                  //     State.graph.selectedNodes,\r\n                  //     \"color\",\r\n                  //     State.graph.overrideConfig.color\r\n                  //   )\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              <section> <p style={{ textAlign: \"left\" }}>\r\n                Choose Color:\r\n            <span style={{ float: \"right\" }}>\r\n                  <Popover\r\n                    //previous!!\r\n                    // placement=\"bottom\"\r\n                    // modifiers={{\r\n                    //   preventOverflow: {\r\n                    //     enabled: false,\r\n                    //   },\r\n                    // }}\r\n                    interactionKind={PopoverInteractionKind.CLICK}\r\n                    popoverClassName=\"bp3-popover-content-sizing\"\r\n                    position={Position.RIGHT}\r\n\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        // backgroundColor: State.graph.overrideConfig.color\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                    // color={State.graph.overrideConfig.color}\r\n                    // onChange={it => {\r\n                    //   State.graph.overrideConfig.color = it.hex;\r\n                    //   this.batchTwoLayerUpdate(\r\n                    //     State.graph.selectedNodes,\r\n                    //     \"color\",\r\n                    //     it.hex\r\n                    //   );\r\n                    // }}\r\n                    />\r\n                  </Popover>\r\n                </span>\r\n              </p>\r\n              </section>\r\n            </div>\r\n          </SwitchCollapsable>\r\n          <br />\r\n          <SwitchCollapsable\r\n            name=\"Override Label\"\r\n            isOpen={this.state.labelOptionOpen}\r\n            onToggle={() => {\r\n              if (this.state.labelOptionOpen) {\r\n                this.setState(\r\n                  {\r\n                    labelOptionOpen: false\r\n                  }\r\n                  // ,\r\n                  // () =>\r\n                  //   this.batchTwoLayerUpdate(\r\n                  //     State.graph.selectedNodes,\r\n                  //     \"label\",\r\n                  //     null\r\n                  //   )\r\n                );\r\n              } else {\r\n                this.setState(\r\n                  {\r\n                    labelOptionOpen: true\r\n                  }\r\n                  // ,\r\n                  // () =>\r\n                  //   this.batchTwoLayerUpdate(\r\n                  //     State.graph.selectedNodes,\r\n                  //     \"label\",\r\n                  //     State.graph.overrideConfig.label\r\n                  //   )\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              Custom Label:\r\n            <input\r\n                value={\"test\"}//used for test\r\n              // value={State.graph.overrideConfig.label}\r\n              // onChange={it => {\r\n              //   State.graph.overrideConfig.label = it.target.value;\r\n              //   this.batchTwoLayerUpdate(\r\n              //     State.graph.selectedNodes,\r\n              //     \"label\",\r\n              //     it.target.value\r\n              //   );\r\n              // }}\r\n              />\r\n            </div>\r\n          </SwitchCollapsable>\r\n          <br />\r\n          <SwitchCollapsable\r\n            name=\"Override Shape\"\r\n            isOpen={this.state.shapeOptionOpen}\r\n            onToggle={() => {\r\n              if (this.state.shapeOptionOpen) {\r\n                this.setState(\r\n                  {\r\n                    shapeOptionOpen: false\r\n                  }\r\n                  // ,\r\n                  // () =>\r\n                  //   this.batchTwoLayerUpdate(\r\n                  //     State.graph.selectedNodes,\r\n                  //     \"shape\",\r\n                  //     null\r\n                  //   )\r\n                );\r\n              } else {\r\n                this.setState(\r\n                  {\r\n                    shapeOptionOpen: true\r\n                  }\r\n                  // ,\r\n                  // () =>\r\n                  //   this.batchTwoLayerUpdate(\r\n                  //     State.graph.selectedNodes,\r\n                  //     \"shape\",\r\n                  //     State.graph.overrideConfig.shape\r\n                  //   )\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              <section> <p style={{ textAlign: \"left\" }}>\r\n                Node Shape:\r\n            <span style={{ float: \"right\" }}>\r\n                  <Select\r\n                    items={[\r\n                      \"shape1\",\r\n                      \"shape2\",\r\n                      \"shape3\",\r\n                      \"shape4\",\r\n                      \"shape5\"\r\n                    ]}\r\n                    itemRenderer={CommonItemRenderer}\r\n                    filterable={false}\r\n                    onItemSelect={it => {\r\n                      console.log(it)//used for test\r\n                      // State.graph.overrideConfig.shape = it;\r\n                      // this.batchTwoLayerUpdate(\r\n                      //   State.graph.selectedNodes,\r\n                      //   \"shape\",\r\n                      //   it\r\n                      // );\r\n                    }\r\n                    }\r\n                  >\r\n                    {/* <Button text={State.graph.overrideConfig.shape} /> */}\r\n                    <Button text={\"change\"} />\r\n                    {/* upper is used for test */}\r\n                  </Select>\r\n                </span>\r\n              </p>\r\n              </section>\r\n            </div>\r\n          </SwitchCollapsable>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n);\r\n// export default SelectionPanel;","import React from \"react\";\r\nimport { Button, Classes, RangeSlider, Popover, PopoverInteractionKind, Position } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Select } from \"@blueprintjs/select\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport State from \"../../state\";\r\n// import { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\nexport default observer(\r\n  class GlobalPanel extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        timeOutRef: null,\r\n        sizeOptionOpen: false,\r\n        colorOptionOpen: false,\r\n        shapeOptionOpen: false\r\n      };\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          {/* Collapsable Option: Color */}\r\n          <Collapsable\r\n            name=\"Color\"\r\n            isOpen={this.state.colorOptionOpen}\r\n            onToggle={() =>\r\n              this.setState({\r\n                colorOptionOpen: !this.state.colorOptionOpen\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              {/* color : color by */}\r\n              <section>\r\n                <p style={{ textAlign: \"left\" }}>Color By:\r\n                <span style={{ float: \"right\" }}>\r\n                    <SimpleSelect\r\n                      items={[\"item1\", \"item2\"]\r\n                        // State.graph.allPropertiesKeyList\r\n                      }\r\n                      onSelect={it => (\r\n                        console.log(\"color:color by\")\r\n                        // State.graph.nodes.colorBy = it\r\n                      )\r\n                      }\r\n                      value={\"1\"//for test\r\n                        // State.graph.nodes.colorBy\r\n                      }\r\n                    />\r\n                  </span>\r\n                </p>\r\n              </section>\r\n\r\n              {/* color:scale type  */}\r\n              <section>\r\n                <p style={{ textAlign: \"left\" }}>Scale Type:\r\n                <span style={{ float: \"right\" }}>\r\n                    <SimpleSelect\r\n                      items={[\"item1\", \"item2\"]\r\n                        // Object.keys(scales)\r\n                      }\r\n                      onSelect={it => (console.log(\"color:scale type\")\r\n                        // State.graph.nodes.color.scale = it\r\n                      )\r\n                      }\r\n                      value={\"2\"\r\n                        // State.graph.nodes.color.scale\r\n                      }\r\n                    />\r\n                  </span>\r\n                </p>\r\n              </section>\r\n\r\n              {/* the gradient section in color */}\r\n              <section >\r\n                <p style={{ textAlign: \"left\" }}>Gradient: &nbsp;\r\n                <span style={{ float: \"right\" }}>\r\n                    {/* left colorpicker */}\r\n                    <Popover\r\n                      // placement=\"bottom\"\r\n                      // modifiers={{\r\n                      //   preventOverflow: {\r\n                      //     enabled: false,\r\n                      //   },\r\n                      // }}\r\n                      interactionKind={PopoverInteractionKind.CLICK}\r\n                      popoverClassName=\"bp3-popover-content-sizing\"\r\n                      position={\"auto\"}\r\n                    >\r\n                      <Button\r\n                        text=\"  \"\r\n                      // style={{\r\n                      //   // backgroundImage: \"inherit\",\r\n                      //   // backgroundColor: State.graph.nodes.color.from\r\n                      // }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={\"#ffffff\"//used for test\r\n                          // State.graph.nodes.color.from\r\n                        }\r\n                        onChange={\r\n                          console.log(\"gradient section first colorpicker onchange\")\r\n                          // it => (State.graph.nodes.color.from = it.hex)\r\n                        }\r\n                      />\r\n                    </Popover>\r\n                    {/* arrow  */}\r\n                    &nbsp; &#8594; &nbsp;\r\n                    {/* right colorpicker */}\r\n                    <Popover\r\n                      //previous!!\r\n                      // placement=\"bottom\"\r\n                      // modifiers={{\r\n                      //   preventOverflow: {\r\n                      //     enabled: false,\r\n                      //   },\r\n                      // }}\r\n                      interactionKind={PopoverInteractionKind.CLICK}\r\n                      popoverClassName=\"bp3-popover-content-sizing\"\r\n                      position={\"auto\"}\r\n                    >\r\n                      <Button\r\n                        text=\"  \"\r\n                        style={{\r\n                          backgroundImage: \"inherit\",\r\n                          // backgroundColor: State.graph.nodes.color.to\r\n                        }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={\"#ffffff\"//used for test\r\n                          // State.graph.nodes.color.to\r\n                        }\r\n                        onChange={\r\n                          console.log(\"gradient section second colorpicker onchange\")\r\n                          // it => (State.graph.nodes.color.to = it.hex)\r\n                        }\r\n                      />\r\n                    </Popover>\r\n                  </span>\r\n                </p>\r\n              </section>\r\n              {/* color : gradient preview */}\r\n              <section style={{ marginTop: \"-1em\" }}>\r\n                <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                  <defs>\r\n                    <linearGradient\r\n                      x1=\"0%\"\r\n                      y1=\"50%\"\r\n                      x2=\"100%\"\r\n                      y2=\"50%\"\r\n                      id=\"theGradient\"\r\n                    >\r\n                      <stop\r\n                        stopColor={\"#ffffff\"//used for test\r\n                          // State.graph.nodes.color.from\r\n                        }\r\n                        stopOpacity=\"1\"\r\n                        offset=\"0%\"\r\n                      />\r\n                      <stop\r\n                        stopColor={\r\n                          \"#ffffff\"//used for test\r\n                          // State.graph.nodes.color.to\r\n                        }\r\n                        stopOpacity=\"1\"\r\n                        offset=\"100%\"\r\n                      />\r\n                    </linearGradient>\r\n                  </defs>\r\n                  <rect\r\n                    x=\"0\"\r\n                    y=\"0\"\r\n                    width=\"100%\"\r\n                    height=\"50\"\r\n                    fill=\"url(#theGradient)\"\r\n                  />\r\n                </svg>\r\n              </section>\r\n            </div>\r\n          </Collapsable>\r\n\r\n          {/* Collapsable Option: Size */}\r\n          <Collapsable\r\n            name=\"Size\"\r\n            isOpen={this.state.sizeOptionOpen}\r\n            onToggle={() =>\r\n              this.setState({\r\n                sizeOptionOpen: !this.state.sizeOptionOpen\r\n              })\r\n            }\r\n          >\r\n\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              {/* size : scale by  */}\r\n              <section>\r\n                <p style={{ textAlign: \"left\" }}>Scale By:\r\n                <span style={{ float: \"right\" }}>\r\n                    <Select\r\n                      items={[\"item1\", \"item2\"]}\r\n                      itemRenderer={CommonItemRenderer}\r\n                      filterable={false}\r\n                      onItemSelect={\r\n                        console.log(\"size : scale by , component :select\")\r\n                        // it => (State.graph.nodes.sizeBy = it)\r\n                      }\r\n                    >\r\n                      <Button text={\"btn1\"\r\n                        // State.graph.nodes.sizeBy\r\n                      } />\r\n                    </Select>\r\n                  </span>\r\n                </p>\r\n              </section>\r\n              {/* size : scale type */}\r\n              <section>\r\n                <p style={{ textAlign: \"left\" }}>Scale Type:\r\n                <span style={{ float: \"right\" }}>\r\n                    <Select\r\n                      items={[\"item1\", \"item2\"]\r\n                        //Object.keys(scales)\r\n                      }\r\n                      itemRenderer={CommonItemRenderer}\r\n                      filterable={false}\r\n                      onItemSelect={\r\n                        console.log(\"size : scale type component: select\")\r\n                        // it => (State.graph.nodes.size.scale = it)\r\n                      }\r\n                    >\r\n                      <Button text={\"btn2\"\r\n                        // State.graph.nodes.size.scale\r\n                      } />\r\n                    </Select>\r\n                  </span>\r\n                </p>\r\n              </section>\r\n\r\n            Size Range:\r\n            <br />\r\n              <RangeSlider\r\n                min={1}\r\n                max={20}\r\n                stepSize={0.1}\r\n                labelStepSize={5}\r\n              // onChange={([a, b]) => {\r\n              //   runInAction(\"update scale\", () => {\r\n              //     State.graph.nodes.size.min = a;\r\n              //     State.graph.nodes.size.max = b;\r\n              //   });\r\n              // }}\r\n              // value={[\r\n              //   State.graph.nodes.size.min,\r\n              //   State.graph.nodes.size.max\r\n              // ]}\r\n              />\r\n            </div>\r\n          </Collapsable>\r\n\r\n          {/* Collapsable Option: Shape */}\r\n          <Collapsable\r\n            name=\"Shape\"\r\n            isOpen={this.state.shapeOptionOpen}\r\n            onToggle={() =>\r\n              this.setState({\r\n                shapeOptionOpen: !this.state.shapeOptionOpen\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              {/* shape : node shape */}\r\n              <section> <p style={{ textAlign: \"left\" }}> Node Shape:\r\n              <span style={{ float: \"right\" }}>\r\n                  <Select\r\n                    items={[\r\n                      \"circle\",\r\n                      \"square\",\r\n                      \"triangle\",\r\n                      \"pentagon\",\r\n                      \"hexagon\",\r\n                      \"octagon\"\r\n                    ]}\r\n                    itemRenderer={CommonItemRenderer}\r\n                    filterable={false}\r\n                    onItemSelect={\r\n                      console.log(\" shape : node shape component: select\")\r\n                      // it => (State.graph.nodes.shape = it)\r\n                    }\r\n                  >\r\n                    <Button text={\"btn3\"\r\n                      // State.graph.nodes.shape\r\n                    } />\r\n                  </Select>\r\n                </span>\r\n              </p></section>\r\n            </div>\r\n          </Collapsable>\r\n          <br />\r\n          <small>\r\n\r\n            {/* {pluralize(\"node\", State.graph.overrides.size, true)}<span> </span> */}\r\n            {pluralize(\"node\", 0, true)}<span> </span>\r\n          have override styles.  &nbsp;\r\n          <Button className={\"pt-small\"} text=\"Clear\"\r\n            // onClick={() => (State.graph.overrides = new Map())} \r\n            />\r\n          </small>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n);\r\n// export default GlobalPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport State from \"../../state\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\nexport default observer(\r\n  class NodesPanel extends React.Component {\r\n    getRenderedNodes = () => {\r\n      if (State.graph.selectedNodes.length === 0) {\r\n        return (\r\n          <div>\r\n            <p>Modifying All Nodes</p>\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <p>{`Modifying ${pluralize(\r\n          \"Node\",\r\n          State.graph.selectedNodes.length,\r\n          true\r\n        )}`}</p>\r\n      );\r\n    };\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          {this.getRenderedNodes()}\r\n          {State.graph.selectedNodes.length === 0 ? (\r\n            <GlobalPanel />\r\n          ) : (\r\n              <SelectionPanel />\r\n            )}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n);\r\n// export default NodesPanel;","import React from \"react\";\r\nimport { Classes, Tab, Tabs, Button } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport State from \"../state\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n// import { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\n// import NodeDetail from \"./panels/NodeDetailPanel\";\r\n// import Legends from \"./Legends\";\r\n// // import StatusBar from './StatusBar';\r\n// import SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\n\r\n// TODO: migrate to simple select\r\n\r\nlet RenderOptionsCard = observer(\r\n    class RenderOptionsCard extends React.Component {\r\n        render() {\r\n            return (\r\n                <div>\r\n                    <h2>Graph Options</h2>\r\n                    <Tabs animate={true}>\r\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                        <Tab\r\n                            id=\"labels\"\r\n                            title=\"Labels\"\r\n                            panel={<LabelsPanel />}\r\n                        />\r\n                        {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                        <Tabs.Expander />\r\n                    </Tabs>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n);\r\n//\r\n\r\nexport default observer(\r\n    class FloatingCards extends React.Component {\r\n        optionsVisible = {\r\n            left: \"0em\",\r\n        };\r\n        optionsInvisible = {\r\n            left: \"-2200em\",\r\n        };\r\n        sideButtonVis = {\r\n            marginLeft: \"50px\",\r\n        };\r\n        sideButtonInv = {\r\n            marginLeft: \"-15px\",\r\n        };\r\n        toggleOptions = () => {\r\n            State.preferences.isRenderOptionsCardHidden = !State.preferences\r\n                .isRenderOptionsCardHidden;\r\n        };\r\n        render() {\r\n            return (\r\n                <div className=\"floating-overlay\">\r\n                    <div className=\"left-cards\">\r\n                        <div\r\n                            className={classnames(\r\n                                Classes.CARD,\r\n                                Classes.ELEVATION_2,\r\n                                \"overlay-card\",\r\n                                \"left-overlay-card\",\r\n                                \"transparent-frame\",\r\n                                \"left-cards\"\r\n                            )}\r\n                            style={\r\n                                State.preferences.isRenderOptionsCardHidden\r\n                                    ? this.optionsInvisible\r\n                                    : this.optionsVisible\r\n                            }\r\n                        >\r\n                            <br />\r\n                            <Button\r\n                                className=\"openbtn2\"\r\n                                icon=\"chevron-left\"\r\n                                onClick={this.toggleOptions}\r\n                            ></Button>\r\n                            <br />\r\n                            <RenderOptionsCard />\r\n                        </div>\r\n                        <div\r\n                            className={classnames(\r\n                                Classes.CARD,\r\n                                Classes.ELEVATION_2,\r\n                                \"overlay-card\",\r\n                                \"transparent-frame\"\r\n                            )}\r\n                            style={{\r\n                                width: \"1em\",\r\n                                paddingTop: \"1em\",\r\n                                paddingRight: \"0.7em\",\r\n                                paddingBottom: \"0.5em\",\r\n                                marginLeft: \"-5.4em\",\r\n                            }}\r\n                        >\r\n                            <Button\r\n                                icon=\"more\"\r\n                                className=\"openbtn\"\r\n                                onClick={this.toggleOptions}\r\n                                style={\r\n                                    State.preferences.isRenderOptionsCardHidden\r\n                                        ? this.sideButtonVis\r\n                                        : this.sideButtonInv\r\n                                }\r\n                            ></Button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* {State.graph.selectedNodes.length === 1 && (\r\n            <NodeDetail node={State.graph.selectedNodes[0].data.ref} />\r\n          )}\r\n\r\n          {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\r\n            <NodeDetail node={State.graph.currentlyHovered.data.ref} />\r\n          )} */}\r\n\r\n                    {/* <Legends />\r\n          <StatusBar /> */}\r\n                    {/* {// This menu only shows when there are nodes selected\r\n            State.graph.selectedNodes.length > 0 && !State.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n          } */}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\n// export default FloatingCards;\r\n","import React from \"react\";\r\nimport { Provider } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    FocusStyleManager,\r\n    NonIdealState,\r\n} from \"@blueprintjs/core\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport ThreeJSVis from \"./components/visualize/visualizer\";\r\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\r\nimport State from \"./state\";\r\nimport EdgesPanel from \"./components/panels/EdgesPanel\";\r\nimport LabelsPanel from \"./components/panels/LabelsPanel\";\r\nimport SelectionPanel from \"./components/panels/SelectionPanel\";\r\nimport GlobalPanel from \"./components/panels/GlobalPanel\";\r\n// import NodesPanel from \"./components/panels/NodesPanel\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div\r\n            className={classnames({\r\n                \"app-wrapper\": true,\r\n                [Classes.DARK]: true,\r\n            })}\r\n        >\r\n            <Navbar />\r\n            <main className=\"main\">\r\n                <ThreeJSVis />\r\n            </main>\r\n            <FloatingCards />\r\n            <Dialogs />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import(\"web-vitals\").then(\r\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n                getCLS(onPerfEntry);\r\n                getFID(onPerfEntry);\r\n                getFCP(onPerfEntry);\r\n                getLCP(onPerfEntry);\r\n                getTTFB(onPerfEntry);\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/table/lib/css/table.css\";\r\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\r\nimport \"normalize.css\";\r\nimport \"./App.css\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}