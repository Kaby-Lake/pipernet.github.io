{"version":3,"sources":["state/PreferencesStore.ts","state/Cluster3dObjectStore.ts","state/GraphDelegate.ts","components/ComponentRef.tsx","state/GraphMutation.ts","state/GraphStore.ts","state/ImportStore.ts","state/ProjectStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","state/InteractionStore.ts","state/index.ts","components/utils/ClusterChooser.tsx","images/logo.png","components/utils/SimpleSelect.tsx","components/Navbar.tsx","components/utils/Collapsable.tsx","constants/index.ts","components/dialogs/ImportCSVDialog.tsx","components/dialogs/ImportGEXFDialog.tsx","components/dialogs/ExportDialog.tsx","components/utils/DataSheetDialogWrapper.tsx","components/utils/InputFormUtils.ts","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/utils/NodeAdder.tsx","components/dialogs/AddNodeDialog.tsx","components/dialogs/AddEdgeDialog.tsx","components/Dialogs.tsx","components/visualize/visualizer.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/SearchPanel.tsx","components/panels/RightClickNodePanel.tsx","components/panels/RightClickBackgroundPanel.tsx","components/panels/DeleteEdgeInteractionPanel.tsx","components/panels/ClusterPanel.tsx","components/utils/ColorPicker.tsx","components/panels/EdgesPanel.tsx","components/panels/LabelsPanel.tsx","components/panels/NodesPanel.tsx","components/panels/GraphOptionsCard.tsx","components/FloatingCards.tsx","App.js","reportWebVitals.js","index.js"],"names":["PreferencesStore","rightClickPositionX","rightClickPositionY","preferenceDialogOpen","statisticsDialogOpen","helpDialogOpen","AddNodeDialogOpen","AddEdgeDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","rightClickBackgroundPanelOpen","rightClickNodePanelOpen","deleteEdgePanelOpen","isGraphOptionsCardHidden","view","controlType","makeAutoObservable","this","Cluster3dObjectStore","threeScene","fusionClusterObjects","clusterObjectsMap","initialMap","Map","State","cluster","attributePoints","forEach","value","key","set","createMeshGroup","THREE","add","clusterBy","convexHullObjects","initEmptyMapAndFusion","group","newBufferGeometry","convexHullObject","children","mesh","geometry","copy","remove","dispose","material","newMap","points","get","css","shape","length","ConvexGeometry","Array","from","convexGeometry","computeBoundingSphere","sphereGeo","boundingSphere","sphere","SphereGeometry","radius","resolution","translate","center","x","y","z","geom","name","meshMaterial","color","attributeColor","transparent","opacity","side","depthWrite","SceneUtils","createMultiMaterialObject","createCustomNodeObject","_id","_cluster","result","id","hovered","selected","isClusterNode","createCustomLinkObject","_source","_target","source","target","isClusterLink","GraphDelegate","graphDelegateMethods","nodeVisibility","nodeObject","linkVisibility","linkObject","clusterObject","_graphDelegateMethods","scene","newGraph","graph","rawGraph","addInvisibleClusterNode","decorateRawGraph","tempGraph","nodes","links","forEachNode","node","attributes","push","forEachEdge","edge","oldGraph","graphCopy","names","index","getAttributeValues","attribute","clusterID","addNode","_visualize","attributeKeys","addEdge","nodeId","distance","getNodeAttribute","distRatio","Math","hypot","cameraPosition","d3Force","link","clusterForce","normalForce","d3ReheatSimulation","ComponentRef","nodeDetail","multiNodeDetail","visualizer","_instance","instance","reaction","interaction","currentlyHoveredNodeId","forceUpdate","GraphMutation","_this","that","newAttributes","hasOwnProperty","decorateRawNode","refreshGraph","dropNode","decorateRawEdge","dropEdge","GraphStore","Graph","allowSelfLoops","multi","type","mutating","metadata","snapshotName","nodeProperties","_rawGraph","_metadata","flush","updateVisualizationGraph","order","size","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importSamplesDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","position","Position","TOP","show","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","readNodeCSV","toString","readEdgeCSV","hasNode","Object","keys","readGEXF","entries","getNodeAttributes","clusterProperties","edgeProperties","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","join","console","log","it","onerror","error","action","onClick","window","location","reload","text","nodeFileConfig","ProjectStore","currentSnapshotName","exportDialogOpen","renameSnapshotDialogOpen","SearchStore","isPreviewing","searchStr","observable","ref","list","searchStrIgnoreCase","toLocaleLowerCase","match","searchId","includes","searchQuery","searchAttr","searchValue","ClusterStore","by","keyValueMap","Set","keyAttribute","values","attributeKeysMap","colors","randomcolor","seed","count","NodeGlobalConfig","defaultColor","selectedColor","highlightColor","EdgeGlobalConfig","defaultWidth","highlightWidth","LabelConfig","ClusterConfig","CssStore","label","isAnimating","InteractionStore","selectedNode","selectedNodes","selectedEdge","selectedEdges","previouslyHoveredNodeId","neighbors","getNodeNeighborEdges","neighbor","getEdgeKey","node1","node2","go","back","updateNodeVisualizeAttribute","oldAttributeVisualize","updateVisualizeAttributeParser","getEdgeAttribute","_attributeVisualize","updateEachNodeAttributes","updateEachEdgeAttributes","newAttribute","oldAttributes","AppState","preferences","graphDelegate","import","search","project","privateConstructor","_state","autorun","renderImportEdgePreview","renderImportNodePreview","resumeAnimation","pauseAnimation","currentlyHoveredNodeNeighborEdges","updateEdgeVisualizeAttribute","refresh","observer","itemRenderer","item","props","handleClick","propertiesWithNone","unshift","items","showNone","fullProperties","filterable","onItemSelect","onSelect","syncWith","React","Component","defaultProps","CommonItemRenderer","itemPredicate","query","object","toLowerCase","indexOf","noResults","disabled","small","className","classnames","Classes","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","alt","NAVBAR_HEADING","icon","BOTTOM","BUTTON","MINIMAL","checked","onChange","ALIGN_RIGHT","setCluster","NAVBAR_DIVIDER","open","elevation","Elevation","LARGE","FILL","rightIcon","isOpen","onToggle","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","PreviewTable","renderWrapper","numRows","selectedRegions","rows","cols","cellRenderer","i","state","loading","available","nodesOpen","edgesOpen","canImport","renderNodesSelection","Collapsable","setState","CONTROL_GROUP","INPUT_GROUP","onInputChange","event","files","renderEdgesSelection","newDelimiter","style","minWidth","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","importGraphFromCSV","then","res","setGraph","fileIsSelect","importGraphFromGEXF","renderImportButton","ready","write","headers","exportData","export","data","edges","interactive","ONE","minimal","computeGEXFFile","filename","computeNodeFile","separator","computeEdgeFile","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","setTimeout","renderTable","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","renderColumns","rowIndex","columnIndex","renderCell","filter","element","cell","filteredTable","newVal","setValue","onConfirm","tooltip","setNodeAttribute","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","textAlign","newTable","asyncControl","leftIcon","placeholder","fill","defaultRowHeight","SUCCESS","select","labelFor","labelInfo","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","addEdgeDialog","onClosed","hasEdge","renderMode","RenderMode","NONE","newNodeId","canImportTag","renderAttributesForm","newValue","componentDidMount","prop","autoFocus","rightElement","onAdded","Dialogs","display","visualizationGraph","graphRef","createRef","hoverNodeCallback","previousNode","current","nodeLeftClickCallback","ctrlKey","shiftKey","splice","nodeRightClickCallback","closeAllPanel","backgroundClickCallback","backgroundRightClickCallback","renderGraph","graphData","nodeLabel","nodeRelSize","nodeColor","computeNodeColor","nodeResolution","nodeThreeObjectExtend","nodeThreeObject","sprite","SpriteText","textHeight","visible","onNodeHover","onNodeClick","onNodeRightClick","onNodeDragEnd","fx","fy","fz","linkWidth","computeEdgeWidth","linkColor","computeEdgeColor","onBackgroundRightClick","onBackgroundClick","onEngineTick","clusterDelegation","_node","_edge","mountDelegateMethods","graphMethods","cellRenderer_property","cellRenderer_value","onNode","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","CARD","enableRowHeader","renderSearchResults","candidates","onMouseOver","cameraFocusOn","large","onMouseLeave","makeObservable","stylePosition","computed","top","left","ELEVATION_1","targetNode","neighborsRenderer","onMouseEnter","shapeOptionOpen","forceOptionOpen","forceCollapse","min","max","stepSize","labelStepSize","updateClusterForce","shapeCollapse","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","RIGHT","backgroundColor","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","hex","timeOutRef","colorCollapse","sizeCollapse","animate","panel","Expander","optionsVisible","optionsInvisible","sideButtonVis","marginLeft","sideButtonInv","toggleOptions","ELEVATION_2","GraphOptionsCard","paddingTop","paddingRight","paddingBottom","NodeDetailPanel","MultiDetailPanel","App","DARK","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a289415a.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Right Click Position\n\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    // Dialog\n\n    preferenceDialogOpen = false;\n    statisticsDialogOpen = false;\n    helpDialogOpen = false;\n\n    AddNodeDialogOpen = false;\n    AddEdgeDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    // Panel\n\n    rightClickBackgroundPanelOpen = false;\n    rightClickNodePanelOpen = false;\n    deleteEdgePanelOpen = false;\n\n    isGraphOptionsCardHidden = true;\n\n    // 3D Graph\n\n    view = \"3D\";\n    controlType: \"trackball\" | \"orbit\" | \"fly\" = \"trackball\";\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { SphereGeometry } from \"three\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport { SceneUtils } from \"three/examples/jsm/utils/SceneUtils.js\";\nimport State from \".\";\n\nexport default class Cluster3dObjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * the THREE.js WebGL Scene of the visualization\n     *\n     */\n    threeScene!: THREE.Scene;\n\n    /**\n     * all the clusters should form a 3D Group to be imported into Scene\n     * if no cluster attribute is set, this will be set to null\n     *\n     * @type {THREE.Group}\n     */\n    fusionClusterObjects: THREE.Group | null = null;\n\n    /**\n     * the map between attribute value and its corresponding Mesh Group\n     * if you want to update the geometry, plz update all the children inside which Mesh Group\n     * if no cluster attribute is set, this will be set to null\n     *\n     * @type {(Map<string | number, THREE.Group> | null)}\n     */\n    clusterObjectsMap: Map<string | number, THREE.Group> | null = null;\n\n    /**\n     * create empty BufferGeometry and mesh with colour\n     * then initialize $fusionClusterObjects and $clusterObjectsMap with it\n     * and then add the THREE.Group to the Scene\n     *\n     */\n    initEmptyMapAndFusion() {\n        let initialMap = new Map<string | number, THREE.Group>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            initialMap.set(\n                key,\n                this.createMeshGroup(new THREE.BufferGeometry(), key)\n            );\n        });\n\n        this.clusterObjectsMap = initialMap;\n        this.fusionClusterObjects = new THREE.Group();\n        initialMap.forEach((value) => {\n            this.fusionClusterObjects?.add(value);\n        });\n        this.threeScene.add(this.fusionClusterObjects);\n    }\n\n    /**\n     * should be called on each render frame\n     * will update the geometry inside each cluster object\n     *\n     * if is the first time (both are null), will run initEmptyMapAndFusion() first\n     *\n     * if meet with clusterBy == null, will dispose all Object3d\n     *\n     */\n    clusterDelegation() {\n        if (State.cluster.clusterBy === null) {\n            if (this.fusionClusterObjects) {\n                this.threeScene.remove(this.fusionClusterObjects);\n                this.dispose();\n            }\n            return;\n        } else {\n            if (\n                this.fusionClusterObjects == null ||\n                this.convexHullObjects == null\n            ) {\n                this.initEmptyMapAndFusion();\n            }\n            this.clusterObjectsMap?.forEach(\n                (group: THREE.Group, key: string | number) => {\n                    let newBufferGeometry = this.convexHullObject(key);\n                    group.children.forEach((mesh: any) => {\n                        mesh.geometry.copy(newBufferGeometry);\n                    });\n                }\n            );\n        }\n    }\n\n    /**\n     * dispose the geometries and materials in every clusterObject\n     * and set these props to be null, which indicates that no additional 3d object is added into Scene\n     *\n     */\n    dispose() {\n        this.clusterObjectsMap?.forEach((group: THREE.Group) => {\n            group.children.forEach((mesh: any) => {\n                let material = mesh.material as THREE.Material;\n                material.dispose();\n                mesh.geometry.dispose();\n            });\n        });\n        this.clusterObjectsMap = null;\n        this.fusionClusterObjects = null;\n    }\n\n    /**\n     * the map between the value of the cluster and the BufferGeometry that this cluster created\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Group>)}\n     */\n    get convexHullObjects(): Map<string | number, THREE.BufferGeometry> {\n        let newMap = new Map<string | number, THREE.BufferGeometry>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            newMap.set(key, this.convexHullObject(key));\n        });\n        return newMap;\n    }\n\n    /**\n     * get the computed convexHull BufferGeometry of the specified attribute value\n     *\n     * @param {(string | number)} key\n     * @returns {*}  {THREE.BufferGeometry}\n     */\n    convexHullObject(key: string | number): THREE.BufferGeometry {\n        let points = State.cluster.attributePoints.get(key) as THREE.Vector3[];\n        if (State.css.cluster.shape === \"convexHull\") {\n            if (!points || points.length < 4) {\n                return new THREE.BufferGeometry();\n            } else {\n                return new ConvexGeometry(Array.from(points));\n            }\n        } else {\n            // State.css.clusterShape === \"Sphere\"\n            let convexGeometry = new ConvexGeometry(Array.from(points));\n            convexGeometry.computeBoundingSphere();\n            let sphereGeo = convexGeometry.boundingSphere as THREE.Sphere;\n            let sphere = new SphereGeometry(\n                sphereGeo.radius,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(\n                sphereGeo.center.x,\n                sphereGeo.center.y,\n                sphereGeo.center.z\n            );\n            return sphere;\n        }\n    }\n\n    /**\n     * create a Three.Group, which contains 2 Three.Mesh, of the input geometry\n     *\n     * @private\n     * @param {THREE.BufferGeometry} geom\n     * @param {(string | number)} name\n     * @returns {*}  {THREE.Group}\n     *\n     * @see THREE.Mesh\n     */\n    private createMeshGroup(\n        geom: THREE.BufferGeometry,\n        name: string | number\n    ): THREE.Group {\n        const meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.15,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        meshMaterial.depthWrite = false;\n        // const wireFrameMat = new THREE.MeshBasicMaterial();\n        // wireFrameMat.wireframe = true; //把材质渲染成线框\n        // wireFrameMat.wireframeLinecap = \"round\";\n\n        let group = SceneUtils.createMultiMaterialObject(geom, [meshMaterial]);\n        // wireFrameMat,\n        group.name = \"THREE_CLUSTER_\" + name;\n        return group;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport Cluster3dObjectStore from \"./Cluster3dObjectStore\";\n\n/**\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n *\n *\n * @interface ICustomNodeObject\n * @extends {NodeObject}\n */\nexport interface ICustomNodeObject extends NodeObject {\n    hovered: boolean;\n    selected: boolean;\n    isClusterNode?: boolean;\n}\n/**\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n *\n *\n * @interface ICustomLinkObject\n * @extends {LinkObject}\n */\nexport interface ICustomLinkObject extends LinkObject {\n    hovered: boolean;\n    selected: boolean;\n    isClusterLink?: boolean;\n}\n\nexport function createCustomNodeObject(\n    _id: string,\n    _cluster: boolean = false\n): ICustomNodeObject {\n    let result: ICustomNodeObject = {\n        id: _id,\n        hovered: false,\n        selected: false,\n        isClusterNode: _cluster,\n    };\n    return result;\n}\n\nexport function createCustomLinkObject(\n    _source: string,\n    _target: string,\n    _cluster: boolean = false\n): ICustomLinkObject {\n    let result: ICustomLinkObject = {\n        source: _source,\n        target: _target,\n        hovered: false,\n        selected: false,\n        isClusterLink: _cluster,\n    };\n    return result;\n}\n\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n        this.clusterObject = new Cluster3dObjectStore();\n    }\n\n    /**\n     * assign the force-graph methods to this class\n     * should be called as long as the visualizer react component is mounted\n     *\n     * @param {ForceGraphMethods} _graphDelegateMethods\n     */\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.clusterObject.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    /**\n     * the ForceGraphMethods exposed by the visualization force-graph\n     *\n     * @see ForceGraphMethods\n     *\n     * @type {ForceGraphMethods}\n     */\n    graphDelegateMethods!: ForceGraphMethods;\n\n    /**\n     * compute the delegate graph that will be used by the ForceGraph3D\n     * will add invisible cluster nodes and edges to balance the clustered graph and adjust force\n     * the NodeObject and LinkObject inside attributes (named _visualize) will be used.\n     *\n     * nodes and edges with the show=false will be ignored in this case\n     *\n     */\n\n    visualizationGraph() {\n        let newGraph: Graph;\n        if (State.cluster.clusterBy === null) {\n            newGraph = State.graph.rawGraph;\n        } else {\n            newGraph = this.addInvisibleClusterNode(\n                State.graph.decorateRawGraph(State.graph.rawGraph)\n            );\n        }\n        let tempGraph = {\n            nodes: [] as ICustomLinkObject[],\n            links: [] as ICustomLinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    /**\n     * return a new graph that contains the invisible clusters, formed as nodes\n     * as well as the edges that connected to the cluster node to simulate the force within the same cluster\n     * the new graph is a deep copy of the old node, so no worries of the original graph DS\n     *\n     * @private\n     * @param {Graph} oldGraph\n     * @returns {*}  {Graph}\n     */\n    private addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = oldGraph.copy();\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach(\n                (attribute: string | number) => {\n                    // if a node does not belong to any cluster, a undefined will be formed with no cluster to generate\n                    if (attribute === \"undefined\") return;\n\n                    let clusterID = names[index] + attribute;\n                    graphCopy.addNode(clusterID, {\n                        _visualize: createCustomNodeObject(clusterID, true),\n                    });\n\n                    // add edges to simulate the force of the same cluster\n                    State.cluster.attributeKeys\n                        .get(attribute)\n                        ?.forEach((target) => {\n                            graphCopy.addEdge(clusterID, target, {\n                                _visualize: createCustomLinkObject(\n                                    clusterID,\n                                    target,\n                                    true\n                                ),\n                            });\n                        });\n                }\n            );\n        }\n\n        return graphCopy;\n    }\n\n    /**\n     * determine whether this Node is the cluster delegate node\n     *\n     * @param {CustomNodeObject} nodeObject\n     */\n    nodeVisibility = (nodeObject: NodeObject) => {\n        let node = nodeObject as ICustomNodeObject;\n        return !node.isClusterNode;\n    };\n\n    /**\n     * determine whether this edge is the cluster delegate edge\n     *\n     * @param {CustomLinkObject} nodeObject\n     */\n    linkVisibility = (linkObject: LinkObject) => {\n        let link = linkObject as ICustomLinkObject;\n        return !link.isClusterLink;\n    };\n\n    ////\n\n    clusterObject: Cluster3dObjectStore;\n\n    ////\n\n    /**\n     * this will re-position the camera to focus on the specified node\n     * if distance not specified, a default of 40 will be used\n     *\n     * @param {string} nodeId the node to be focused\n     * @param {number} [distance=40] the ending distance between the camera and the node\n     * @returns {*}\n     */\n    cameraFocusOn(nodeId: string, distance: number = 40) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n\n    ////\n\n    /**\n     * set the force inside each cluster in the ForceGraph\n     *\n     * @param {number} force the force to be set\n     * @param {number} _default default force of other links\n     */\n    updateClusterForce() {\n        this.graphDelegateMethods\n            ?.d3Force(\"link\")\n            //@ts-ignore\n            ?.distance((link: CustomLinkObject) => {\n                return link.isClusterLink\n                    ? State.css.cluster.clusterForce\n                    : State.css.cluster.normalForce;\n            });\n        this.graphDelegateMethods.d3ReheatSimulation();\n    }\n}\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\n\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: any;\n\n    multiNodeDetail!: any;\n\n    visualizer!: any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import { Attributes, EdgeKey, NodeKey } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nimport GraphStore from \"./GraphStore\";\n\n/**\n * the wrapper mutating function that relates to the mutation of the rawGraph DS\n * all the mutation of the Graph should all go through this API rather than calling on rawGraph directly.\n *\n * @export\n * @class GraphMutation\n */\nexport default class GraphMutation {\n    constructor(_this: GraphStore) {\n        makeAutoObservable(this);\n        this.that = _this;\n    }\n\n    private that!: GraphStore;\n\n    /**\n     * add the node with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     *\n     * @param {NodeKey} node\n     * @param {Attributes} [attributes]\n     */\n    public addNode(node: NodeKey, attributes?: Attributes): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addNode(node, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * delete the node with this nodeId in the Graph and refresh the 3d Graph\n     *\n     * @param {string} nodeId\n     */\n    public dropNode(nodeId: string): void {\n        this.that.rawGraph.dropNode(nodeId);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * add the edge with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     *\n     * @param {NodeKey} source\n     * @param {NodeKey} target\n     * @param {Attributes} [attributes]\n     */\n    public addEdge(\n        source: NodeKey,\n        target: NodeKey,\n        attributes?: Attributes\n    ): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addEdge(source, target, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * delete the edge with this key in the Graph and refresh the 3d Graph\n     *\n     * @param {EdgeKey} edge\n     */\n    public dropEdge(edge: EdgeKey): void {\n        this.that.rawGraph.dropEdge(edge);\n        this.that.refreshGraph();\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { Attributes } from \"graphology-types\";\nimport {\n    createCustomNodeObject,\n    createCustomLinkObject,\n} from \"./GraphDelegate\";\nimport ComponentRef from \"../components/ComponentRef\";\nimport State from \".\";\nimport GraphMutation from \"./GraphMutation\";\n\nexport interface IMetaData {\n    snapshotName: string;\n\n    // attributes of nodes in imported graph\n    nodeProperties: string[];\n}\n\n/**\n * the class to store a raw graph as well as the related information\n \n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.mutating = new GraphMutation(this);\n    }\n\n    /**\n     * the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     *\n     * @see graphology\n     *\n     * @type {Graph}\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * should be called when individual nodes are added to the graph.\n\n     * add the CustomNodeObject to node attributes stored in the data structure\n     * @see CustomNodeObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} node\n     * @param {Attributes} attributes\n     */\n    decorateRawNode(node: string, attributes: Attributes) {\n        attributes._visualize = createCustomNodeObject(node, false);\n    }\n\n    /**\n     * should be called when individual edges are added to the graph.\n     *\n     * add the CustomLinkObject to node attributes stored in the data structure\n     * @see CustomLinkObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} source\n     * @param {string} target\n     * @param {Attributes} attributes\n     */\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        attributes._visualize = createCustomLinkObject(source, target, false);\n    }\n\n    /**\n     * should be called on every graph import\n     * add the the _visualize to every links inside the specified graph\n     *\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    /**\n     * proxy method to set the new graph\n     * if intend to set a new graph, please use this method instead of directly modify GraphStore\n     *\n     * @param {Graph} newGraph\n     * @param {IMetaData} metadata\n     */\n    public setGraph(_rawGraph: Graph, _metadata: IMetaData | null = null) {\n        this.rawGraph = this.decorateRawGraph(_rawGraph);\n        if (_metadata) {\n            this.metadata = _metadata;\n        }\n        State.interaction.flush();\n        State.cluster.clusterBy = null;\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * should be called when the graph gets updated (the data inside the graph gets updated, or the attribute to be clustered has changed)\n     *\n     * @memberof GraphStore\n     */\n    public refreshGraph() {\n        State.interaction.flush();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * the wrapper methods to mutate the graph\n     * all the mutations of the graph should go through this API rather than calling this.rawGraph.[mutate]\n     *\n     * has basic functions like addNode, dropNode, addEdge, dropEdge...\n     *\n     * @see {GraphMutation}\n     */\n    mutating: GraphMutation;\n\n    /**\n     * if currently there is a graph in the dataset\n     *\n     * @readonly\n     */\n    get hasGraph() {\n        return this.rawGraph.order && this.rawGraph.size !== 0;\n    }\n\n    /**\n     * the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     *\n     */\n    metadata: IMetaData = {\n        snapshotName: \"SNAPSHOT\",\n        nodeProperties: [],\n    };\n}\n","import { Intent, Position, Toaster } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\n\nexport interface INodeFileConfig {\n    // the file is successfully parsed and ready for display\n    isReady: boolean;\n    parseError: boolean;\n    path: string;\n\n    // has header at the top\n    hasHeader: boolean;\n\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n    topN: any[];\n    //names for the columns of this csv\n    columns: string[];\n    mapping: {\n        id: string;\n    };\n    delimiter: string;\n}\n\nexport interface IEdgeFileConfig {\n    isReady: boolean;\n    parseError: boolean;\n\n    // should save the csv to temp for further change the cluster attribute\n    path: string;\n    hasHeader: boolean;\n\n    // array of objects storing the\n    topN: any[];\n    columns: string[];\n    mapping: {\n        fromId: string;\n        toId: string;\n    };\n    delimiter: string;\n}\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importCSVDialogOpen = false;\n    importSamplesDialogOpen = false;\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as INodeFileConfig,\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as IEdgeFileConfig,\n    };\n\n    /**\n     * read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     *\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @return {*}  {Promise<Object[]>}\n     * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     *\n     * @private\n     * @return {*}  {Promise<Graph>}\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, reader.result as string));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     *\n     * @return {*}\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: true,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            tempNodes = await this.readNodeCSV();\n            tempNodes.forEach((node) => {\n                let nodeId = node[config.nodeFile.mapping.id].toString();\n                delete node[config.nodeFile.mapping.id];\n                graph.addNode(nodeId, node);\n            });\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, { id: fromId });\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, { id: toId });\n            }\n            graph.addEdge(fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            },\n        };\n    }\n\n    //TODO:import 里的id和cluster， source target还没设置\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n\n        for (const [key] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: null,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    /**\n     * change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length === 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class ProjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    currentSnapshotName = \"Untitled\";\n\n    exportDialogOpen = false;\n    renameSnapshotDialogOpen = false;\n}\n","import Graph from \"graphology\";\nimport { makeAutoObservable, observable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n\n    // if is previewing, ignore all mouse hovers detected by NodeDetailPanel because it is showing the detail of selected node\n    isPreviewing = false;\n\n    // can use defined regex\n    // id:123\n    // attr:color:red\n    searchStr = \"\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    // contains node ids\n    get candidates(): string[] {\n        let list: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (searchStrIgnoreCase.match(/^id:.+/g)) {\n            const searchId = searchStrIgnoreCase.split(/^id:/g)[1].trim();\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchId)) {\n                    list.push(node);\n                }\n            });\n        } else if (searchStrIgnoreCase.match(/^attr:.+:.+/g)) {\n            let searchQuery = searchStrIgnoreCase\n                .split(/^attr:/g)[1]\n                .trim()\n                .split(/:/g);\n            const searchAttr = searchQuery[0].trim();\n            const searchValue = searchQuery[1].trim();\n            this.rawGraph.forEachNode((node, attributes) => {\n                if (\n                    attributes.hasOwnProperty(searchAttr) &&\n                    (attributes[searchAttr] as string)\n                        .toLocaleLowerCase()\n                        .includes(searchValue)\n                ) {\n                    list.push(node);\n                }\n            });\n        } else if (this.searchStr === \"\") {\n        } else {\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(this.searchStr)) {\n                    list.push(node);\n                }\n            });\n        }\n\n        return list;\n    }\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\nimport State from \".\";\n\n/**\n * all the computed values get from the rawGraph\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    /**\n     * @observable\n     *\n     * attention: please use setCluster() to alter this data\n     * Specify which attribute to be clustered\n     * the default value should be null, and front-end graph will interpret this to Not-Cluster\n     *\n     *\n     */\n    clusterBy: string | null = null;\n\n    /**\n     * the setter of clusterBy\n     * will update the front-end 3d graph about the cluster changes\n     *\n     * @param {(string | null)} by\n     */\n    setCluster(by: string | null) {\n        this.clusterBy = by;\n        State.graph.refreshGraph();\n    }\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     */\n    rawGraph!: Graph;\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     *\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const keyValueMap = new Map<string, string | number>();\n        if (this.clusterBy === null) {\n            return keyValueMap;\n        }\n        const attribute = this.clusterBy as string;\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * the possible attribute values of the attribute defined by $clusterBy\n     *\n     * @readonly\n     * @type {((string | number)[])}\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     *\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     *\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.forEach((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.forEach((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * changing the config inside .global will cause to change every config of every node iteratively\n *\n * but changing the else does not\n *\n * @class NodeGlobalConfig\n */\nclass NodeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    defaultColor: string = \"#808080\";\n    selectedColor: string = \"#ffffAA\";\n    highlightColor: string = \"#ff6060\";\n\n    resolution = 12;\n\n    size = 4;\n}\n\n/**\n * changing the config inside .global will cause to change every config of every edge iteratively\n *\n * but changing the else does not\n *\n * @class EdgeGlobalConfig\n */ class EdgeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    defaultColor = \"#ffffff\";\n\n    selectedColor = \"#ffff00\";\n    highlightColor = \"#ff8E8E\";\n\n    defaultWidth: number = 1;\n\n    highlightWidth: number = 2;\n\n    resolution = 6;\n}\nclass LabelConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    show = true;\n    color = \"#d3d3d3\";\n    size = 4;\n}\n\nclass ClusterConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    clusterForce = 20;\n    normalForce = 50;\n    resolution = 10;\n    shape: \"convexHull\" | \"sphere\" = \"convexHull\";\n}\n/**\n * the configurations to set to cascade the graph\n *\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.node = new NodeGlobalConfig();\n        this.edge = new EdgeGlobalConfig();\n        this.label = new LabelConfig();\n        this.cluster = new ClusterConfig();\n    }\n\n    node!: NodeGlobalConfig;\n\n    edge!: EdgeGlobalConfig;\n\n    label!: LabelConfig;\n\n    cluster!: ClusterConfig;\n\n    isAnimating: boolean = true;\n}\n","import { Attributes } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\n\nexport default class InteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    selectedNode: string | null = null;\n    /**\n     * the currently selected node ids\n     * the singleNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string[]}\n     */\n    selectedNodes: string[] = [];\n\n    selectedEdge: string | null = null;\n\n    selectedEdges: string[] = [];\n    /**\n     * the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string}\n     */\n    currentlyHoveredNodeId: string | null = null;\n\n    get currentlyHoveredNodeNeighbors(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            return State.graph.rawGraph.neighbors(this.currentlyHoveredNodeId);\n        }\n    }\n\n    get currentlyHoveredNodeNeighborEdges(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            return this.getNodeNeighborEdges(this.currentlyHoveredNodeId);\n        }\n    }\n\n    previouslyHoveredNodeId: string | null = null;\n\n    getNodeNeighborEdges(node: string): string[] {\n        let neighbors = State.graph.rawGraph.neighbors(node);\n        return neighbors?.map((neighbor: string) => {\n            return this.getEdgeKey(\n                neighbor,\n                this.currentlyHoveredNodeId as string\n            ) as string;\n        });\n    }\n\n    getEdgeKey(node1: string, node2: string): string | null {\n        let go: string | undefined = State.graph.rawGraph.edge(node1, node2);\n        if (go === undefined) {\n            let back: string | undefined = State.graph.rawGraph.edge(\n                node2,\n                node1\n            );\n            if (back === undefined) {\n                return null;\n            } else {\n                return back;\n            }\n        } else {\n            return go;\n        }\n    }\n\n    setNodeToDefault(node: string) {\n        this.updateNodeVisualizeAttribute(node, {\n            hovered: false,\n            selected: false,\n        });\n    }\n    /**\n     * update the _visualize object inside node attribute and calls graph refresh\n     *\n     * @param {string} id\n     * @param {Attributes} attribute\n     * @memberof GraphMutation\n     */\n    updateNodeVisualizeAttribute(\n        id: string,\n        attribute: Attributes,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getNodeAttribute(\n                id,\n                \"_visualize\"\n            );\n        }\n\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n    /**\n     * update the _visualize object inside edge attribute and calls graph refresh\n     *\n     * @param {string} id\n     * @param {Attributes} attribute\n     * @memberof GraphMutation\n     */\n    updateEdgeVisualizeAttribute(\n        key: string,\n        attribute: Attributes,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getEdgeAttribute(\n                key,\n                \"_visualize\"\n            );\n        }\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n\n    /**\n     * update the _visualize object inside all the nodes attribute and calls graph refresh\n     *\n     * @param {Attributes} _attributeVisualize\n     * @memberof GraphMutation\n     */\n    updateNodesVisualizeAttribute(_attributeVisualize: Attributes) {\n        State.graph.rawGraph.updateEachNodeAttributes((node, attribute) => {\n            return {\n                ...attribute._visualize,\n                ..._attributeVisualize,\n            };\n        });\n    }\n\n    /**\n     *\n     * update the _visualize object inside all the edges attribute and calls graph refresh\n     *\n     * @param {Attributes} _attributeVisualize\n     * @memberof GraphMutation\n     */\n    updateEdgesVisualizeAttribute(_attributeVisualize: Attributes) {\n        State.graph.rawGraph.updateEachEdgeAttributes((node, attribute) => {\n            return {\n                ...attribute._visualize,\n                ..._attributeVisualize,\n            };\n        });\n    }\n\n    updateVisualizeAttributeParser(newAttribute: any, oldAttributes: any) {\n        if (newAttribute.hasOwnProperty(\"hovered\")) {\n            oldAttributes.hovered = newAttribute.hovered;\n        } else if (newAttribute.hasOwnProperty(\"selected\")) {\n            oldAttributes.selected = newAttribute.selected;\n        }\n    }\n\n    /**\n     * should call this on every refresh of graph DS\n     *\n     */\n    flush() {\n        this.selectedNode = null;\n        this.selectedNodes = [];\n        this.selectedEdge = null;\n        this.selectedEdges = [];\n        this.currentlyHoveredNodeId = null;\n        this.previouslyHoveredNodeId = null;\n    }\n}\n","import { autorun, reaction } from \"mobx\";\n\nimport PreferencesStore from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport ProjectStore from \"./ProjectStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\nimport InteractionStore from \"./InteractionStore\";\n\nclass AppState {\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    interaction!: InteractionStore;\n    import!: ImportStore;\n    search!: SearchStore;\n    project!: ProjectStore;\n    cluster!: ClusterStore;\n    css!: CssStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.interaction = new InteractionStore();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.project = new ProjectStore();\n        this.cluster = new ClusterStore();\n        this.css = new CssStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// this is for easily debugging in runtime\n//@ts-ignore\nwindow._state = State;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\nautorun(\n    () =>\n        (State.cluster.rawGraph = State.search.rawGraph = State.graph.rawGraph)\n);\n\nautorun(() => {\n    if (State.css.isAnimating === true) {\n        State.graphDelegate.graphDelegateMethods?.resumeAnimation();\n    } else {\n        State.graphDelegate.graphDelegateMethods?.pauseAnimation();\n    }\n});\n\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    (currentlyHoveredNodeId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredNodeId);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (node === currentlyHoveredNodeId) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (\n                State.interaction.currentlyHoveredNodeNeighborEdges?.includes(\n                    edge\n                )\n            ) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nreaction(\n    () => State.interaction.selectedNodes.map((node) => node),\n    (selectedNodes) => {\n        console.log(\"selectedNodes\", selectedNodes);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNodes.includes(node)) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nreaction(\n    () => State.interaction.selectedNode,\n    (selectedNode) => {\n        console.log(\"selectedNode\", selectedNode);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNode === node) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nreaction(\n    () => State.interaction.selectedEdge,\n    (selectedEdge) => {\n        console.log(\"selectedEdge\", selectedEdge);\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (selectedEdge === edge) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nexport default State;\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { copy } from \"copy-anything\";\n\ninterface Props {\n    /**\n     * whether or not to show the None\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    showNone: boolean;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * if None is selected, the item props will be set to null\n     *\n     * @memberof Props\n     */\n    onSelect: (item: string | null) => void;\n\n    /**\n     * the selected to display will sync with this props\n     *\n     * @type {(string | null)}\n     * @memberof Props\n     */\n    syncWith: string | null;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\n/**\n * this component can be used to choose the attribute among all the attributes, with addition none to choose (can be toggled to off)\n * to use it, you have to specify whether to add additional None to the list and onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ClusterChooser extends React.Component<Props, {}> {\n        static defaultProps = {\n            showNone: true,\n        };\n\n        get fullProperties(): string[] {\n            let propertiesWithNone = copy(State.graph.metadata.nodeProperties);\n            propertiesWithNone.unshift(\"None\");\n            return propertiesWithNone;\n        }\n\n        itemRenderer = (\n            item: any,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null => {\n            if (item === \"None\") {\n                return (\n                    <MenuItem\n                        intent=\"primary\"\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            } else {\n                return (\n                    <MenuItem\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            }\n        };\n\n        render() {\n            return (\n                <Select\n                    items={\n                        this.props.showNone\n                            ? this.fullProperties\n                            : State.graph.metadata.nodeProperties\n                    }\n                    itemRenderer={this.itemRenderer}\n                    filterable={false}\n                    onItemSelect={(item: string) => {\n                        let selected = item === \"None\" ? null : item;\n                        this.props.onSelect(selected);\n                    }}\n                >\n                    <Button text={this.props.syncWith ?? \"None\"} />\n                </Select>\n            );\n        }\n    }\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { ItemPredicate, Select } from \"@blueprintjs/labs\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    items: any[];\n    onSelect: (\n        item: any,\n        event?: React.SyntheticEvent<HTMLElement, Event> | undefined\n    ) => void;\n    text: string;\n    small: boolean;\n    search: boolean;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport function CommonItemRenderer(\n    item: any,\n    props: CustomIItemRendererProps\n): JSX.Element | null {\n    return <MenuItem key={item} onClick={props.handleClick} text={item} />;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        static defaultProps = {\n            small: false,\n            search: false,\n        };\n\n        itemPredicate: ItemPredicate<string> = (\n            query: string,\n            object: string\n        ) => {\n            return object.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n        };\n        render() {\n            if (this.props.search) {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemPredicate={this.itemPredicate}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={true}\n                        onItemSelect={this.props.onSelect}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            } else {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={false}\n                        onItemSelect={this.props.onSelect}\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    ButtonGroup,\n    Classes,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Popover,\n    Position,\n    Switch,\n} from \"@blueprintjs/core\";\nimport ClusterChooser from \"./utils/ClusterChooser\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport ComponentRef from \"./ComponentRef\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                            alt=\"PiperNet Logo\"\n                        />\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Load Sample\"\n                                        icon=\"graph\"\n                                        onClick={() => {\n                                            State.import.importSamplesDialogOpen = true;\n                                        }}\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from CSV...\"\n                                        onClick={() => {\n                                            State.import.importCSVDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from GEXF...\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.project.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                        <Switch\n                            label=\"Graph Animation\"\n                            checked={State.css.isAnimating}\n                            onChange={() =>\n                                (State.css.isAnimating = !State.css.isAnimating)\n                            }\n                        />\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <ButtonGroup>\n                        {/* <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider /> */}\n                    </ButtonGroup>\n\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        Clustered by\n                        <ClusterChooser\n                            onSelect={(cluster) => {\n                                State.cluster.setCluster(cluster);\n                            }}\n                            syncWith={State.cluster.clusterBy}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <SimpleSelect\n                            items={[\"trackball\", \"orbit\", \"fly\"]}\n                            text={State.preferences.controlType}\n                            onSelect={(it) => {\n                                State.preferences.controlType = it;\n                                ComponentRef.visualizer.updateVisualizationGraph();\n                            }}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            disabled={true}\n                            onClick={() => {\n                                State.preferences.preferenceDialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React, { ReactNode } from \"react\";\nimport { Button, Card, Classes, Collapse, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Card elevation={Elevation.THREE}>\n                    <Button\n                        className={classnames(\n                            Classes.LARGE,\n                            Classes.FILL,\n                            \"text-align-left\"\n                        )}\n                        rightIcon={\n                            this.props.isOpen ? \"chevron-up\" : \"chevron-down\"\n                        }\n                        onClick={this.props.onToggle}\n                    >\n                        {this.props.name}\n                    </Button>\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </Card>\n            );\n        }\n    }\n);\n","import convert from \"xml-js\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only edges file\";\n\nexport const COLOR_LIST = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32,\n};\n","import React from \"react\";\nimport {\n    Button,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    FileInput,\n    Intent,\n    Spinner,\n    Switch,\n    Tag,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\n\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../../constants\";\nimport { IEdgeFileConfig, INodeFileConfig } from \"../../state/ImportStore\";\n\ninterface PreviewTableProps {\n    file: INodeFileConfig | IEdgeFileConfig;\n}\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component<PreviewTableProps, {}> {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportCSVDialog extends React.Component {\n        state = {\n            loading: false,\n            available: ONLY_EDGE_FILE,\n            nodesOpen: true,\n            edgesOpen: true,\n            delimiter: \",\",\n        };\n\n        // determine if this state is importable\n        canImport = () => {\n            if (this.state.available === NODE_AND_EDGE_FILE) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else if (this.state.available === ONLY_EDGE_FILE) {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n            return false;\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            // show blank if node file not relevant\n            if (this.state.available === ONLY_EDGE_FILE) {\n                return null;\n            }\n\n            return (\n                <Collapsable\n                    name=\"Nodes\"\n                    isOpen={this.state.nodesOpen}\n                    onToggle={() =>\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.nodeFileName}\n                                onInputChange={(event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    if (\n                                        !target.files ||\n                                        target.files.length < 1\n                                    ) {\n                                        return;\n                                    }\n                                    State.import.nodeFileName =\n                                        target.files[0].name;\n                                    // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                    State.import.selectedNodeFileFromInput =\n                                        target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                text={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <Collapsable\n                    name=\"Edges\"\n                    isOpen={this.state.edgesOpen}\n                    onToggle={() =>\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.edgeFileName}\n                                onInputChange={(event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    if (\n                                        !target.files ||\n                                        target.files.length < 1\n                                    ) {\n                                        return;\n                                    }\n                                    State.import.edgeFileName =\n                                        target.files[0].name;\n                                    State.import.selectedEdgeFileFromInput =\n                                        target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />{\" \"}\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        text={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter === \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter === \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    style={{ minWidth: \"80vw\" }}\n                    icon=\"import\"\n                    isOpen={State.import.importCSVDialogOpen}\n                    onClose={() => {\n                        State.import.importCSVDialogOpen = false;\n                    }}\n                    title=\"Import CSV\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div>\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"import-dialog\"\n                                )}\n                            >\n                                I have:\n                                <SimpleSelect\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\n                                    text={this.state.available}\n                                    onSelect={(targetValue) => {\n                                        State.import.importConfig.hasNodeFile = !(\n                                            targetValue === ONLY_EDGE_FILE\n                                        );\n                                        this.setState({\n                                            available: targetValue,\n                                        });\n                                    }}\n                                />\n                                <Divider />\n                                {this.renderNodesSelection()}\n                                <br />\n                                {this.renderEdgesSelection()}\n                                <br />\n                                {this.renderDelimiterSelection()}\n                            </div>\n                            <div className={Classes.DIALOG_FOOTER}>\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                    <Button\n                                        className={classnames({\n                                            [Classes.DISABLED]: !this.canImport(),\n                                        })}\n                                        intent={Intent.PRIMARY}\n                                        onClick={() => {\n                                            State.import.isLoading = true;\n                                            State.import\n                                                .importGraphFromCSV()\n                                                .then((res) => {\n                                                    State.graph.setGraph(\n                                                        res.graph,\n                                                        res.metadata\n                                                    );\n                                                    State.import.isLoading = false;\n                                                    State.import.importCSVDialogOpen = false;\n                                                });\n                                        }}\n                                        text=\"Import\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    FileInput,\n    Intent,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            className={classnames({\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\n                            })}\n                            intent={Intent.PRIMARY}\n                            onClick={() => {\n                                State.import.isLoading = true;\n                                State.import\n                                    .importGraphFromGEXF()\n                                    .then((res) => {\n                                        State.graph.setGraph(\n                                            res.graph,\n                                            res.metadata\n                                        );\n                                        State.import.isLoading = false;\n                                        State.import.importGEXFDialogOpen = false;\n                                    });\n                            }}\n                            text=\"Import\"\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"import\"\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Import GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                let target = event.target as HTMLInputElement;\n                                                if (\n                                                    !target.files ||\n                                                    target.files.length < 1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    target.files[0].name;\n                                                // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                                State.import.selectedGEXFFileFromInput =\n                                                    target.files[0];\n\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    Classes,\n    Dialog,\n    Divider,\n    Elevation,\n    H3,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    class ExportDialog extends React.Component {\n        state = {\n            ready: true,\n        };\n\n        computeGEXFFile() {\n            return gexf.write(State.graph.rawGraph);\n        }\n\n        computeNodeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [];\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n                return null;\n            });\n            headers.push({ label: \"_id\", key: \"_id\" });\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.project.exportDialogOpen}\n                    onClose={() => {\n                        State.project.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br />\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        headers={this.computeNodeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        headers={this.computeEdgeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for === \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for === \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.setState({\n                            loading: true,\n                        });\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import { Attributes } from \"graphology-types\";\nimport React from \"react\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute !== \"_visualize\" &&\n            attribute !== \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Code,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it !== \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(\n                                rowIndex: number,\n                                columnIndex: number\n                            ) => this.renderCell(rowIndex, it)}\n                        />\n                    );\n                }\n                return null;\n            });\n            return columns.filter((element) => {\n                return element !== undefined;\n            });\n        };\n\n        renderCell = (rowIndex: number, attribute: string) => {\n            let cellAttributes = this.filteredTable[rowIndex].attributes!!;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    tooltip={cell}\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() => {\n                                State.preferences.AddNodeDialogOpen = true;\n                            }}\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                            fill={true}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class NodeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem, Tooltip } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class NodeChooser extends React.Component<Props, {}> {\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as null | SerializedEdge<Attributes>,\n            filterQuery: null as null | string,\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    !this.state.filterQuery ||\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of an Edge...\"\n                            value={this.state.filterQuery ?? \"\"}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class EdgeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n    Tooltip,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    class NodeAdder extends React.Component<Props, {}> {\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId !== \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip>\n            ) : (\n                <Tooltip\n                    content={\n                        \"This Node Id is currently in use by other nodes, try with another one instead\"\n                    }\n                    intent=\"warning\"\n                >\n                    <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                </Tooltip>\n            );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute !== \"_options\" && attribute !== \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.mutating.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.preferences.AddNodeDialogOpen = false;\n                            // State.preferences.rightClickBackgroundPanelOpen = false;\n                            // this.forceUpdate();\n                            // State.graphDelegate.cameraFocusOn(this.state.newNodeId);\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Classes, Dialog, Tag } from \"@blueprintjs/core\";\nimport NodeAdder from \"../utils/NodeAdder\";\nimport State from \"../../state\";\n\nexport default observer(\n    class AddNodeDialog extends React.Component {\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => {\n                        State.preferences.AddNodeDialogOpen = false;\n                    }}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New edges are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    Intent,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport NodeChooser from \"../utils/NodeChooser\";\nexport default observer(\n    class AddEdgeDialog extends React.Component {\n        state = {\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => {\n                        State.preferences.AddEdgeDialogOpen = false;\n                    }}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.forceUpdate();\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportCSVDialog from \"./dialogs/ImportCSVDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\nimport ImportSamplesDialog from \"./dialogs/ImportGEXFDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\nimport AddNodeDialog from \"./dialogs/AddNodeDialog\";\nimport AddEdgeDialog from \"./dialogs/AddEdgeDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportCSVDialog />\n                <ImportGEXFDialog />\n                <ImportSamplesDialog />\n                {/*\n                <ProjectDetailDialog />\n                <RenameSnapshotDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog />\\\n                */}\n                <AddNodeDialog />\n                <AddEdgeDialog />\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\nimport SpriteText from \"three-spritetext\";\nimport {\n    ICustomLinkObject,\n    ICustomNodeObject,\n} from \"../../state/GraphDelegate\";\n\ninterface Props {\n    controlType: \"trackball\" | \"orbit\" | \"fly\";\n}\n\nexport default observer(\n    class ThreeJSVis extends React.Component<Props, {}> {\n        state = {\n            visualizationGraph: State.graphDelegate.visualizationGraph(),\n        };\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        hoverNodeCallback = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            // to avoid frequent refresh\n\n            if (node === null) {\n                State.interaction.currentlyHoveredNodeId = null;\n            } else if (node !== previousNode) {\n                let current: string = node.id as string;\n                State.interaction.previouslyHoveredNodeId =\n                    State.interaction.currentlyHoveredNodeId;\n                State.interaction.currentlyHoveredNodeId = current;\n            }\n        };\n\n        nodeLeftClickCallback = (node: NodeObject, event: MouseEvent) => {\n            let nodeId = node.id as string;\n            if (event.ctrlKey || event.shiftKey) {\n                // multi-selection\n                let index;\n                // if already in the list of selected, remove\n                if (\n                    (index = State.interaction.selectedNodes.indexOf(\n                        nodeId\n                    )) !== -1\n                ) {\n                    State.interaction.selectedNodes.splice(index, 1);\n                } else {\n                    // if not in the list, add\n                    State.interaction.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single select\n                State.interaction.selectedNode = node.id as string;\n            }\n        };\n\n        nodeRightClickCallback = (node: NodeObject, event: MouseEvent) => {\n            State.interaction.selectedNode = node.id as string;\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickBackgroundPanelOpen = false;\n            State.preferences.rightClickNodePanelOpen = true;\n            this.closeAllPanel();\n        };\n\n        backgroundClickCallback = (event: MouseEvent) => {\n            // cancel all selection\n            State.interaction.selectedNodes = [];\n            State.preferences.rightClickNodePanelOpen = false;\n            State.preferences.rightClickBackgroundPanelOpen = false;\n            this.closeAllPanel();\n        };\n\n        backgroundRightClickCallback = (event: MouseEvent) => {\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickNodePanelOpen = false;\n            State.preferences.rightClickBackgroundPanelOpen = true;\n            this.closeAllPanel();\n        };\n\n        computeNodeColor(_node: NodeObject) {\n            let node = _node as ICustomNodeObject;\n            if (node.hovered) {\n                return State.css.node.highlightColor;\n            } else if (node.selected) {\n                return State.css.node.selectedColor;\n            } else {\n                return State.css.node.defaultColor;\n            }\n        }\n\n        computeEdgeColor(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightColor;\n            } else if (edge.selected) {\n                return State.css.edge.selectedColor;\n            } else {\n                return State.css.edge.defaultColor;\n            }\n        }\n        computeEdgeWidth(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightWidth;\n            } else if (edge.selected) {\n                return State.css.edge.highlightWidth;\n            } else {\n                return State.css.edge.defaultWidth;\n            }\n        }\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <ForceGraph3D\n                        // Data Segment\n                        ref={this.graphRef}\n                        graphData={this.state.visualizationGraph}\n                        controlType={this.props.controlType}\n                        // Node Visualization Segment\n                        nodeLabel=\"id\"\n                        nodeRelSize={State.css.node.size}\n                        nodeColor={this.computeNodeColor}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        nodeResolution={State.css.node.resolution}\n                        nodeThreeObjectExtend={true}\n                        nodeThreeObject={(node) => {\n                            const sprite = new SpriteText(`${node.id}`);\n                            sprite.color = State.css.label.color;\n                            sprite.textHeight = State.css.label.size;\n                            sprite.visible = State.css.label.show;\n                            return sprite;\n                        }}\n                        // Node Manipulation Segment\n                        onNodeHover={this.hoverNodeCallback}\n                        onNodeClick={this.nodeLeftClickCallback}\n                        onNodeRightClick={this.nodeRightClickCallback}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        // Link Visualization Segment\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        linkWidth={this.computeEdgeWidth}\n                        linkColor={this.computeEdgeColor}\n                        // Graph Manipulation Segment\n                        onBackgroundRightClick={\n                            this.backgroundRightClickCallback\n                        }\n                        onBackgroundClick={this.backgroundClickCallback}\n                        // Engine\n                        onEngineTick={() =>\n                            this.graphDelegate.clusterObject.clusterDelegation()\n                        }\n                    />\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        updateVisualizationGraph() {\n            this.setState({\n                visualizationGraph: State.graphDelegate.visualizationGraph(),\n            });\n            // this.graphMethods.refresh();\n        }\n\n        closeAllPanel() {\n            State.preferences.deleteEdgePanelOpen = false;\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n            ComponentRef.visualizer = this;\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\ninterface Props {\n    /**\n     * the node id of the select node\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class NodeDetail extends React.Component<Props, {}> {\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                this.props.onNode,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Editable Cell where user can edit the value of certain property;\n            return (\n                <EditableCell\n                    value={data}\n                    onChange={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    onConfirm={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    tooltip={data}\n                />\n            );\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"node-details-table\"\n                        )}\n                    >\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"nodes-details-table\"\n                        )}\n                    >\n                        <Table numRows={State.interaction.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.interaction.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { InputGroup, Menu, MenuItem } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\n\nexport default observer(\n    class SearchPanel extends React.Component {\n        renderSearchResults = () => {\n            return State.search.candidates.map((it) => {\n                return (\n                    <MenuItem\n                        text={it}\n                        onMouseOver={() => {\n                            State.search.isPreviewing = true;\n                            State.interaction.currentlyHoveredNodeId = it;\n                            State.graphDelegate.cameraFocusOn(it);\n                        }}\n                    />\n                );\n            });\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div className={classnames(\"search\")}>\n                        {State.search.candidates.length !== 0 && (\n                            <Menu\n                                large={true}\n                                className={classnames(\"search-menu\")}\n                                onMouseLeave={() => {\n                                    State.search.isPreviewing = false;\n                                }}\n                            >\n                                {this.renderSearchResults()}\n                            </Menu>\n                        )}\n                        <InputGroup\n                            asyncControl={true}\n                            large={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange(\n                                (value) => (State.search.searchStr = value)\n                            )}\n                            placeholder=\"Search any Node...\"\n                            value={State.search.searchStr}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Classes, Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\nexport default observer(\n    class RightClickNodePanel extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuDivider\n                        title={\n                            (\"Node ID: \" +\n                                State.interaction\n                                    .currentlyHoveredNodeId) as string\n                        }\n                    />\n                    <MenuItem\n                        icon=\"graph-remove\"\n                        text=\"Delete Node\"\n                        onClick={() => {\n                            State.graph.mutating.dropNode(\n                                State.interaction\n                                    .currentlyHoveredNodeId as string\n                            );\n                            State.preferences.rightClickNodePanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                    <MenuItem\n                        icon=\"new-link\"\n                        text=\"Add Edge\"\n                        onClick={() => {\n                            State.preferences.AddEdgeDialogOpen = true;\n                        }}\n                    />\n                    <MenuItem\n                        icon=\"cross\"\n                        text=\"Delete Edge\"\n                        onClick={() => {\n                            State.preferences.deleteEdgePanelOpen = true;\n                            State.preferences.rightClickNodePanelOpen = false;\n                        }}\n                    />\n                </Menu>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\nexport default observer(\n    class RightClickBackgroundPanel extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"new-object\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickBackgroundPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Alert, Button, Card, Code, H6, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\n\ninterface Props {\n    /**\n     * the node id of the select node to delete Edge\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class DeleteEdgeInteractionPanel extends React.Component<Props, {}> {\n        state = {\n            targetNode: null as string | null,\n            deleteAlertOpen: false,\n        };\n\n        get neighbors(): string[] {\n            return State.graph.rawGraph.neighbors(this.props.onNode);\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            let targetNode = this.neighbors[rowIndex];\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                targetNode: targetNode,\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            if (this.state.targetNode === null) {\n                return null;\n            }\n\n            let edgeToDelete: string | undefined;\n\n            if (\n                (edgeToDelete = State.graph.rawGraph.edge(\n                    this.state.targetNode,\n                    this.props.onNode\n                )) === undefined\n            ) {\n                edgeToDelete = State.graph.rawGraph.edge(\n                    this.props.onNode,\n                    this.state.targetNode\n                );\n            }\n\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(edgeToDelete as string);\n                        this.setState({ deleteAlertOpen: false });\n                        State.preferences.deleteEdgePanelOpen = false;\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with Key{\" \"}\n                        <Code>{edgeToDelete as string}</Code> between Node ID{\" \"}\n                        <Code>{this.state.targetNode}</Code> and Node ID{\" \"}\n                        <Code>{this.props.onNode}</Code>. This action cannot be\n                        reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        neighborsRenderer: ICellRenderer = (rowIndex: number) => {\n            return (\n                <Cell interactive={true}>\n                    <div\n                        onMouseEnter={() => {\n                            State.graphDelegate.cameraFocusOn(\n                                this.props.onNode,\n                                400\n                            );\n                            State.interaction.selectedEdge = State.interaction.getEdgeKey(\n                                this.props.onNode,\n                                this.neighbors[rowIndex]\n                            ) as string;\n                        }}\n                    >\n                        {this.neighbors[rowIndex]}\n                    </div>\n                </Cell>\n            );\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={classnames(\"node-details-table\")}>\n                        <Button\n                            icon=\"cross\"\n                            onClick={() => {\n                                State.preferences.deleteEdgePanelOpen = false;\n                                State.interaction.selectedEdge = null;\n                                State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                            }}\n                        >\n                            Close\n                        </Button>\n                        <H6> Node ID: {this.props.onNode}</H6>\n                        <Table\n                            numRows={this.neighbors.length}\n                            defaultRowHeight={30}\n                            renderMode={RenderMode.NONE}\n                        >\n                            <Column\n                                name=\"\"\n                                cellRenderer={this.deleteEdgeRenderer}\n                                //@ts-ignore\n                                style={this.style}\n                            />\n                            <Column\n                                name=\"Node ID\"\n                                //@ts-ignore\n                                intent={Intent.PRIMARY}\n                                cellRenderer={this.neighborsRenderer}\n                            />\n                        </Table>\n                        {this.deleteEdgeAlert()}\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes, Slider } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\n\nexport default observer(\n    class ClusterPanel extends React.Component {\n        state = {\n            shapeOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        forceCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Force\"\n                    isOpen={this.state.forceOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            forceOptionOpen: !this.state.forceOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Cluster Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.clusterForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.clusterForce}\n                        />\n                    </div>\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Normal Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.normalForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.normalForce}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <p style={{ textAlign: \"left\" }}>\n                            Cluster Shape:\n                            <span style={{ float: \"right\" }}>\n                                <SimpleSelect\n                                    items={[\"convexHull\", \"sphere\"]}\n                                    text={State.css.cluster.shape}\n                                    onSelect={(it) =>\n                                        (State.css.cluster.shape = it)\n                                    }\n                                    small={true}\n                                />\n                            </span>\n                        </p>\n                    </div>\n                    {State.css.cluster.shape === \"sphere\" && (\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            Cluster Resolution:\n                            <br />\n                            <Slider\n                                min={2}\n                                max={20}\n                                stepSize={1}\n                                labelStepSize={5}\n                                onChange={(value) => {\n                                    State.css.cluster.resolution = value;\n                                }}\n                                value={State.css.cluster.resolution}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Clusters</p>\n                    </div>\n                    {this.forceCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport {\n    Button,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { ColorResult, SketchPicker } from \"react-color\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the color to be previewed on the button\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    color: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     *\n     * @memberof Props\n     */\n    onChange: (color: ColorResult) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ColorPicker extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Popover\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    position={Position.RIGHT}\n                >\n                    <Button\n                        text=\"  \"\n                        style={{\n                            backgroundColor: this.props.color,\n                        }}\n                        small={true}\n                    />\n                    <div>\n                        <SketchPicker\n                            color={this.props.color}\n                            onChange={(it) => {\n                                this.props.onChange(it);\n                            }}\n                        />\n                    </div>\n                </Popover>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n        state = {\n            sizeOptionOpen: false,\n            thicknessOptionOpen: false,\n            colorOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Default Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.defaultColor}\n                                            onChange={(it) => {\n                                                State.css.edge.defaultColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Selected Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.selectedColor}\n                                            onChange={(it) => {\n                                                State.css.edge.selectedColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Highlight Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={\n                                                State.css.edge.highlightColor\n                                            }\n                                            onChange={(it) => {\n                                                State.css.edge.highlightColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Slider, Switch } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport classnames from \"classnames\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <Switch\n                        label=\"Show Node Label\"\n                        checked={State.css.label.show}\n                        onChange={() => {\n                            State.css.label.show = !State.css.label.show;\n                            State.graphDelegate.graphDelegateMethods.refresh();\n                        }}\n                    />\n                    <br />\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Label Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={10}\n                            stepSize={1}\n                            labelStepSize={2}\n                            onChange={(value) => {\n                                State.css.label.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.label.size}\n                        />\n                        <br />\n                        <p style={{ textAlign: \"left\" }}>\n                            Label Color:\n                            <span style={{ float: \"right\" }}>\n                                <ColorPicker\n                                    color={State.css.label.color}\n                                    onChange={(it) => {\n                                        State.css.label.color = it.hex;\n                                        State.graphDelegate.graphDelegateMethods.refresh();\n                                    }}\n                                />\n                            </span>\n                        </p>\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes, Slider } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class NodesPanel extends React.Component {\n        state = {\n            timeOutRef: null,\n            colorOptionOpen: false,\n            sizeOptionOpen: false,\n            shapeOptionOpen: false,\n        };\n\n        colorCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Color\"\n                    isOpen={this.state.colorOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            colorOptionOpen: !this.state.colorOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Default Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.defaultColor}\n                                        onChange={(it) => {\n                                            State.css.node.defaultColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Selected Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.selectedColor}\n                                        onChange={(it) => {\n                                            State.css.node.selectedColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Highlight Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.highlightColor}\n                                        onChange={(it) => {\n                                            State.css.node.highlightColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        sizeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Size\"\n                    isOpen={this.state.sizeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            sizeOptionOpen: !this.state.sizeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Node Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.node.size}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Node Resolution:\n                        <br />\n                        <Slider\n                            min={2}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.resolution = value;\n                            }}\n                            value={State.css.node.resolution}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Nodes</p>\n                    </div>\n                    {this.colorCollapse()}\n                    {this.sizeCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n","import { H3, Tab, Tabs } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport ClusterPanel from \"./ClusterPanel\";\nimport EdgesPanel from \"./EdgesPanel\";\nimport LabelsPanel from \"./LabelsPanel\";\nimport NodesPanel from \"./NodesPanel\";\n\nexport default observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <H3>Graph Options</H3>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        <Tab\n                            id=\"clusters\"\n                            title=\"Clusters\"\n                            panel={<ClusterPanel />}\n                        />\n\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport NodeDetailPanel from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport SearchPanel from \"./panels/SearchPanel\";\nimport RightClickNodePanel from \"./panels/RightClickNodePanel\";\nimport RightClickBackgroundPanel from \"./panels/RightClickBackgroundPanel\";\nimport DeleteEdgeInteractionPanel from \"./panels/DeleteEdgeInteractionPanel\";\nimport GraphOptionsCard from \"./panels/GraphOptionsCard\";\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.isGraphOptionsCardHidden = !State.preferences\n                .isGraphOptionsCardHidden;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.isGraphOptionsCardHidden\n                                    ? this.optionsInvisible\n                                    : this.optionsVisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            />\n                            <br />\n                            <GraphOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.isGraphOptionsCardHidden\n                                        ? this.sideButtonVis\n                                        : this.sideButtonInv\n                                }\n                            />\n                        </div>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.interaction.currentlyHoveredNodeId &&\n                        State.interaction.selectedNodes.length === 0 && (\n                            <NodeDetailPanel\n                                onNode={\n                                    State.interaction.currentlyHoveredNodeId\n                                }\n                            />\n                        )}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.interaction.selectedNodes.length !== 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    <SearchPanel />\n                    {State.preferences.rightClickNodePanelOpen && (\n                        <RightClickNodePanel />\n                    )}\n\n                    {State.preferences.rightClickBackgroundPanelOpen && (\n                        <RightClickBackgroundPanel />\n                    )}\n                    {State.preferences.deleteEdgePanelOpen &&\n                        State.interaction.selectedNode && (\n                            <DeleteEdgeInteractionPanel\n                                onNode={State.interaction.selectedNode}\n                            />\n                        )}\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\n// import State from \"./state\";\n// import EdgesPanel from \"./components/panels/EdgesPanel\";\n// import LabelsPanel from \"./components/panels/LabelsPanel\";\n// import SelectionPanel from \"./components/panels/SelectionPanel\";\n// import GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}