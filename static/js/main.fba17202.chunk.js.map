{"version":3,"sources":["state/PreferencesStore.ts","state/GraphStore.ts","state/ImportStore.ts","state/ProjectStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","state/GraphDelegate.ts","state/index.ts","components/utils/ClusterChooser.tsx","images/logo.png","components/Navbar.tsx","components/utils/Collapsable.tsx","components/utils/SimpleSelect.tsx","constants/index.ts","components/dialogs/ImportCSVDialog.tsx","components/dialogs/ImportGEXFDialog.tsx","components/dialogs/ExportDialog.tsx","components/utils/DataSheetDialogWrapper.tsx","components/utils/InputFormUtils.ts","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/utils/NodeAdder.tsx","components/dialogs/AddNodeDialog.tsx","components/Dialogs.tsx","components/visualize/visualizer.tsx","components/panels/GlobalPanel.tsx","components/utils/SwitchCollapsable.tsx","components/panels/SelectionPanel.tsx","components/panels/NodesPanel.tsx","components/panels/EdgesPanel.tsx","components/panels/LabelsPanel.tsx","components/ComponentRef.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/SearchPanel.tsx","components/panels/RightClickNodePanel.tsx","components/panels/RightClickBackgroundPanel.tsx","components/panels/DeleteEdgeInteractionPanel.tsx","components/FloatingCards.tsx","App.js","reportWebVitals.js","index.js"],"names":["PreferencesStore","rightClickBackgroundPanelOpen","rightClickNodePanelOpen","rightClickPositionX","rightClickPositionY","deleteEdgePanelOpen","preferenceDialogOpen","darkMode","statisticsDialogOpen","helpDialogOpen","neighborDialogOpen","AddNodeDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","isRenderOptionsCardHidden","view","makeAutoObservable","this","GraphStore","rawGraph","Graph","allowSelfLoops","multi","type","selectedNodes","selectedNode","currentlyHoveredId","metadata","snapshotName","nodeProperties","node","attributes","_visualize","id","val","isClusterNode","source","target","isClusterLink","_rawGraph","forEachNode","decorateRawNode","forEachEdge","edge","decorateRawEdge","newGraph","decorateRawGraph","flush","State","cluster","clusterBy","order","size","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importCSVDialogOpen","importSamplesDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","position","Position","TOP","show","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","graph","readNodeCSV","forEach","nodeId","toString","addNode","readEdgeCSV","hasNode","addEdge","Object","keys","readGEXF","entries","getNodeAttributes","nodes","key","push","clusterProperties","edgeProperties","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","length","join","console","log","it","onerror","error","action","onClick","window","location","reload","text","nodeFileConfig","ProjectStore","currentSnapshotName","exportDialogOpen","renameSnapshotDialogOpen","SearchStore","isPreviewing","searchStr","observable","ref","list","searchStrIgnoreCase","toLocaleLowerCase","match","searchId","includes","searchQuery","searchAttr","searchValue","hasOwnProperty","ClusterStore","keyValueMap","Map","attribute","set","Array","from","Set","keyAttribute","values","attributeKeysMap","getAttributeValues","value","get","colors","randomcolor","seed","count","THREE","x","y","z","CssStore","colorBy","color","scale","to","sizeBy","min","max","labelBy","shape","labelSize","labelLength","edges","isAnimating","enableDegree","enableDensity","enableDiameter","enableCoefficient","enableComponent","GraphDelegate","graphDelegateMethods","threeScene","nodeVisibility","nodeObject","linkVisibility","lastObject3D","highlightLink","_graphDelegateMethods","scene","addInvisibleClusterNode","tempGraph","links","oldGraph","graphCopy","copy","names","index","clusterID","attributeKeys","remove","convexHullObjects","add","newMap","attributePoints","convexHull","ConvexGeometry","createMesh","distance","getNodeAttribute","distRatio","Math","hypot","cameraPosition","link","_if","_else","_default","graphDelegate","sourceId","targetId","geom","name","meshMaterial","attributeColor","transparent","opacity","side","wireFrameMat","wireframe","SceneUtils","createMultiMaterialObject","AppState","preferences","import","search","project","css","_instance","instance","privateConstructor","_state","autorun","renderImportEdgePreview","renderImportNodePreview","resumeAnimation","pauseAnimation","observer","state","choose","itemRenderer","item","props","handleClick","propertiesWithNone","unshift","items","showNone","fullProperties","filterable","onItemSelect","selected","setState","onSelect","React","Component","defaultProps","className","classnames","Classes","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","alt","NAVBAR_HEADING","icon","BOTTOM","BUTTON","MINIMAL","label","checked","onChange","ALIGN_RIGHT","NAVBAR_DIVIDER","disabled","open","elevation","Elevation","LARGE","FILL","rightIcon","isOpen","onToggle","children","CommonItemRenderer","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","PreviewTable","renderWrapper","numRows","selectedRegions","indexOf","rows","cols","cellRenderer","i","loading","available","nodesOpen","edgesOpen","canImport","renderNodesSelection","Collapsable","CONTROL_GROUP","INPUT_GROUP","onInputChange","event","files","renderEdgesSelection","newDelimiter","style","minWidth","DARK","onClose","DIALOG_BODY","targetValue","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","DISABLED","PRIMARY","importGraphFromCSV","then","res","setGraph","fileIsSelect","importGraphFromGEXF","renderImportButton","ready","write","headers","exportData","export","data","_id","interactive","ONE","minimal","computeGEXFFile","filename","computeNodeFile","separator","computeEdgeFile","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","setTimeout","renderTable","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","renderColumns","rowIndex","columnIndex","renderCell","filter","element","cell","filteredTable","newVal","setValue","onConfirm","tooltip","setNodeAttribute","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","dropNode","textAlign","newTable","forceUpdate","asyncControl","leftIcon","placeholder","defaultRowHeight","SUCCESS","select","labelFor","labelInfo","itemPredicate","query","noResults","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","dropEdge","addEdgeDialog","onClosed","fill","hasEdge","renderMode","RenderMode","NONE","newNodeId","canImportTag","renderAttributesForm","newValue","componentDidMount","prop","autoFocus","rightElement","onAdded","Dialogs","display","graphRef","createRef","nodeHover","previousNode","getNodeId","nodeSelect","ctrlKey","shiftKey","splice","graphMethods","refresh","nodeRightClick","backgroundRightClick","renderGraph","graphData","visualizationGraph","nodeResolution","onNodeDragEnd","fx","fy","fz","onBackgroundRightClick","linkWidth","ifHighlightLink","linkColor","linkDirectionalParticles","linkDirectionalParticleWidth","onEngineTick","clusterDelegation","nodeColor","onNodeClick","onNodeRightClick","onBackgroundClick","onNodeHover","current","mountDelegateMethods","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","backgroundImage","marginTop","x1","y1","x2","y2","stopColor","stopOpacity","offset","stepSize","labelStepSize","pluralize","labelOptionOpen","RIGHT","getRenderedNodes","thicknessOptionOpen","backgroundColor","hex","marginLeft","initialValue","ComponentRef","nodeDetail","multiNodeDetail","reaction","cellRenderer_property","cellRenderer_value","onNode","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","enableRowHeader","renderSearchResults","candidates","onMouseOver","cameraFocusOn","large","onMouseLeave","makeObservable","stylePosition","computed","top","left","ELEVATION_1","targetNode","neighbors","edgeKey","neighborsRenderer","forEachNeighbor","neighbor","RenderOptionsCard","animate","panel","Expander","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","ELEVATION_2","paddingTop","paddingRight","paddingBottom","NodeDetailPanel","MultiDetailPanel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fba17202.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    rightClickBackgroundPanelOpen = false;\n    rightClickNodePanelOpen = false;\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    deleteEdgePanelOpen = false;\n\n    preferenceDialogOpen = false;\n\n    darkMode = true;\n\n    statisticsDialogOpen = false;\n    helpDialogOpen = false;\n    neighborDialogOpen = false;\n    AddNodeDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    isRenderOptionsCardHidden = true;\n\n    view = \"3D\";\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { Attributes } from \"graphology-types\";\nimport State from \".\";\n\nexport interface IMetaData {\n    snapshotName: string;\n\n    // attributes of nodes in imported graph\n    nodeProperties: string[];\n}\n\n/**\n * the class to store a raw graph as well as the related information\n \n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     *\n     * @see graphology\n     *\n     * @type {Graph}\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * should be called when individual nodes are added to the graph.\n\n     * add the CustomNodeObject to node attributes stored in the data structure\n     * @see CustomNodeObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} node\n     * @param {Attributes} attributes\n     */\n    decorateRawNode(node: string, attributes: Attributes) {\n        attributes._visualize = {\n            id: node,\n            val: 1, // to be changed, to represent the size of the node\n            isClusterNode: false, // if is clusterNode, then the front-end will ignore this node\n        };\n    }\n\n    /**\n     * should be called when individual edges are added to the graph.\n     *\n     * add the CustomLinkObject to node attributes stored in the data structure\n     * @see CustomLinkObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} source\n     * @param {string} target\n     * @param {Attributes} attributes\n     */\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        attributes._visualize = {\n            source: source,\n            target: target,\n            isClusterLink: false, // if is clusterLink, then the front-end will ignore this link\n        };\n    }\n\n    /**\n     * should be called on every graph import\n     * add the the _visualize to every links inside the specified graph\n     *\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    \n    /**\n     * proxy method to set the new graph\n     * if intend to set a new graph, please use this method instead of directly modify GraphStore\n     *\n     * @param {Graph} newGraph\n     * @param {IMetaData} metadata\n     */\n    public setGraph(newGraph: Graph, metadata: IMetaData) {\n        this.rawGraph = this.decorateRawGraph(newGraph);\n        this.metadata = metadata;\n        this.flush();\n        State.cluster.clusterBy = null;\n    }\n\n    /**\n     * the currently selected node ids\n     * the singleNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string[]}\n     */\n    selectedNodes: string[] = [];\n\n    /**\n     * the currently selected node id\n     *\n     * @type {string}\n     */\n    selectedNode: string | null = null;\n\n    /**\n     * the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string}\n     */\n    currentlyHoveredId: string | null = null;\n\n    /**\n     * should call this on every refresh of graph DS\n     *\n     */\n    flush() {\n        this.selectedNodes = [];\n        this.selectedNode = null;\n        this.currentlyHoveredId = null;\n    }\n\n    /**\n     * if currently there is a graph in the dataset\n     *\n     * @readonly\n     */\n    get hasGraph() {\n        return this.rawGraph.order && this.rawGraph.size !== 0;\n    }\n\n    /**\n     * the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     *\n     */\n    metadata: IMetaData = {\n        snapshotName: \"SNAPSHOT\",\n        nodeProperties: [],\n    };\n}\n","import { Intent, Position, Toaster } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\n\nexport interface INodeFileConfig {\n    // the file is successfully parsed and ready for display\n    isReady: boolean;\n    parseError: boolean;\n    path: string;\n\n    // has header at the top\n    hasHeader: boolean;\n\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n    topN: any[];\n    //names for the columns of this csv\n    columns: string[];\n    mapping: {\n        id: string;\n    };\n    delimiter: string;\n}\n\nexport interface IEdgeFileConfig {\n    isReady: boolean;\n    parseError: boolean;\n\n    // should save the csv to temp for further change the cluster attribute\n    path: string;\n    hasHeader: boolean;\n\n    // array of objects storing the\n    topN: any[];\n    columns: string[];\n    mapping: {\n        fromId: string;\n        toId: string;\n    };\n    delimiter: string;\n}\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importCSVDialogOpen = false;\n    importSamplesDialogOpen = false;\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as INodeFileConfig,\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as IEdgeFileConfig,\n    };\n\n    /**\n     * read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     *\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @return {*}  {Promise<Object[]>}\n     * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     *\n     * @private\n     * @return {*}  {Promise<Graph>}\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, reader.result as string));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     *\n     * @return {*}\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: true,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            tempNodes = await this.readNodeCSV();\n            tempNodes.forEach((node) => {\n                let nodeId = node[config.nodeFile.mapping.id].toString();\n                delete node[config.nodeFile.mapping.id];\n                graph.addNode(nodeId, node);\n            });\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, { id: fromId });\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, { id: toId });\n            }\n            graph.addEdge(fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            },\n        };\n    }\n\n    //TODO:import 里的id和cluster， source target还没设置\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n\n        for (const [key] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n                clusterProperties: null,\n                edgeProperties: [\"source_id\", \"target_id\"],\n            },\n        };\n    }\n\n    /**\n     * change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length === 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class ProjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    currentSnapshotName = \"Untitled\";\n\n    exportDialogOpen = false;\n    renameSnapshotDialogOpen = false;\n}\n","import Graph from \"graphology\";\nimport { makeAutoObservable, observable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n\n    // if is previewing, ignore all mouse hovers detected by NodeDetailPanel because it is showing the detail of selected node\n    isPreviewing = false;\n\n    // can use defined regex\n    // id:123\n    // attr:color:red\n    searchStr = \"\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    // contains node ids\n    get candidates(): string[] {\n        let list: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (searchStrIgnoreCase.match(/^id:.+/g)) {\n            const searchId = searchStrIgnoreCase.split(/^id:/g)[1].trim();\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchId)) {\n                    list.push(node);\n                }\n            });\n        } else if (searchStrIgnoreCase.match(/^attr:.+:.+/g)) {\n            let searchQuery = searchStrIgnoreCase\n                .split(/^attr:/g)[1]\n                .trim()\n                .split(/:/g);\n            const searchAttr = searchQuery[0].trim();\n            const searchValue = searchQuery[1].trim();\n            this.rawGraph.forEachNode((node, attributes) => {\n                if (\n                    attributes.hasOwnProperty(searchAttr) &&\n                    (attributes[searchAttr] as string)\n                        .toLocaleLowerCase()\n                        .includes(searchValue)\n                ) {\n                    list.push(node);\n                }\n            });\n        } else if (this.searchStr === \"\") {\n        } else {\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(this.searchStr)) {\n                    list.push(node);\n                }\n            });\n        }\n\n        return list;\n    }\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\n\n/**\n * all the computed values get from the rawGraph\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    /**\n     * @observable\n     * Specify which attribute to be clustered\n     * if this is changed, all get values will be updated\n     * the default value should be None, and front-end graph will interpret this to Not-Cluster\n     *\n     */\n    clusterBy: string | null = null;\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     */\n    rawGraph!: Graph;\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     *\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const keyValueMap = new Map<string, string | number>();\n        if (this.clusterBy === null) {\n            return keyValueMap;\n        }\n        const attribute = this.clusterBy as string;\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * the possible attribute values of the attribute defined by $clusterBy\n     *\n     * @readonly\n     * @type {((string | number)[])}\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     *\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     *\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.forEach((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.forEach((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * the configurations to set to cascade the graph\n *\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    config = {\n        nodes: {\n            colorBy: \"pagerank\",\n            color: {\n                scale: \"Linear Scale\",\n                from: \"#448AFF\",\n                to: \"#E91E63\",\n            },\n            sizeBy: \"pagerank\",\n            size: {\n                min: 2,\n                max: 10,\n                scale: \"Linear Scale\",\n            },\n            labelBy: \"node_id\",\n            shape: \"circle\",\n            labelSize: 1,\n            labelLength: 10,\n        },\n        edges: {\n            color: \"#7f7f7f\",\n        },\n    };\n\n    isAnimating: boolean = true;\n\n    enableDegree = true;\n    enableDensity = true;\n    enableDiameter = false;\n    enableCoefficient = true;\n    enableComponent = true;\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport { SceneUtils } from \"three/examples/jsm/utils/SceneUtils.js\";\nimport * as THREE from \"three\";\nimport { copy } from \"copy-anything\";\n\nexport interface CustomNodeObject extends NodeObject {\n    val?: number;\n    isClusterNode?: boolean;\n}\n\nexport interface CustomLinkObject extends LinkObject {\n    isClusterLink?: boolean;\n}\n\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * assign the force-graph methods to this class\n     * should be called as long as the visualizer react component is mounted\n     *\n     * @param {ForceGraphMethods} _graphDelegateMethods\n     */\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    /**\n     * the ForceGraphMethods exposed by the visualization force-graph\n     *\n     * @see ForceGraphMethods\n     *\n     * @type {ForceGraphMethods}\n     */\n    graphDelegateMethods!: ForceGraphMethods;\n\n    /**\n     * the THREE.js WebGL Scene of the visualization\n     *\n     * @type {THREE.Scene}\n     */\n    threeScene!: THREE.Scene;\n\n    /**\n     * compute the delegate graph that will be used by the ForceGraph3D\n     * will add invisible cluster nodes and edges to balance the clustered graph and adjust force\n     * the NodeObject and LinkObject inside attributes (named _visualize) will be used.\n     *\n     * nodes and edges with the show=false will be ignored in this case\n     *\n     * @readonly\n     */\n    get visualizationGraph() {\n        let newGraph: Graph;\n        if (State.cluster.clusterBy === \"None\") {\n            newGraph = State.graph.rawGraph;\n        } else {\n            newGraph = State.graph.decorateRawGraph(\n                this.addInvisibleClusterNode(State.graph.rawGraph)\n            );\n        }\n        let tempGraph = {\n            nodes: [] as CustomNodeObject[],\n            links: [] as LinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    /**\n     * return a new graph that contains the invisible clusters, formed as nodes\n     * as well as the edges that connected to the cluster node to simulate the force within the same cluster\n     * the new graph is a deep copy of the old node, so no worries of the original graph DS\n     *\n     * @private\n     * @param {Graph} oldGraph\n     * @returns {*}  {Graph}\n     */\n    private addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = copy(oldGraph);\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach(\n                (attribute: string | number) => {\n                    // if a node does not belong to any cluster, a undefined will be formed with no cluster to generate\n                    if (attribute === \"undefined\") return;\n\n                    let clusterID = names[index] + attribute;\n                    let visualize: CustomNodeObject = {\n                        isClusterNode: true,\n                    };\n                    graphCopy.addNode(clusterID, { _visualize: visualize });\n\n                    // add edges to simulate the force of the same cluster\n                    State.cluster.attributeKeys\n                        .get(attribute)\n                        ?.forEach((target) => {\n                            let visualize: CustomLinkObject = {\n                                isClusterLink: true,\n                            };\n                            graphCopy.addEdge(clusterID, target, {\n                                _visualize: visualize,\n                            });\n                        });\n                }\n            );\n        }\n\n        return graphCopy;\n    }\n\n    /**\n     * determine whether this Node is the cluster delegate node\n     *\n     * @param {CustomNodeObject} nodeObject\n     */\n    nodeVisibility = (nodeObject: CustomNodeObject) => {\n        return !nodeObject.isClusterNode;\n    };\n\n    /**\n     * determine whether this edge is the cluster delegate edge\n     *\n     * @param {CustomLinkObject} nodeObject\n     */\n    linkVisibility = (nodeObject: CustomLinkObject) => {\n        return !nodeObject.isClusterLink;\n    };\n\n    /**\n     * all the clusters will form a 3D object to be imported into Scene\n     * and this indicates the formed 3d object in the last refresh\n     *\n     * @type {THREE.Object3D}\n     */\n    lastObject3D!: THREE.Object3D;\n\n    /**\n     * add the computed clusters 3d object to the Scene\n     * always keep the Scene with only 1 cluster object by first deleting the last one then add\n     *\n     */\n    clusterDelegation() {\n        if (State.cluster.clusterBy === \"None\") {\n            return;\n        }\n        this.threeScene.remove(this.lastObject3D);\n        this.lastObject3D = new THREE.Object3D();\n        this.convexHullObjects.forEach((value, key) => {\n            this.lastObject3D.add(value);\n        });\n        this.threeScene.add(this.lastObject3D);\n    }\n\n    /**\n     * the map between the value of the cluster and the 3d object that this cluster created\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Object3D>)}\n     */\n    get convexHullObjects(): Map<string | number, THREE.Object3D> {\n        let newMap = new Map<string | number, THREE.Object3D>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            if (value.length < 4) {\n                newMap.set(key, new THREE.Object3D());\n            } else {\n                let convexHull = new ConvexGeometry(Array.from(value));\n                newMap.set(key, GraphDelegate.createMesh(convexHull, key));\n            }\n        });\n        return newMap;\n    }\n\n    private static createMesh(\n        geom: ConvexGeometry,\n        name: string | number\n    ): THREE.Object3D {\n        // 实例化一个绿色的半透明的材质\n        const meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.2,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        const wireFrameMat = new THREE.MeshBasicMaterial();\n        wireFrameMat.wireframe = true; //把材质渲染成线框\n\n        // 将两种材质都赋给几何体\n        return SceneUtils.createMultiMaterialObject(geom, [\n            meshMaterial,\n            wireFrameMat,\n        ]);\n    }\n\n    ////\n\n    /**\n     * this will re-position the camera to focus on the specified node\n     * if distance not specified, a default of 40 will be used\n     *\n     * @param {string} nodeId the node to be focused\n     * @param {number} [distance=40] the ending distance between the camera and the node\n     * @returns {*}\n     */\n    cameraFocusOn(nodeId: string, distance: number = 40) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n\n    /**\n     * which link to be highlighted\n     *\n     * @type {(LinkObject | null)}\n     */\n    highlightLink: LinkObject | null = null;\n\n    ifHighlightLink<T>(link: LinkObject, _if: T, _else: T, _default: T): T {\n        if (State.graphDelegate.highlightLink == null) {\n            return _default;\n        }\n        let sourceId = (link.source as NodeObject).id as string;\n        let targetId = (link.target as NodeObject).id as string;\n\n        if (\n            (sourceId ===\n                (State.graphDelegate.highlightLink?.source as string) &&\n                targetId ===\n                    (State.graphDelegate.highlightLink?.target as string)) ||\n            (sourceId ===\n                (State.graphDelegate.highlightLink?.target as string) &&\n                targetId ===\n                    (State.graphDelegate.highlightLink?.source as string))\n        ) {\n            return _if;\n        } else {\n            return _else;\n        }\n    }\n}\n","import { autorun } from \"mobx\";\n\nimport PreferencesStore from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport ProjectStore from \"./ProjectStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\n\nclass AppState {\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    import!: ImportStore;\n    search!: SearchStore;\n    project!: ProjectStore;\n    cluster!: ClusterStore;\n    css!: CssStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.project = new ProjectStore();\n        this.cluster = new ClusterStore();\n        this.css = new CssStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// this is for easily debugging in runtime\n//@ts-ignore\nwindow._state = State;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\nautorun(\n    () =>\n        (State.cluster.rawGraph = State.search.rawGraph = State.graph.rawGraph)\n);\n\nautorun(() => {\n    if (State.css.isAnimating === true) {\n        State.graphDelegate.graphDelegateMethods?.resumeAnimation();\n    } else {\n        State.graphDelegate.graphDelegateMethods?.pauseAnimation();\n    }\n});\n\nexport default State;\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, FormGroup, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { copy } from \"copy-anything\";\n\ninterface Props {\n    /**\n     * whether or not to show the None\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    showNone: boolean;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * if None is seelcted, the item props will be set to null\n     *\n     * @memberof Props\n     */\n    onSelect: (item: string | null) => void;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\n/**\n * this component can be used to choose the attribute among all the attributes, with addition none to choose (can be toggled to off)\n * to use it, you have to specify whether to add additional None to the list and onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ClusterChosser extends React.Component<Props, {}> {\n        static defaultProps = {\n            showNone: true,\n        };\n\n        state = {\n            choose: null as string | null,\n        };\n\n        get fullProperties(): string[] {\n            let propertiesWithNone = copy(State.graph.metadata.nodeProperties);\n            propertiesWithNone.unshift(\"None\");\n            return propertiesWithNone;\n        }\n\n        itemRenderer = (\n            item: any,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null => {\n            if (item == \"None\") {\n                return (\n                    <MenuItem\n                        intent=\"primary\"\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            } else {\n                return (\n                    <MenuItem\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            }\n        };\n\n        render() {\n            return (\n                <Select\n                    items={\n                        this.props.showNone\n                            ? this.fullProperties\n                            : State.graph.metadata.nodeProperties\n                    }\n                    itemRenderer={this.itemRenderer}\n                    filterable={false}\n                    onItemSelect={(item: string) => {\n                        let selected = item === \"None\" ? null : item;\n                        this.setState({ choose: selected });\n                        this.props.onSelect(selected);\n                    }}\n                >\n                    <Button text={this.state.choose ?? \"None\"} />\n                </Select>\n            );\n        }\n    }\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    ButtonGroup,\n    Classes,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Popover,\n    Position,\n    Switch,\n} from \"@blueprintjs/core\";\nimport ClusterChosser from \"./utils/ClusterChooser\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                            alt=\"PiperNet Logo\"\n                        />\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Load Sample\"\n                                        icon=\"graph\"\n                                        onClick={() => {\n                                            State.import.importSamplesDialogOpen = true;\n                                        }}\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from CSV...\"\n                                        onClick={() => {\n                                            State.import.importCSVDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Import from GEXF...\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.project.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                        <Switch\n                            label=\"Graph Animation\"\n                            checked={State.css.isAnimating}\n                            onChange={() =>\n                                (State.css.isAnimating = !State.css.isAnimating)\n                            }\n                        />\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <ButtonGroup>\n                        {/* <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider /> */}\n                    </ButtonGroup>\n\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        Clustered by\n                        <ClusterChosser\n                            onSelect={(cluster) => {\n                                State.cluster.clusterBy = cluster;\n                            }}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            disabled={true}\n                            onClick={() => {\n                                State.preferences.preferenceDialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React, { ReactNode } from \"react\";\nimport { Button, Card, Classes, Collapse, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Card elevation={Elevation.THREE}>\n                    <Button\n                        className={classnames(\n                            Classes.LARGE,\n                            Classes.FILL,\n                            \"text-align-left\"\n                        )}\n                        rightIcon={\n                            this.props.isOpen ? \"chevron-up\" : \"chevron-down\"\n                        }\n                        onClick={this.props.onToggle}\n                    >\n                        {this.props.name}\n                    </Button>\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </Card>\n            );\n        }\n    }\n);\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/labs\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    items: any[];\n    onSelect: (\n        item: any,\n        event?: React.SyntheticEvent<HTMLElement, Event> | undefined\n    ) => void;\n    text: string;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport function CommonItemRenderer(\n    item: any,\n    props: CustomIItemRendererProps\n): JSX.Element | null {\n    return <MenuItem key={item} onClick={props.handleClick} text={item} />;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Select\n                    items={this.props.items}\n                    itemRenderer={CommonItemRenderer}\n                    filterable={false}\n                    onItemSelect={this.props.onSelect}\n                >\n                    <Button text={this.props.text} />\n                </Select>\n            );\n        }\n    }\n);\n","import convert from \"xml-js\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only edges file\";\n","import React from \"react\";\nimport {\n    Button,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    FileInput,\n    Intent,\n    Spinner,\n    Switch,\n    Tag,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\n\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../../constants\";\nimport { IEdgeFileConfig, INodeFileConfig } from \"../../state/ImportStore\";\n\ninterface PreviewTableProps {\n    file: INodeFileConfig | IEdgeFileConfig;\n}\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component<PreviewTableProps, {}> {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportCSVDialog extends React.Component {\n        state = {\n            loading: false,\n            available: ONLY_EDGE_FILE,\n            nodesOpen: true,\n            edgesOpen: true,\n            delimiter: \",\",\n        };\n\n        // determine if this state is importable\n        canImport = () => {\n            if (this.state.available === NODE_AND_EDGE_FILE) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else if (this.state.available === ONLY_EDGE_FILE) {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n            return false;\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            // show blank if node file not relevant\n            if (this.state.available === ONLY_EDGE_FILE) {\n                return null;\n            }\n\n            return (\n                <Collapsable\n                    name=\"Nodes\"\n                    isOpen={this.state.nodesOpen}\n                    onToggle={() =>\n                        this.setState({ nodesOpen: !this.state.nodesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.nodeFileName}\n                                onInputChange={(event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    if (\n                                        !target.files ||\n                                        target.files.length < 1\n                                    ) {\n                                        return;\n                                    }\n                                    State.import.nodeFileName =\n                                        target.files[0].name;\n                                    // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                    State.import.selectedNodeFileFromInput =\n                                        target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                text={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <Collapsable\n                    name=\"Edges\"\n                    isOpen={this.state.edgesOpen}\n                    onToggle={() =>\n                        this.setState({ edgesOpen: !this.state.edgesOpen })\n                    }\n                >\n                    <br />\n                    <div className={classnames(Classes.CONTROL_GROUP)}>\n                        <div\n                            className={classnames(\n                                Classes.INPUT_GROUP,\n                                Classes.FILL\n                            )}\n                        >\n                            <FileInput\n                                text={State.import.edgeFileName}\n                                onInputChange={(event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    if (\n                                        !target.files ||\n                                        target.files.length < 1\n                                    ) {\n                                        return;\n                                    }\n                                    State.import.edgeFileName =\n                                        target.files[0].name;\n                                    State.import.selectedEdgeFileFromInput =\n                                        target.files[0];\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <br />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />{\" \"}\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        text={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter === \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter === \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    style={{ minWidth: \"80vw\" }}\n                    icon=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importCSVDialogOpen}\n                    onClose={() => {\n                        State.import.importCSVDialogOpen = false;\n                    }}\n                    title=\"Import CSV\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div>\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"import-dialog\"\n                                )}\n                            >\n                                I have:\n                                <SimpleSelect\n                                    items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\n                                    text={this.state.available}\n                                    onSelect={(targetValue) => {\n                                        State.import.importConfig.hasNodeFile = !(\n                                            targetValue === ONLY_EDGE_FILE\n                                        );\n                                        this.setState({\n                                            available: targetValue,\n                                        });\n                                    }}\n                                />\n                                <Divider />\n                                {this.renderNodesSelection()}\n                                <br />\n                                {this.renderEdgesSelection()}\n                                <br />\n                                {this.renderDelimiterSelection()}\n                            </div>\n                            <div className={Classes.DIALOG_FOOTER}>\n                                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                    <Button\n                                        className={classnames({\n                                            [Classes.DISABLED]: !this.canImport(),\n                                        })}\n                                        intent={Intent.PRIMARY}\n                                        onClick={() => {\n                                            State.import.isLoading = true;\n                                            State.import\n                                                .importGraphFromCSV()\n                                                .then((res) => {\n                                                    State.graph.setGraph(\n                                                        res.graph,\n                                                        res.metadata\n                                                    );\n                                                    State.import.isLoading = false;\n                                                    State.import.importCSVDialogOpen = false;\n                                                });\n                                        }}\n                                        text=\"Import\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    Classes,\n    Dialog,\n    FileInput,\n    Intent,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <Button\n                            className={classnames({\n                                [Classes.DISABLED]: !this.state.fileIsSelect,\n                            })}\n                            intent={Intent.PRIMARY}\n                            onClick={() => {\n                                State.import.isLoading = true;\n                                State.import\n                                    .importGraphFromGEXF()\n                                    .then((res) => {\n                                        State.graph.setGraph(\n                                            res.graph,\n                                            res.metadata\n                                        );\n                                        State.import.isLoading = false;\n                                        State.import.importGEXFDialogOpen = false;\n                                    });\n                            }}\n                            text=\"Import\"\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"import\"\n                    className={classnames({\n                        [Classes.DARK]: State.preferences.darkMode,\n                    })}\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Import GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                let target = event.target as HTMLInputElement;\n                                                if (\n                                                    !target.files ||\n                                                    target.files.length < 1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    target.files[0].name;\n                                                // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                                State.import.selectedGEXFFileFromInput =\n                                                    target.files[0];\n\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    Classes,\n    Dialog,\n    Divider,\n    Elevation,\n    H3,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    class ExportDialog extends React.Component {\n        state = {\n            ready: true,\n        };\n\n        computeGEXFFile() {\n            return gexf.write(State.graph.rawGraph);\n        }\n\n        computeNodeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [];\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n                return null;\n            });\n            headers.push({ label: \"_id\", key: \"_id\" });\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.project.exportDialogOpen}\n                    onClose={() => {\n                        State.project.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br />\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        headers={this.computeNodeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        headers={this.computeEdgeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for === \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for === \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.setState({\n                            loading: true,\n                        });\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import { Attributes } from \"graphology-types\";\nimport React from \"react\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute !== \"_visualize\" &&\n            attribute !== \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Code,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it !== \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(\n                                rowIndex: number,\n                                columnIndex: number\n                            ) => this.renderCell(rowIndex, it)}\n                        />\n                    );\n                }\n                return null;\n            });\n            return columns.filter((element) => {\n                return element !== undefined;\n            });\n        };\n\n        renderCell = (rowIndex: number, attribute: string) => {\n            let cellAttributes = this.filteredTable[rowIndex].attributes!!;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    tooltip={cell}\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.rawGraph.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() => {\n                                State.preferences.AddNodeDialogOpen = true;\n                            }}\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class NodeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class NodeChooser extends React.Component<Props, {}> {\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip2\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip2>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as null | SerializedEdge<Attributes>,\n            filterQuery: null as null | string,\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    !this.state.filterQuery ||\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.rawGraph.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.rawGraph.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of a Node...\"\n                            value={this.state.filterQuery ?? \"\"}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class EdgeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    class NodeAdder extends React.Component<Props, {}> {\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId !== \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip2\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip2>\n            ) : (\n                <Tooltip2\n                    content={\n                        \"This Node Id is currently in use by other nodes, try with another one instead\"\n                    }\n                    intent=\"warning\"\n                >\n                    <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                </Tooltip2>\n            );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute !== \"_options\" && attribute !== \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.rawGraph.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.preferences.AddNodeDialogOpen = false;\n                            // State.preferences.rightClickBackgroundPanelOpen = false;\n                            // this.forceUpdate();\n                            // State.graphDelegate.cameraFocusOn(this.state.newNodeId);\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Classes, Dialog, Tag } from \"@blueprintjs/core\";\nimport NodeAdder from \"../utils/NodeAdder\";\nimport State from \"../../state\";\n\nexport default observer(\n    class AddNodeDialog extends React.Component {\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => {\n                        State.preferences.AddNodeDialogOpen = false;\n                    }}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New edges are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportCSVDialog from \"./dialogs/ImportCSVDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\nimport ImportSamplesDialog from \"./dialogs/ImportGEXFDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\nimport AddNodeDialog from \"./dialogs/AddNodeDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportCSVDialog />\n                <ImportGEXFDialog />\n                <ImportSamplesDialog />\n                {/*\n                <ProjectDetailDialog />\n                <RenameSnapshotDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog />\\\n                */}\n                <AddNodeDialog />\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ThreeJSVis extends React.Component {\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        getNodeId(node: NodeObject): string {\n            let nodeId: string;\n            if (node.id as string) {\n                nodeId = node.id as string;\n            } else {\n                nodeId = (node.id as number).toString();\n            }\n            return nodeId;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        nodeHover = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            if (node != null && node !== previousNode) {\n                State.graph.currentlyHoveredId = this.getNodeId(\n                    node as NodeObject\n                );\n            }\n        };\n\n        // ref of State.graph.selectedNodes\n        selectedNodes: string[] = State.graph.selectedNodes;\n\n        nodeSelect = (node: NodeObject, event: MouseEvent) => {\n            let nodeId = this.getNodeId(node as NodeObject);\n            if (event.ctrlKey || event.shiftKey) {\n                // multi-selection\n                if (this.selectedNodes.includes(nodeId)) {\n                    let index = this.selectedNodes.indexOf(nodeId);\n                    if (index > -1) {\n                        this.selectedNodes.splice(index, 1);\n                    }\n                } else {\n                    this.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single-selection\n                // TODO\n            }\n            this.graphMethods.refresh(); // update color of selected nodes\n        };\n\n        nodeRightClick = (node: NodeObject, event: MouseEvent) => {\n            State.graph.selectedNode = node.id as string;\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickBackgroundPanelOpen = false;\n            State.preferences.rightClickNodePanelOpen = true;\n        };\n\n        backgroundRightClick = (event: MouseEvent) => {\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickNodePanelOpen = false;\n            State.preferences.rightClickBackgroundPanelOpen = true;\n        };\n\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <ForceGraph3D\n                        ref={this.graphRef}\n                        graphData={this.graphDelegate.visualizationGraph}\n                        nodeResolution={20}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        onBackgroundRightClick={this.backgroundRightClick}\n                        linkWidth={(link) => {\n                            return State.graphDelegate.ifHighlightLink(\n                                link,\n                                2,\n                                0.1,\n                                1\n                            );\n                        }}\n                        linkColor={(link) => {\n                            return State.graphDelegate.ifHighlightLink(\n                                link,\n                                \"orangered\",\n                                \"white\",\n                                \"white\"\n                            );\n                        }}\n                        linkDirectionalParticles={(link) => {\n                            return State.graphDelegate.ifHighlightLink(\n                                link,\n                                4,\n                                0,\n                                0\n                            );\n                        }}\n                        linkDirectionalParticleWidth={4}\n                        onEngineTick={() =>\n                            this.graphDelegate.clusterDelegation()\n                        }\n                        nodeColor={(node) =>\n                            this.selectedNodes.includes(this.getNodeId(node))\n                                ? \"yellow\"\n                                : \"grey\"\n                        }\n                        onNodeClick={this.nodeSelect}\n                        onNodeRightClick={this.nodeRightClick}\n                        onBackgroundClick={() => {\n                            State.preferences.rightClickNodePanelOpen = false;\n                            State.preferences.rightClickBackgroundPanelOpen = false;\n                        }}\n                        onNodeHover={this.nodeHover}\n                    />\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Popover,\n    PopoverInteractionKind,\n    RangeSlider,\n} from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect, { CommonItemRenderer } from \"../utils/SimpleSelect\";\n\nexport default observer(\n    class GlobalPanel extends React.Component {\n        state = {\n            timeOutRef: null,\n            sizeOptionOpen: false,\n            colorOptionOpen: false,\n            shapeOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            {/* color : color by */}\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Color By:\n                                    <span style={{ float: \"right\" }}>\n                                        <SimpleSelect\n                                            items={\n                                                [\"item1\", \"item2\"]\n                                                // State.graph.allPropertiesKeyList\n                                            }\n                                            onSelect={\n                                                (it) =>\n                                                    console.log(\n                                                        \"color:color by\"\n                                                    )\n                                                // State.graph.nodes.colorBy = it\n                                            }\n                                            text={\n                                                \"1\" //for test\n                                                // State.graph.nodes.colorBy\n                                            }\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            {/* color:scale type  */}\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Scale Type:\n                                    <span style={{ float: \"right\" }}>\n                                        <SimpleSelect\n                                            items={\n                                                [\"item1\", \"item2\"]\n                                                // Object.keys(scales)\n                                            }\n                                            onSelect={\n                                                (it) =>\n                                                    console.log(\n                                                        \"color:scale type\"\n                                                    )\n                                                // State.graph.nodes.color.scale = it\n                                            }\n                                            text={\n                                                \"2\"\n                                                // State.graph.nodes.color.scale\n                                            }\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            {/* the gradient section in color */}\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Gradient: &nbsp;\n                                    <span style={{ float: \"right\" }}>\n                                        {/* left colorpicker */}\n                                        <Popover\n                                            // placement=\"bottom\"\n                                            // modifiers={{\n                                            //   preventOverflow: {\n                                            //     enabled: false,\n                                            //   },\n                                            // }}\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={\"auto\"}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                // style={{\n                                                //   // backgroundImage: \"inherit\",\n                                                //   // backgroundColor: State.graph.nodes.color.from\n                                                // }}\n                                            />\n                                            <SketchPicker\n                                                color={\n                                                    \"#ffffff\" //used for test\n                                                    // State.graph.nodes.color.from\n                                                }\n                                                onChange={() => {\n                                                    console.log(\n                                                        \"gradient section first colorpicker onchange\"\n                                                    );\n                                                    // it => (State.graph.nodes.color.from = it.hex)\n                                                }}\n                                            />\n                                        </Popover>\n                                        {/* arrow  */}\n                                        &nbsp; &#8594; &nbsp;\n                                        {/* right colorpicker */}\n                                        <Popover\n                                            //previous!!\n                                            // placement=\"bottom\"\n                                            // modifiers={{\n                                            //   preventOverflow: {\n                                            //     enabled: false,\n                                            //   },\n                                            // }}\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={\"auto\"}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    // backgroundColor: State.graph.nodes.color.to\n                                                }}\n                                            />\n                                            <SketchPicker\n                                                color={\n                                                    \"#ffffff\" //used for test\n                                                    // State.graph.nodes.color.to\n                                                }\n                                                onChange={() => {\n                                                    console.log(\n                                                        \"gradient section second colorpicker onchange\"\n                                                    );\n                                                    // it => (State.graph.nodes.color.to = it.hex)\n                                                }}\n                                            />\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                            {/* color : gradient preview */}\n                            <section style={{ marginTop: \"-1em\" }}>\n                                <svg\n                                    width=\"100%\"\n                                    height=\"10\"\n                                    className=\"gradient-preview\"\n                                >\n                                    <defs>\n                                        <linearGradient\n                                            x1=\"0%\"\n                                            y1=\"50%\"\n                                            x2=\"100%\"\n                                            y2=\"50%\"\n                                            id=\"theGradient\"\n                                        >\n                                            <stop\n                                                stopColor={\n                                                    \"#ffffff\" //used for test\n                                                    // State.graph.nodes.color.from\n                                                }\n                                                stopOpacity=\"1\"\n                                                offset=\"0%\"\n                                            />\n                                            <stop\n                                                stopColor={\n                                                    \"#ffffff\" //used for test\n                                                    // State.graph.nodes.color.to\n                                                }\n                                                stopOpacity=\"1\"\n                                                offset=\"100%\"\n                                            />\n                                        </linearGradient>\n                                    </defs>\n                                    <rect\n                                        x=\"0\"\n                                        y=\"0\"\n                                        width=\"100%\"\n                                        height=\"50\"\n                                        fill=\"url(#theGradient)\"\n                                    />\n                                </svg>\n                            </section>\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Size */}\n                    <Collapsable\n                        name=\"Size\"\n                        isOpen={this.state.sizeOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                sizeOptionOpen: !this.state.sizeOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            {/* size : scale by  */}\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Scale By:\n                                    <span style={{ float: \"right\" }}>\n                                        <Select\n                                            items={[\"item1\", \"item2\"]}\n                                            itemRenderer={CommonItemRenderer}\n                                            filterable={false}\n                                            onItemSelect={(item) => {\n                                                console.log(\n                                                    \"size : scale by , component :select\"\n                                                );\n                                                // it => (State.graph.nodes.sizeBy = it)\n                                            }}\n                                        >\n                                            <Button\n                                                text={\n                                                    \"btn1\"\n                                                    // State.graph.nodes.sizeBy\n                                                }\n                                            />\n                                        </Select>\n                                    </span>\n                                </p>\n                            </section>\n                            {/* size : scale type */}\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Scale Type:\n                                    <span style={{ float: \"right\" }}>\n                                        <Select\n                                            items={\n                                                [\"item1\", \"item2\"]\n                                                //Object.keys(scales)\n                                            }\n                                            itemRenderer={CommonItemRenderer}\n                                            filterable={false}\n                                            onItemSelect={(item) => {\n                                                console.log(\n                                                    \"size : scale type component: select\"\n                                                );\n                                                // it => (State.graph.nodes.size.scale = it)\n                                            }}\n                                        >\n                                            <Button\n                                                text={\n                                                    \"btn2\"\n                                                    // State.graph.nodes.size.scale\n                                                }\n                                            />\n                                        </Select>\n                                    </span>\n                                </p>\n                            </section>\n                            Size Range:\n                            <br />\n                            <RangeSlider\n                                min={1}\n                                max={20}\n                                stepSize={0.1}\n                                labelStepSize={5}\n                                // onChange={([a, b]) => {\n                                //   runInAction(\"update scale\", () => {\n                                //     State.graph.nodes.size.min = a;\n                                //     State.graph.nodes.size.max = b;\n                                //   });\n                                // }}\n                                // value={[\n                                //   State.graph.nodes.size.min,\n                                //   State.graph.nodes.size.max\n                                // ]}\n                            />\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Shape */}\n                    <Collapsable\n                        name=\"Shape\"\n                        isOpen={this.state.shapeOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                shapeOptionOpen: !this.state.shapeOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            {/* shape : node shape */}\n                            <section>\n                                {\" \"}\n                                <p style={{ textAlign: \"left\" }}>\n                                    {\" \"}\n                                    Node Shape:\n                                    <span style={{ float: \"right\" }}>\n                                        <Select\n                                            items={[\n                                                \"circle\",\n                                                \"square\",\n                                                \"triangle\",\n                                                \"pentagon\",\n                                                \"hexagon\",\n                                                \"octagon\",\n                                            ]}\n                                            itemRenderer={CommonItemRenderer}\n                                            filterable={false}\n                                            onItemSelect={(item) => {\n                                                console.log(\n                                                    \" shape : node shape component: select\"\n                                                );\n                                                // it => (State.graph.nodes.shape = it)\n                                            }}\n                                        >\n                                            <Button\n                                                text={\n                                                    \"btn3\"\n                                                    // State.graph.nodes.shape\n                                                }\n                                            />\n                                        </Select>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n                    <br />\n                    <small>\n                        {/* {pluralize(\"node\", State.graph.overrides.size, true)}<span> </span> */}\n                        {pluralize(\"node\", 0, true)}\n                        <span> </span>\n                        have override styles. &nbsp;\n                        <Button\n                            className={\"pt-small\"}\n                            text=\"Clear\"\n                            // onClick={() => (State.graph.overrides = new Map())}\n                        />\n                    </small>\n                </div>\n            );\n        }\n    }\n);\n// export default GlobalPanel;\n","import React, { ReactNode } from \"react\";\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.FormEvent<HTMLInputElement>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    class SwitchCollapsable extends React.Component<Props, {}> {\n        render() {\n            return (\n                <div>\n                    <Switch\n                        label={this.props.name}\n                        checked={this.props.isOpen}\n                        onChange={this.props.onToggle}\n                        className={Classes.ALIGN_RIGHT}\n                    />\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Classes,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n    Slider,\n} from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport { Select } from \"@blueprintjs/select\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\nimport { CommonItemRenderer } from \"../utils/SimpleSelect\";\n\nexport default observer(\n    class SelectionPanel extends React.Component {\n        state = {\n            shapeOptionOpen: false,\n            sizeOptionOpen: false,\n            colorOptionOpen: false,\n            labelOptionOpen: false,\n        };\n\n        // twoLayerUpdate = (nodeId, key, value) => {\n        //   if (!State.graph.overrides.has(nodeId)) {\n        //     State.graph.overrides.set(nodeId, new Map());\n        //   }\n        //   const nodeAttrs = State.graph.overrides.get(nodeId);\n        //   if (value !== null) {\n        //     nodeAttrs.set(key, value);\n        //   } else {\n        //     nodeAttrs.delete(key);\n        //     if (nodeAttrs.size === 0) {\n        //       State.graph.overrides.delete(nodeId);\n        //     }\n        //   }\n        // };\n\n        // batchTwoLayerUpdate = (nodes, key, value) => {\n        //   runInAction(\"update entire selection\", () => {\n        //     nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\n        //   });\n        // };\n\n        render() {\n            return (\n                <div>\n                    <br />\n                    <SwitchCollapsable\n                        name=\"Override Size\"\n                        isOpen={this.state.sizeOptionOpen}\n                        onToggle={() => {\n                            if (this.state.sizeOptionOpen) {\n                                this.setState(\n                                    {\n                                        sizeOptionOpen: false,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"size\",\n                                    //     null\n                                    //   )\n                                );\n                            } else {\n                                this.setState(\n                                    {\n                                        sizeOptionOpen: true,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"size\",\n                                    //     State.graph.overrideConfig.size\n                                    //   )\n                                );\n                            }\n                        }}\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <Slider\n                                min={1}\n                                max={20}\n                                stepSize={0.1}\n                                labelStepSize={5}\n                                // onChange={it => {\n                                //   State.graph.overrideConfig.size = it;\n                                //   this.batchTwoLayerUpdate(\n                                //     State.graph.selectedNodes,\n                                //     \"size\",\n                                //     it\n                                //   );\n                                // }}\n                                // value={State.graph.overrideConfig.size}\n                                value={2} //set for test\n                            />\n                        </div>\n                    </SwitchCollapsable>\n                    <br />\n                    <SwitchCollapsable\n                        name=\"Override Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() => {\n                            if (this.state.colorOptionOpen) {\n                                this.setState(\n                                    {\n                                        colorOptionOpen: false,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"color\",\n                                    //     null\n                                    //   )\n                                );\n                            } else {\n                                this.setState(\n                                    {\n                                        colorOptionOpen: true,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"color\",\n                                    //     State.graph.overrideConfig.color\n                                    //   )\n                                );\n                            }\n                        }}\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                {\" \"}\n                                <p style={{ textAlign: \"left\" }}>\n                                    Choose Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <Popover\n                                            //previous!!\n                                            // placement=\"bottom\"\n                                            // modifiers={{\n                                            //   preventOverflow: {\n                                            //     enabled: false,\n                                            //   },\n                                            // }}\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={Position.RIGHT}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    // backgroundColor: State.graph.overrideConfig.color\n                                                }}\n                                            />\n                                            <SketchPicker\n                                            // color={State.graph.overrideConfig.color}\n                                            // onChange={it => {\n                                            //   State.graph.overrideConfig.color = it.hex;\n                                            //   this.batchTwoLayerUpdate(\n                                            //     State.graph.selectedNodes,\n                                            //     \"color\",\n                                            //     it.hex\n                                            //   );\n                                            // }}\n                                            />\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </SwitchCollapsable>\n                    <br />\n                    <SwitchCollapsable\n                        name=\"Override Label\"\n                        isOpen={this.state.labelOptionOpen}\n                        onToggle={() => {\n                            if (this.state.labelOptionOpen) {\n                                this.setState(\n                                    {\n                                        labelOptionOpen: false,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"label\",\n                                    //     null\n                                    //   )\n                                );\n                            } else {\n                                this.setState(\n                                    {\n                                        labelOptionOpen: true,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"label\",\n                                    //     State.graph.overrideConfig.label\n                                    //   )\n                                );\n                            }\n                        }}\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            Custom Label:\n                            <input\n                                value={\"test\"} //used for test\n                                // value={State.graph.overrideConfig.label}\n                                // onChange={it => {\n                                //   State.graph.overrideConfig.label = it.target.value;\n                                //   this.batchTwoLayerUpdate(\n                                //     State.graph.selectedNodes,\n                                //     \"label\",\n                                //     it.target.value\n                                //   );\n                                // }}\n                            />\n                        </div>\n                    </SwitchCollapsable>\n                    <br />\n                    <SwitchCollapsable\n                        name=\"Override Shape\"\n                        isOpen={this.state.shapeOptionOpen}\n                        onToggle={() => {\n                            if (this.state.shapeOptionOpen) {\n                                this.setState(\n                                    {\n                                        shapeOptionOpen: false,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"shape\",\n                                    //     null\n                                    //   )\n                                );\n                            } else {\n                                this.setState(\n                                    {\n                                        shapeOptionOpen: true,\n                                    }\n                                    // ,\n                                    // () =>\n                                    //   this.batchTwoLayerUpdate(\n                                    //     State.graph.selectedNodes,\n                                    //     \"shape\",\n                                    //     State.graph.overrideConfig.shape\n                                    //   )\n                                );\n                            }\n                        }}\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                {\" \"}\n                                <p style={{ textAlign: \"left\" }}>\n                                    Node Shape:\n                                    <span style={{ float: \"right\" }}>\n                                        <Select\n                                            items={[\n                                                \"shape1\",\n                                                \"shape2\",\n                                                \"shape3\",\n                                                \"shape4\",\n                                                \"shape5\",\n                                            ]}\n                                            itemRenderer={CommonItemRenderer}\n                                            filterable={false}\n                                            onItemSelect={(it) => {\n                                                console.log(it); //used for test\n                                                // State.graph.overrideConfig.shape = it;\n                                                // this.batchTwoLayerUpdate(\n                                                //   State.graph.selectedNodes,\n                                                //   \"shape\",\n                                                //   it\n                                                // );\n                                            }}\n                                        >\n                                            {/* <Button text={State.graph.overrideConfig.shape} /> */}\n                                            <Button text={\"change\"} />\n                                            {/* upper is used for test */}\n                                        </Select>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </SwitchCollapsable>\n                </div>\n            );\n        }\n    }\n);\n// export default SelectionPanel;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport pluralize from \"pluralize\";\nimport State from \"../../state\";\nimport GlobalPanel from \"./GlobalPanel\";\nimport SelectionPanel from \"./SelectionPanel\";\n\nexport default observer(\n    class NodesPanel extends React.Component {\n        getRenderedNodes = () => {\n            if (State.graph.selectedNodes.length === 0) {\n                return (\n                    <div>\n                        <p>Modifying All Nodes</p>\n                    </div>\n                );\n            }\n            return (\n                <p>{`Modifying ${pluralize(\n                    \"Node\",\n                    State.graph.selectedNodes.length,\n                    true\n                )}`}</p>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    {this.getRenderedNodes()}\n                    {State.graph.selectedNodes.length === 0 ? (\n                        <GlobalPanel />\n                    ) : (\n                        <SelectionPanel />\n                    )}\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport {\n    Button,\n    Classes,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport { SketchPicker } from \"react-color\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n        state = {\n            timeOutRef: null,\n            sizeOptionOpen: false,\n            thicknessOptionOpen: false,\n            colorOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Select Edge Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <Popover\n                                            interactionKind={\n                                                PopoverInteractionKind.CLICK\n                                            }\n                                            popoverClassName=\"bp3-popover-content-sizing\"\n                                            position={Position.RIGHT}\n                                        >\n                                            <Button\n                                                text=\"  \"\n                                                style={{\n                                                    backgroundImage: \"inherit\",\n                                                    backgroundColor:\n                                                        State.css.config.edges\n                                                            .color,\n                                                }}\n                                            />\n                                            <div>\n                                                <SketchPicker\n                                                    color={\n                                                        State.css.config.edges\n                                                            .color\n                                                    }\n                                                    onChange={(it) => {\n                                                        // State.graph.process.graph.forEachNode(n => {\n\n                                                        //     let red = new THREE.Color(State.graph.edges.color).r;\n                                                        //     let blue = new THREE.Color(State.graph.edges.color).g;\n                                                        //     let green = new THREE.Color(State.graph.edges.color).b;\n                                                        //     n.renderData.linecolor.r = red;\n                                                        //     n.renderData.linecolor.g = blue;\n                                                        //     n.renderData.linecolor.b = green;\n                                                        // });\n\n                                                        State.css.config.edges.color =\n                                                            it.hex;\n                                                        console.log(it.hex);\n                                                        /**update edge color in real time*/\n                                                        // State.graph.process.onHover();\n                                                    }}\n                                                />\n                                            </div>\n                                        </Popover>\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n\n                    {/* Collapsable Option: Thickness */}\n                    {/* <Collapsable\n                    name=\"Thickness\"\n                    isOpen={this.state.thicknessOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\n                        })\n                    }\n                    >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p>Select Edge Thickness: </p>\n                            <div style={{display: \"inline\", float: \"right\"}}>\n\n                            </div>\n                        </section>\n                    </div>\n                </Collapsable> */}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\n\nexport default observer(\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <span style={{ display: \"inline-block\" }}>\n                        <Button\n                            style={{ width: \"100px\" }}\n                            id=\"hideAll\"\n                            icon=\"eye-off\"\n                            className={Classes.FILL}\n                            // onClick={() => State.graph.frame.hideAllLabels()}\n                        >\n                            Hide All\n                        </Button>\n                        <Button\n                            style={{ width: \"100px\", display: \"none\" }}\n                            id=\"showAll\"\n                            icon=\"eye-on\"\n                            className={Classes.FILL}\n                            // onClick={() => State.graph.frame.showAllLabels()}\n                        >\n                            Show All\n                        </Button>\n                        <Button\n                            style={{ width: \"140px\", marginLeft: \"10px\" }}\n                            id=\"hideSelected\"\n                            icon=\"eye-off\"\n                            className={Classes.FILL}\n                            // onClick={() =>\n                            //     State.graph.frame.hideSelectedLabels()\n                            // }\n                        >\n                            Hide Selected\n                        </Button>\n                        <Button\n                            style={{\n                                width: \"140px\",\n                                marginLeft: \"10px\",\n                                display: \"none\",\n                            }}\n                            id=\"showSelected\"\n                            icon=\"eye-on\"\n                            className={Classes.FILL}\n                            // onClick={() =>\n                            //     State.graph.frame.showSelectedLabels()\n                            // }\n                        >\n                            Show Selected\n                        </Button>\n                    </span>\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label Size</h6>\n                    <Slider\n                        min={0.5}\n                        max={3}\n                        stepSize={0.1}\n                        // onChange={value => {\n                        //   State.graph.nodes.labelSize = value;\n                        // }}\n                        // value={State.graph.nodes.labelSize}\n                        initialValue={2}\n                        value={2}\n                    />\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label Length</h6>\n                    <Slider\n                        min={1}\n                        max={32}\n                        stepSize={0.1}\n                        labelStepSize={5}\n                        // onChange={value => {\n                        //   State.graph.nodes.labelLength = value;\n                        // }}\n                        // value={State.graph.nodes.labelLength}\n                        value={10}\n                    />\n                    <div style={{ height: \"20px\" }} />\n                    <h6>Label By</h6>\n                    {/* <Select\n            items={State.graph.allPropertiesKeyList}\n            itemRenderer={CommonItemRenderer}\n            filterable={false}\n            onItemSelect={it => (State.graph.nodes.labelBy = it)}\n          >\n            <Button text={State.graph.nodes.labelBy} />\n          </Select> */}\n                </div>\n            );\n        }\n    }\n);\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\n\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: any;\n\n    multiNodeDetail!: any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.graph.currentlyHoveredId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\ninterface Props {\n    /**\n     * the node id of the select node\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class NodeDetail extends React.Component<Props, {}> {\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                this.props.onNode,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Editable Cell where user can edit the value of certain property;\n            return (\n                <EditableCell\n                    value={data}\n                    onChange={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    onConfirm={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    tooltip={data}\n                />\n            );\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"node-details-table\"\n                        )}\n                    >\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"nodes-details-table\"\n                        )}\n                    >\n                        <Table numRows={State.graph.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.graph.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { InputGroup, Menu, MenuItem } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\n\nexport default observer(\n    class SearchPanel extends React.Component {\n        renderSearchResults = () => {\n            return State.search.candidates.map((it) => {\n                return (\n                    <MenuItem\n                        text={it}\n                        onMouseOver={() => {\n                            State.search.isPreviewing = true;\n                            State.graph.currentlyHoveredId = it;\n                            State.graphDelegate.cameraFocusOn(it);\n                        }}\n                    />\n                );\n            });\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div className={classnames(\"search\")}>\n                        {State.search.candidates.length !== 0 && (\n                            <Menu\n                                large={true}\n                                className={classnames(\"search-menu\")}\n                                onMouseLeave={() => {\n                                    State.search.isPreviewing = false;\n                                }}\n                            >\n                                {this.renderSearchResults()}\n                            </Menu>\n                        )}\n                        <InputGroup\n                            asyncControl={true}\n                            large={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange(\n                                (value) => (State.search.searchStr = value)\n                            )}\n                            placeholder=\"Search any Node...\"\n                            value={State.search.searchStr}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Classes, Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\nexport default observer(\n    class RightClickNodePanel extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem icon=\"graph-remove\" text=\"Delete Node\" />\n                    <MenuDivider />\n                    <MenuItem icon=\"new-link\" text=\"Add Edge\" />\n                    <MenuItem\n                        icon=\"cross\"\n                        text=\"Delete Edge\"\n                        onClick={() => {\n                            State.preferences.deleteEdgePanelOpen = true;\n                            State.preferences.rightClickNodePanelOpen = false;\n                        }}\n                    />\n                </Menu>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\nexport default observer(\n    class RightClickBackgroundPanel extends React.Component {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        render() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"new-object\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickBackgroundPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Alert, Button, Card, Code, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\n\ninterface Props {\n    /**\n     * the node id of the select node to delete Edge\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class DeleteEdgeInteractionPanel extends React.Component<Props, {}> {\n        state = {\n            edgeToDelete: \"\",\n            deleteAlertOpen: false,\n        };\n\n        get neighbors(): string[] {\n            if (this.props.onNode === \"\") {\n                return [];\n            }\n            let neighbors: string[] = [];\n            State.graph.rawGraph.forEachNeighbor(\n                this.props.onNode,\n                (neighbor) => {\n                    neighbors.push(neighbor);\n                }\n            );\n            return neighbors;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            let targetNode = this.neighbors[rowIndex];\n            let edgeKey = State.graph.rawGraph.edge(\n                this.props.onNode,\n                targetNode\n            );\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: edgeKey as string,\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            if (this.state.edgeToDelete === \"\") {\n                return null;\n            }\n            let source = State.graph.rawGraph.source(this.state.edgeToDelete);\n            let target = State.graph.rawGraph.target(this.state.edgeToDelete);\n\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.rawGraph.dropEdge(this.state.edgeToDelete);\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete}</Code> between Node ID{\" \"}\n                        <Code>{source}</Code> and Node ID <Code>{target}</Code>.\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        neighborsRenderer: ICellRenderer = (rowIndex: number) => {\n            return (\n                <Cell interactive={true}>\n                    <div\n                        onClick={() => {\n                            State.graphDelegate.cameraFocusOn(\n                                this.props.onNode,\n                                400\n                            );\n                            State.graphDelegate.highlightLink = {\n                                source: this.props.onNode,\n                                target: this.neighbors[rowIndex],\n                            };\n                            State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                        }}\n                    >\n                        {this.neighbors[rowIndex]}\n                    </div>\n                </Cell>\n            );\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={classnames(\"node-details-table\")}>\n                        <Button\n                            icon=\"cross\"\n                            onClick={() => {\n                                State.preferences.deleteEdgePanelOpen = false;\n                                State.graphDelegate.highlightLink = null;\n                                State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                            }}\n                        >\n                            Close\n                        </Button>\n                        <Table\n                            numRows={this.neighbors.length}\n                            defaultRowHeight={30}\n                            renderMode={RenderMode.NONE}\n                        >\n                            <Column\n                                name=\"\"\n                                cellRenderer={this.deleteEdgeRenderer}\n                                //@ts-ignore\n                                style={this.style}\n                            />\n                            <Column\n                                name=\"Node ID\"\n                                //@ts-ignore\n                                intent={Intent.PRIMARY}\n                                cellRenderer={this.neighborsRenderer}\n                            />\n                        </Table>\n                        {this.deleteEdgeAlert()}\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Tab, Tabs } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport NodesPanel from \"./panels/NodesPanel\";\nimport EdgesPanel from \"./panels/EdgesPanel\";\nimport LabelsPanel from \"./panels/LabelsPanel\";\nimport NodeDetailPanel from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport SearchPanel from \"./panels/SearchPanel\";\nimport RightClickNodePanel from \"./panels/RightClickNodePanel\";\nimport RightClickBackgroundPanel from \"./panels/RightClickBackgroundPanel\";\nimport DeleteEdgeInteractionPanel from \"./panels/DeleteEdgeInteractionPanel\";\n\nlet RenderOptionsCard = observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <h2>Graph Options</h2>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n//\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.isRenderOptionsCardHidden = !State.preferences\n                .isRenderOptionsCardHidden;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"left-overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.isRenderOptionsCardHidden\n                                    ? this.optionsInvisible\n                                    : this.optionsVisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            />\n                            <br />\n                            <RenderOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.isRenderOptionsCardHidden\n                                        ? this.sideButtonVis\n                                        : this.sideButtonInv\n                                }\n                            />\n                        </div>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.graph.currentlyHoveredId &&\n                        State.graph.selectedNodes.length === 0 && (\n                            <NodeDetailPanel\n                                onNode={State.graph.currentlyHoveredId}\n                            />\n                        )}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.graph.selectedNodes.length !== 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    <SearchPanel />\n                    {State.preferences.rightClickNodePanelOpen && (\n                        <RightClickNodePanel />\n                    )}\n\n                    {State.preferences.rightClickBackgroundPanelOpen && (\n                        <RightClickBackgroundPanel />\n                    )}\n                    {State.preferences.deleteEdgePanelOpen &&\n                        State.graph.selectedNode && (\n                            <DeleteEdgeInteractionPanel\n                                onNode={State.graph.selectedNode}\n                            />\n                        )}\n                </div>\n            );\n        }\n    }\n);\n\n// export default FloatingCards;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\n// import State from \"./state\";\n// import EdgesPanel from \"./components/panels/EdgesPanel\";\n// import LabelsPanel from \"./components/panels/LabelsPanel\";\n// import SelectionPanel from \"./components/panels/SelectionPanel\";\n// import GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}